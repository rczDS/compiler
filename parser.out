Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     external_declaration -> function_definition
Rule 4     external_declaration -> declaration
Rule 5     declaration -> declaration_specifiers ;
Rule 6     declaration -> declaration_specifiers init_declarator_list ;
Rule 7     init_declarator_list -> init_declarator
Rule 8     init_declarator_list -> init_declarator_list , init_declarator
Rule 9     init_declarator -> declarator
Rule 10    init_declarator -> declarator = initializer
Rule 11    declaration_specifiers -> storage_class_specifier
Rule 12    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 13    declaration_specifiers -> type_specifier
Rule 14    declaration_specifiers -> type_specifier declaration_specifiers
Rule 15    declaration_specifiers -> type_qualifier
Rule 16    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 17    declaration_specifiers -> function_specifier
Rule 18    declaration_specifiers -> function_specifier declaration_specifiers
Rule 19    storage_class_specifier -> TYPEDEF
Rule 20    storage_class_specifier -> EXTERN
Rule 21    storage_class_specifier -> STATIC
Rule 22    storage_class_specifier -> AUTO
Rule 23    storage_class_specifier -> REGISTER
Rule 24    function_specifier -> INLINE
Rule 25    type_specifier -> VOID
Rule 26    type_specifier -> CHAR
Rule 27    type_specifier -> SHORT
Rule 28    type_specifier -> INT
Rule 29    type_specifier -> LONG
Rule 30    type_specifier -> FLOAT
Rule 31    type_specifier -> DOUBLE
Rule 32    type_specifier -> SIGNED
Rule 33    type_specifier -> UNSIGNED
Rule 34    type_specifier -> BOOL
Rule 35    type_specifier -> struct_or_union_specifier
Rule 36    type_specifier -> enum_specifier
Rule 37    type_qualifier -> CONST
Rule 38    type_qualifier -> RESTRICT
Rule 39    type_qualifier -> VOLATILE
Rule 40    enum_specifier -> ENUM { enumerator_list }
Rule 41    enum_specifier -> ENUM IDENTIFIER { enumerator_list }
Rule 42    enum_specifier -> ENUM { enumerator_list , }
Rule 43    enum_specifier -> ENUM IDENTIFIER { enumerator_list , }
Rule 44    enum_specifier -> ENUM IDENTIFIER
Rule 45    enumerator_list -> enumerator
Rule 46    enumerator_list -> enumerator_list , enumerator
Rule 47    enumerator -> IDENTIFIER
Rule 48    enumerator -> IDENTIFIER = constant_expression
Rule 49    struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }
Rule 50    struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 51    struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 52    struct_or_union -> STRUCT
Rule 53    struct_or_union -> UNION
Rule 54    struct_declaration_list -> struct_declaration
Rule 55    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 56    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 57    specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 58    specifier_qualifier_list -> type_specifier
Rule 59    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 60    specifier_qualifier_list -> type_qualifier
Rule 61    struct_declarator_list -> struct_declarator
Rule 62    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 63    struct_declarator -> declarator
Rule 64    struct_declarator -> : constant_expression
Rule 65    struct_declarator -> declarator : constant_expression
Rule 66    declarator -> pointer direct_declarator
Rule 67    declarator -> direct_declarator
Rule 68    pointer -> *
Rule 69    pointer -> * type_qualifier_list
Rule 70    pointer -> * pointer
Rule 71    pointer -> * type_qualifier_list pointer
Rule 72    type_qualifier_list -> type_qualifier
Rule 73    type_qualifier_list -> type_qualifier_list type_qualifier
Rule 74    direct_declarator -> IDENTIFIER
Rule 75    direct_declarator -> ( declarator )
Rule 76    direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]
Rule 77    direct_declarator -> direct_declarator [ type_qualifier_list ]
Rule 78    direct_declarator -> direct_declarator [ assignment_expression ]
Rule 79    direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]
Rule 80    direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]
Rule 81    direct_declarator -> direct_declarator [ type_qualifier_list * ]
Rule 82    direct_declarator -> direct_declarator [ * ]
Rule 83    direct_declarator -> direct_declarator [ ]
Rule 84    direct_declarator -> direct_declarator ( parameter_type_list )
Rule 85    direct_declarator -> direct_declarator ( identifier_list )
Rule 86    direct_declarator -> direct_declarator ( )
Rule 87    identifier_list -> IDENTIFIER
Rule 88    identifier_list -> identifier_list , IDENTIFIER
Rule 89    assignment_expression -> conditional_expression
Rule 90    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 91    assignment_operator -> =
Rule 92    assignment_operator -> MUL_ASSIGN
Rule 93    assignment_operator -> DIV_ASSIGN
Rule 94    assignment_operator -> MOD_ASSIGN
Rule 95    assignment_operator -> ADD_ASSIGN
Rule 96    assignment_operator -> SUB_ASSIGN
Rule 97    assignment_operator -> LEFT_ASSIGN
Rule 98    assignment_operator -> RIGHT_ASSIGN
Rule 99    assignment_operator -> AND_ASSIGN
Rule 100   assignment_operator -> XOR_ASSIGN
Rule 101   assignment_operator -> OR_ASSIGN
Rule 102   constant_expression -> conditional_expression
Rule 103   conditional_expression -> logical_or_expression
Rule 104   conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 105   logical_or_expression -> logical_and_expression
Rule 106   logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 107   logical_and_expression -> inclusive_or_expression
Rule 108   logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 109   inclusive_or_expression -> exclusive_or_expression
Rule 110   inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 111   exclusive_or_expression -> and_expression
Rule 112   exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 113   and_expression -> equality_expression
Rule 114   and_expression -> and_expression & equality_expression
Rule 115   equality_expression -> relational_expression
Rule 116   equality_expression -> equality_expression EQ_OP relational_expression
Rule 117   equality_expression -> equality_expression NE_OP relational_expression
Rule 118   relational_expression -> shift_expression
Rule 119   relational_expression -> relational_expression < shift_expression
Rule 120   relational_expression -> relational_expression > shift_expression
Rule 121   relational_expression -> relational_expression LE_OP shift_expression
Rule 122   relational_expression -> relational_expression GE_OP shift_expression
Rule 123   shift_expression -> additive_expression
Rule 124   shift_expression -> shift_expression LEFT_OP additive_expression
Rule 125   shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 126   additive_expression -> multiplicative_expression
Rule 127   additive_expression -> additive_expression + multiplicative_expression
Rule 128   additive_expression -> additive_expression - multiplicative_expression
Rule 129   multiplicative_expression -> cast_expression
Rule 130   multiplicative_expression -> multiplicative_expression * cast_expression
Rule 131   multiplicative_expression -> multiplicative_expression / cast_expression
Rule 132   multiplicative_expression -> multiplicative_expression % cast_expression
Rule 133   cast_expression -> unary_expression
Rule 134   cast_expression -> ( type_name ) cast_expression
Rule 135   unary_expression -> postfix_expression
Rule 136   unary_expression -> INC_OP unary_expression
Rule 137   unary_expression -> DEC_OP unary_expression
Rule 138   unary_expression -> unary_operator cast_expression
Rule 139   unary_expression -> SIZEOF unary_expression
Rule 140   unary_expression -> SIZEOF ( type_name )
Rule 141   unary_operator -> &
Rule 142   unary_operator -> *
Rule 143   unary_operator -> +
Rule 144   unary_operator -> -
Rule 145   unary_operator -> ~
Rule 146   unary_operator -> !
Rule 147   postfix_expression -> primary_expression
Rule 148   postfix_expression -> postfix_expression [ expression ]
Rule 149   postfix_expression -> postfix_expression ( )
Rule 150   postfix_expression -> postfix_expression ( argument_expression_list )
Rule 151   postfix_expression -> postfix_expression . IDENTIFIER
Rule 152   postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 153   postfix_expression -> postfix_expression INC_OP
Rule 154   postfix_expression -> postfix_expression DEC_OP
Rule 155   postfix_expression -> ( type_name ) { initializer_list }
Rule 156   postfix_expression -> ( type_name ) { initializer_list , }
Rule 157   primary_expression -> IDENTIFIER
Rule 158   primary_expression -> CONSTANT
Rule 159   primary_expression -> STRING_LITERAL
Rule 160   primary_expression -> ( expression )
Rule 161   expression -> assignment_expression
Rule 162   expression -> expression , assignment_expression
Rule 163   type_name -> specifier_qualifier_list
Rule 164   type_name -> specifier_qualifier_list abstract_declarator
Rule 165   abstract_declarator -> pointer
Rule 166   abstract_declarator -> direct_abstract_declarator
Rule 167   abstract_declarator -> pointer direct_abstract_declarator
Rule 168   direct_abstract_declarator -> ( abstract_declarator )
Rule 169   direct_abstract_declarator -> [ ]
Rule 170   direct_abstract_declarator -> [ assignment_expression ]
Rule 171   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 172   direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]
Rule 173   direct_abstract_declarator -> [ * ]
Rule 174   direct_abstract_declarator -> direct_abstract_declarator [ * ]
Rule 175   direct_abstract_declarator -> ( )
Rule 176   direct_abstract_declarator -> ( parameter_type_list )
Rule 177   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 178   direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )
Rule 179   parameter_type_list -> parameter_list
Rule 180   parameter_type_list -> parameter_list , ELLIPSIS
Rule 181   parameter_list -> parameter_declaration
Rule 182   parameter_list -> parameter_list , parameter_declaration
Rule 183   parameter_declaration -> declaration_specifiers declarator
Rule 184   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 185   parameter_declaration -> declaration_specifiers
Rule 186   argument_expression_list -> assignment_expression
Rule 187   argument_expression_list -> argument_expression_list , assignment_expression
Rule 188   initializer_list -> initializer
Rule 189   initializer_list -> designation initializer
Rule 190   initializer_list -> initializer_list , initializer
Rule 191   initializer_list -> initializer_list , designation initializer
Rule 192   initializer -> assignment_expression
Rule 193   initializer -> { initializer_list }
Rule 194   initializer -> { initializer_list , }
Rule 195   designation -> designator_list =
Rule 196   designator_list -> designator
Rule 197   designator_list -> designator_list designator
Rule 198   designator -> [ constant_expression ]
Rule 199   designator -> . IDENTIFIER
Rule 200   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 201   function_definition -> declaration_specifiers declarator compound_statement
Rule 202   declaration_list -> declaration
Rule 203   declaration_list -> declaration_list declaration
Rule 204   compound_statement -> { }
Rule 205   compound_statement -> { block_item_list }
Rule 206   block_item_list -> block_item
Rule 207   block_item_list -> block_item_list block_item
Rule 208   block_item -> declaration
Rule 209   block_item -> statement
Rule 210   statement -> labeled_statement
Rule 211   statement -> compound_statement
Rule 212   statement -> expression_statement
Rule 213   statement -> selection_statement
Rule 214   statement -> iteration_statement
Rule 215   statement -> jump_statement
Rule 216   labeled_statement -> IDENTIFIER : statement
Rule 217   labeled_statement -> CASE constant_expression : statement
Rule 218   labeled_statement -> DEFAULT : statement
Rule 219   expression_statement -> ;
Rule 220   expression_statement -> expression ;
Rule 221   selection_statement -> IF ( expression ) statement ELSE statement
Rule 222   selection_statement -> IF ( expression ) statement
Rule 223   selection_statement -> SWITCH ( expression ) statement
Rule 224   iteration_statement -> WHILE ( expression ) statement
Rule 225   iteration_statement -> DO statement WHILE ( expression ) ;
Rule 226   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 227   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 228   iteration_statement -> FOR ( declaration expression_statement ) statement
Rule 229   iteration_statement -> FOR ( declaration expression_statement expression ) statement
Rule 230   jump_statement -> GOTO IDENTIFIER ;
Rule 231   jump_statement -> CONTINUE ;
Rule 232   jump_statement -> BREAK ;
Rule 233   jump_statement -> RETURN ;
Rule 234   jump_statement -> RETURN expression ;

Terminals, with rules where they appear

!                    : 146
%                    : 132
&                    : 114 141
(                    : 75 84 85 86 134 140 149 150 155 156 160 168 175 176 177 178 221 222 223 224 225 226 227 228 229
)                    : 75 84 85 86 134 140 149 150 155 156 160 168 175 176 177 178 221 222 223 224 225 226 227 228 229
*                    : 68 69 70 71 81 82 130 142 173 174
+                    : 127 143
,                    : 8 42 43 46 62 88 156 162 180 182 187 190 191 194
-                    : 128 144
.                    : 151 199
/                    : 131
:                    : 64 65 104 216 217 218
;                    : 5 6 56 219 220 225 230 231 232 233 234
<                    : 119
=                    : 10 48 91 195
>                    : 120
?                    : 104
ADD_ASSIGN           : 95
AND_ASSIGN           : 99
AND_OP               : 108
AUTO                 : 22
BOOL                 : 34
BREAK                : 232
CASE                 : 217
CHAR                 : 26
CONST                : 37
CONSTANT             : 158
CONTINUE             : 231
DEC_OP               : 137 154
DEFAULT              : 218
DIV_ASSIGN           : 93
DO                   : 225
DOUBLE               : 31
ELLIPSIS             : 180
ELSE                 : 221
ENUM                 : 40 41 42 43 44
EQ_OP                : 116
EXTERN               : 20
FLOAT                : 30
FOR                  : 226 227 228 229
GE_OP                : 122
GOTO                 : 230
IDENTIFIER           : 41 43 44 47 48 49 51 74 87 88 151 152 157 199 216 230
IF                   : 221 222
INC_OP               : 136 153
INLINE               : 24
INT                  : 28
LEFT_ASSIGN          : 97
LEFT_OP              : 124
LE_OP                : 121
LONG                 : 29
MOD_ASSIGN           : 94
MUL_ASSIGN           : 92
NE_OP                : 117
OR_ASSIGN            : 101
OR_OP                : 106
PTR_OP               : 152
REGISTER             : 23
RESTRICT             : 38
RETURN               : 233 234
RIGHT_ASSIGN         : 98
RIGHT_OP             : 125
SHORT                : 27
SIGNED               : 32
SIZEOF               : 139 140
STATIC               : 21 79 80
STRING_LITERAL       : 159
STRUCT               : 52
SUB_ASSIGN           : 96
SWITCH               : 223
TYPEDEF              : 19
UNION                : 53
UNSIGNED             : 33
VOID                 : 25
VOLATILE             : 39
WHILE                : 224 225
XOR_ASSIGN           : 100
[                    : 76 77 78 79 80 81 82 83 148 169 170 171 172 173 174 198
]                    : 76 77 78 79 80 81 82 83 148 169 170 171 172 173 174 198
^                    : 112
error                : 
{                    : 40 41 42 43 49 50 155 156 193 194 204 205
|                    : 110
}                    : 40 41 42 43 49 50 155 156 193 194 204 205
~                    : 145

Nonterminals, with rules where they appear

abstract_declarator  : 164 168 184
additive_expression  : 123 124 125 127 128
and_expression       : 111 112 114
argument_expression_list : 150 187
assignment_expression : 76 78 79 80 90 161 162 170 172 186 187 192
assignment_operator  : 90
block_item           : 206 207
block_item_list      : 205 207
cast_expression      : 129 130 131 132 134 138
compound_statement   : 200 201 211
conditional_expression : 89 102 104
constant_expression  : 48 64 65 198 217
declaration          : 4 202 203 208 228 229
declaration_list     : 200 203
declaration_specifiers : 5 6 12 14 16 18 183 184 185 200 201
declarator           : 9 10 63 65 75 183 200 201
designation          : 189 191
designator           : 196 197
designator_list      : 195 197
direct_abstract_declarator : 166 167 171 172 174 177 178
direct_declarator    : 66 67 76 77 78 79 80 81 82 83 84 85 86
enum_specifier       : 36
enumerator           : 45 46
enumerator_list      : 40 41 42 43 46
equality_expression  : 113 114 116 117
exclusive_or_expression : 109 110 112
expression           : 104 148 160 162 220 221 222 223 224 225 227 229 234
expression_statement : 212 226 226 227 227 228 229
external_declaration : 1 2
function_definition  : 3
function_specifier   : 17 18
identifier_list      : 85 88
inclusive_or_expression : 107 108 110
init_declarator      : 7 8
init_declarator_list : 6 8
initializer          : 10 188 189 190 191
initializer_list     : 155 156 190 191 193 194
iteration_statement  : 214
jump_statement       : 215
labeled_statement    : 210
logical_and_expression : 105 106 108
logical_or_expression : 103 104 106
multiplicative_expression : 126 127 128 130 131 132
parameter_declaration : 181 182
parameter_list       : 179 180 182
parameter_type_list  : 84 176 178
pointer              : 66 70 71 165 167
postfix_expression   : 135 148 149 150 151 152 153 154
primary_expression   : 147
relational_expression : 115 116 117 119 120 121 122
selection_statement  : 213
shift_expression     : 118 119 120 121 122 124 125
specifier_qualifier_list : 56 57 59 163 164
statement            : 209 216 217 218 221 221 222 223 224 225 226 227 228 229
storage_class_specifier : 11 12
struct_declaration   : 54 55
struct_declaration_list : 49 50 55
struct_declarator    : 61 62
struct_declarator_list : 56 62
struct_or_union      : 49 50 51
struct_or_union_specifier : 35
translation_unit     : 2 0
type_name            : 134 140 155 156
type_qualifier       : 15 16 59 60 72 73
type_qualifier_list  : 69 71 73 76 77 79 80 81
type_specifier       : 13 14 57 58
unary_expression     : 90 133 136 137 139
unary_operator       : 138

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (200) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (201) function_definition -> . declaration_specifiers declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    translation_unit               shift and go to state 1
    external_declaration           shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 1

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (3) external_declaration -> . function_definition
    (4) external_declaration -> . declaration
    (200) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (201) function_definition -> . declaration_specifiers declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    external_declaration           shift and go to state 35
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 2

    (1) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    RESTRICT        reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    INLINE          reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 3

    (3) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 3 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (external_declaration -> function_definition .)
    STATIC          reduce using rule 3 (external_declaration -> function_definition .)
    AUTO            reduce using rule 3 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (external_declaration -> function_definition .)
    VOID            reduce using rule 3 (external_declaration -> function_definition .)
    CHAR            reduce using rule 3 (external_declaration -> function_definition .)
    SHORT           reduce using rule 3 (external_declaration -> function_definition .)
    INT             reduce using rule 3 (external_declaration -> function_definition .)
    LONG            reduce using rule 3 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (external_declaration -> function_definition .)
    BOOL            reduce using rule 3 (external_declaration -> function_definition .)
    CONST           reduce using rule 3 (external_declaration -> function_definition .)
    RESTRICT        reduce using rule 3 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (external_declaration -> function_definition .)
    INLINE          reduce using rule 3 (external_declaration -> function_definition .)
    ENUM            reduce using rule 3 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (external_declaration -> function_definition .)
    UNION           reduce using rule 3 (external_declaration -> function_definition .)
    $end            reduce using rule 3 (external_declaration -> function_definition .)


state 4

    (4) external_declaration -> declaration .

    TYPEDEF         reduce using rule 4 (external_declaration -> declaration .)
    EXTERN          reduce using rule 4 (external_declaration -> declaration .)
    STATIC          reduce using rule 4 (external_declaration -> declaration .)
    AUTO            reduce using rule 4 (external_declaration -> declaration .)
    REGISTER        reduce using rule 4 (external_declaration -> declaration .)
    VOID            reduce using rule 4 (external_declaration -> declaration .)
    CHAR            reduce using rule 4 (external_declaration -> declaration .)
    SHORT           reduce using rule 4 (external_declaration -> declaration .)
    INT             reduce using rule 4 (external_declaration -> declaration .)
    LONG            reduce using rule 4 (external_declaration -> declaration .)
    FLOAT           reduce using rule 4 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (external_declaration -> declaration .)
    SIGNED          reduce using rule 4 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (external_declaration -> declaration .)
    BOOL            reduce using rule 4 (external_declaration -> declaration .)
    CONST           reduce using rule 4 (external_declaration -> declaration .)
    RESTRICT        reduce using rule 4 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (external_declaration -> declaration .)
    INLINE          reduce using rule 4 (external_declaration -> declaration .)
    ENUM            reduce using rule 4 (external_declaration -> declaration .)
    STRUCT          reduce using rule 4 (external_declaration -> declaration .)
    UNION           reduce using rule 4 (external_declaration -> declaration .)
    $end            reduce using rule 4 (external_declaration -> declaration .)


state 5

    (200) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (201) function_definition -> declaration_specifiers . declarator compound_statement
    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declarator                     shift and go to state 36
    init_declarator_list           shift and go to state 38
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40
    init_declarator                shift and go to state 41

state 6

    (11) declaration_specifiers -> storage_class_specifier .
    (12) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    *               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    (               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    [               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    ,               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    )               reduce using rule 11 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    storage_class_specifier        shift and go to state 6
    declaration_specifiers         shift and go to state 45
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 7

    (13) declaration_specifiers -> type_specifier .
    (14) declaration_specifiers -> type_specifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 13 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 13 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_specifier                 shift and go to state 7
    declaration_specifiers         shift and go to state 46
    storage_class_specifier        shift and go to state 6
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 8

    (15) declaration_specifiers -> type_qualifier .
    (16) declaration_specifiers -> type_qualifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    *               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    (               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    [               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    ,               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    )               reduce using rule 15 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qualifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 47
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 9

    (17) declaration_specifiers -> function_specifier .
    (18) declaration_specifiers -> function_specifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    *               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    IDENTIFIER      reduce using rule 17 (declaration_specifiers -> function_specifier .)
    (               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    [               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    ,               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    )               reduce using rule 17 (declaration_specifiers -> function_specifier .)
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    function_specifier             shift and go to state 9
    declaration_specifiers         shift and go to state 48
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 10

    (19) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    INLINE          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 19 (storage_class_specifier -> TYPEDEF .)


state 11

    (20) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 20 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 20 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 20 (storage_class_specifier -> EXTERN .)
    INLINE          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 20 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 20 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 20 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 20 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 20 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 20 (storage_class_specifier -> EXTERN .)


state 12

    (21) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 21 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 21 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 21 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 21 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 21 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 21 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 21 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 21 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 21 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 21 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 21 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 21 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 21 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 21 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 21 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 21 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 21 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 21 (storage_class_specifier -> STATIC .)
    INLINE          reduce using rule 21 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 21 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 21 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 21 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 21 (storage_class_specifier -> STATIC .)
    *               reduce using rule 21 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 21 (storage_class_specifier -> STATIC .)
    (               reduce using rule 21 (storage_class_specifier -> STATIC .)
    [               reduce using rule 21 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 21 (storage_class_specifier -> STATIC .)
    )               reduce using rule 21 (storage_class_specifier -> STATIC .)


state 13

    (22) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 22 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 22 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 22 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 22 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 22 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 22 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 22 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 22 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 22 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 22 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 22 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 22 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 22 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 22 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 22 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 22 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 22 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 22 (storage_class_specifier -> AUTO .)
    INLINE          reduce using rule 22 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 22 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 22 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 22 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 22 (storage_class_specifier -> AUTO .)
    *               reduce using rule 22 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 22 (storage_class_specifier -> AUTO .)
    (               reduce using rule 22 (storage_class_specifier -> AUTO .)
    [               reduce using rule 22 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 22 (storage_class_specifier -> AUTO .)
    )               reduce using rule 22 (storage_class_specifier -> AUTO .)


state 14

    (23) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 23 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 23 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 23 (storage_class_specifier -> REGISTER .)
    INLINE          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 23 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 23 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 23 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 23 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 23 (storage_class_specifier -> REGISTER .)


state 15

    (25) type_specifier -> VOID .

    TYPEDEF         reduce using rule 25 (type_specifier -> VOID .)
    EXTERN          reduce using rule 25 (type_specifier -> VOID .)
    STATIC          reduce using rule 25 (type_specifier -> VOID .)
    AUTO            reduce using rule 25 (type_specifier -> VOID .)
    REGISTER        reduce using rule 25 (type_specifier -> VOID .)
    VOID            reduce using rule 25 (type_specifier -> VOID .)
    CHAR            reduce using rule 25 (type_specifier -> VOID .)
    SHORT           reduce using rule 25 (type_specifier -> VOID .)
    INT             reduce using rule 25 (type_specifier -> VOID .)
    LONG            reduce using rule 25 (type_specifier -> VOID .)
    FLOAT           reduce using rule 25 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 25 (type_specifier -> VOID .)
    SIGNED          reduce using rule 25 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 25 (type_specifier -> VOID .)
    BOOL            reduce using rule 25 (type_specifier -> VOID .)
    CONST           reduce using rule 25 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 25 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 25 (type_specifier -> VOID .)
    INLINE          reduce using rule 25 (type_specifier -> VOID .)
    ENUM            reduce using rule 25 (type_specifier -> VOID .)
    STRUCT          reduce using rule 25 (type_specifier -> VOID .)
    UNION           reduce using rule 25 (type_specifier -> VOID .)
    ;               reduce using rule 25 (type_specifier -> VOID .)
    *               reduce using rule 25 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 25 (type_specifier -> VOID .)
    (               reduce using rule 25 (type_specifier -> VOID .)
    [               reduce using rule 25 (type_specifier -> VOID .)
    ,               reduce using rule 25 (type_specifier -> VOID .)
    )               reduce using rule 25 (type_specifier -> VOID .)
    :               reduce using rule 25 (type_specifier -> VOID .)


state 16

    (26) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 26 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 26 (type_specifier -> CHAR .)
    STATIC          reduce using rule 26 (type_specifier -> CHAR .)
    AUTO            reduce using rule 26 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 26 (type_specifier -> CHAR .)
    VOID            reduce using rule 26 (type_specifier -> CHAR .)
    CHAR            reduce using rule 26 (type_specifier -> CHAR .)
    SHORT           reduce using rule 26 (type_specifier -> CHAR .)
    INT             reduce using rule 26 (type_specifier -> CHAR .)
    LONG            reduce using rule 26 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 26 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 26 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 26 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 26 (type_specifier -> CHAR .)
    BOOL            reduce using rule 26 (type_specifier -> CHAR .)
    CONST           reduce using rule 26 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 26 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 26 (type_specifier -> CHAR .)
    INLINE          reduce using rule 26 (type_specifier -> CHAR .)
    ENUM            reduce using rule 26 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 26 (type_specifier -> CHAR .)
    UNION           reduce using rule 26 (type_specifier -> CHAR .)
    ;               reduce using rule 26 (type_specifier -> CHAR .)
    *               reduce using rule 26 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 26 (type_specifier -> CHAR .)
    (               reduce using rule 26 (type_specifier -> CHAR .)
    [               reduce using rule 26 (type_specifier -> CHAR .)
    ,               reduce using rule 26 (type_specifier -> CHAR .)
    )               reduce using rule 26 (type_specifier -> CHAR .)
    :               reduce using rule 26 (type_specifier -> CHAR .)


state 17

    (27) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 27 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 27 (type_specifier -> SHORT .)
    STATIC          reduce using rule 27 (type_specifier -> SHORT .)
    AUTO            reduce using rule 27 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 27 (type_specifier -> SHORT .)
    VOID            reduce using rule 27 (type_specifier -> SHORT .)
    CHAR            reduce using rule 27 (type_specifier -> SHORT .)
    SHORT           reduce using rule 27 (type_specifier -> SHORT .)
    INT             reduce using rule 27 (type_specifier -> SHORT .)
    LONG            reduce using rule 27 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 27 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 27 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 27 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 27 (type_specifier -> SHORT .)
    BOOL            reduce using rule 27 (type_specifier -> SHORT .)
    CONST           reduce using rule 27 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 27 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 27 (type_specifier -> SHORT .)
    INLINE          reduce using rule 27 (type_specifier -> SHORT .)
    ENUM            reduce using rule 27 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 27 (type_specifier -> SHORT .)
    UNION           reduce using rule 27 (type_specifier -> SHORT .)
    ;               reduce using rule 27 (type_specifier -> SHORT .)
    *               reduce using rule 27 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 27 (type_specifier -> SHORT .)
    (               reduce using rule 27 (type_specifier -> SHORT .)
    [               reduce using rule 27 (type_specifier -> SHORT .)
    ,               reduce using rule 27 (type_specifier -> SHORT .)
    )               reduce using rule 27 (type_specifier -> SHORT .)
    :               reduce using rule 27 (type_specifier -> SHORT .)


state 18

    (28) type_specifier -> INT .

    TYPEDEF         reduce using rule 28 (type_specifier -> INT .)
    EXTERN          reduce using rule 28 (type_specifier -> INT .)
    STATIC          reduce using rule 28 (type_specifier -> INT .)
    AUTO            reduce using rule 28 (type_specifier -> INT .)
    REGISTER        reduce using rule 28 (type_specifier -> INT .)
    VOID            reduce using rule 28 (type_specifier -> INT .)
    CHAR            reduce using rule 28 (type_specifier -> INT .)
    SHORT           reduce using rule 28 (type_specifier -> INT .)
    INT             reduce using rule 28 (type_specifier -> INT .)
    LONG            reduce using rule 28 (type_specifier -> INT .)
    FLOAT           reduce using rule 28 (type_specifier -> INT .)
    DOUBLE          reduce using rule 28 (type_specifier -> INT .)
    SIGNED          reduce using rule 28 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 28 (type_specifier -> INT .)
    BOOL            reduce using rule 28 (type_specifier -> INT .)
    CONST           reduce using rule 28 (type_specifier -> INT .)
    RESTRICT        reduce using rule 28 (type_specifier -> INT .)
    VOLATILE        reduce using rule 28 (type_specifier -> INT .)
    INLINE          reduce using rule 28 (type_specifier -> INT .)
    ENUM            reduce using rule 28 (type_specifier -> INT .)
    STRUCT          reduce using rule 28 (type_specifier -> INT .)
    UNION           reduce using rule 28 (type_specifier -> INT .)
    ;               reduce using rule 28 (type_specifier -> INT .)
    *               reduce using rule 28 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 28 (type_specifier -> INT .)
    (               reduce using rule 28 (type_specifier -> INT .)
    [               reduce using rule 28 (type_specifier -> INT .)
    ,               reduce using rule 28 (type_specifier -> INT .)
    )               reduce using rule 28 (type_specifier -> INT .)
    :               reduce using rule 28 (type_specifier -> INT .)


state 19

    (29) type_specifier -> LONG .

    TYPEDEF         reduce using rule 29 (type_specifier -> LONG .)
    EXTERN          reduce using rule 29 (type_specifier -> LONG .)
    STATIC          reduce using rule 29 (type_specifier -> LONG .)
    AUTO            reduce using rule 29 (type_specifier -> LONG .)
    REGISTER        reduce using rule 29 (type_specifier -> LONG .)
    VOID            reduce using rule 29 (type_specifier -> LONG .)
    CHAR            reduce using rule 29 (type_specifier -> LONG .)
    SHORT           reduce using rule 29 (type_specifier -> LONG .)
    INT             reduce using rule 29 (type_specifier -> LONG .)
    LONG            reduce using rule 29 (type_specifier -> LONG .)
    FLOAT           reduce using rule 29 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 29 (type_specifier -> LONG .)
    SIGNED          reduce using rule 29 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 29 (type_specifier -> LONG .)
    BOOL            reduce using rule 29 (type_specifier -> LONG .)
    CONST           reduce using rule 29 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 29 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 29 (type_specifier -> LONG .)
    INLINE          reduce using rule 29 (type_specifier -> LONG .)
    ENUM            reduce using rule 29 (type_specifier -> LONG .)
    STRUCT          reduce using rule 29 (type_specifier -> LONG .)
    UNION           reduce using rule 29 (type_specifier -> LONG .)
    ;               reduce using rule 29 (type_specifier -> LONG .)
    *               reduce using rule 29 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 29 (type_specifier -> LONG .)
    (               reduce using rule 29 (type_specifier -> LONG .)
    [               reduce using rule 29 (type_specifier -> LONG .)
    ,               reduce using rule 29 (type_specifier -> LONG .)
    )               reduce using rule 29 (type_specifier -> LONG .)
    :               reduce using rule 29 (type_specifier -> LONG .)


state 20

    (30) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 30 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 30 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 30 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 30 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 30 (type_specifier -> FLOAT .)
    VOID            reduce using rule 30 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 30 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 30 (type_specifier -> FLOAT .)
    INT             reduce using rule 30 (type_specifier -> FLOAT .)
    LONG            reduce using rule 30 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 30 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 30 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 30 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 30 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 30 (type_specifier -> FLOAT .)
    CONST           reduce using rule 30 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 30 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 30 (type_specifier -> FLOAT .)
    INLINE          reduce using rule 30 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 30 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 30 (type_specifier -> FLOAT .)
    UNION           reduce using rule 30 (type_specifier -> FLOAT .)
    ;               reduce using rule 30 (type_specifier -> FLOAT .)
    *               reduce using rule 30 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 30 (type_specifier -> FLOAT .)
    (               reduce using rule 30 (type_specifier -> FLOAT .)
    [               reduce using rule 30 (type_specifier -> FLOAT .)
    ,               reduce using rule 30 (type_specifier -> FLOAT .)
    )               reduce using rule 30 (type_specifier -> FLOAT .)
    :               reduce using rule 30 (type_specifier -> FLOAT .)


state 21

    (31) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 31 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 31 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 31 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 31 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 31 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 31 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 31 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 31 (type_specifier -> DOUBLE .)
    INT             reduce using rule 31 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 31 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 31 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 31 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 31 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 31 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 31 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 31 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 31 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 31 (type_specifier -> DOUBLE .)
    INLINE          reduce using rule 31 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 31 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 31 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 31 (type_specifier -> DOUBLE .)
    ;               reduce using rule 31 (type_specifier -> DOUBLE .)
    *               reduce using rule 31 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 31 (type_specifier -> DOUBLE .)
    (               reduce using rule 31 (type_specifier -> DOUBLE .)
    [               reduce using rule 31 (type_specifier -> DOUBLE .)
    ,               reduce using rule 31 (type_specifier -> DOUBLE .)
    )               reduce using rule 31 (type_specifier -> DOUBLE .)
    :               reduce using rule 31 (type_specifier -> DOUBLE .)


state 22

    (32) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 32 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 32 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 32 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 32 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 32 (type_specifier -> SIGNED .)
    VOID            reduce using rule 32 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 32 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 32 (type_specifier -> SIGNED .)
    INT             reduce using rule 32 (type_specifier -> SIGNED .)
    LONG            reduce using rule 32 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 32 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 32 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 32 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 32 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 32 (type_specifier -> SIGNED .)
    CONST           reduce using rule 32 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 32 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 32 (type_specifier -> SIGNED .)
    INLINE          reduce using rule 32 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 32 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 32 (type_specifier -> SIGNED .)
    UNION           reduce using rule 32 (type_specifier -> SIGNED .)
    ;               reduce using rule 32 (type_specifier -> SIGNED .)
    *               reduce using rule 32 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 32 (type_specifier -> SIGNED .)
    (               reduce using rule 32 (type_specifier -> SIGNED .)
    [               reduce using rule 32 (type_specifier -> SIGNED .)
    ,               reduce using rule 32 (type_specifier -> SIGNED .)
    )               reduce using rule 32 (type_specifier -> SIGNED .)
    :               reduce using rule 32 (type_specifier -> SIGNED .)


state 23

    (33) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 33 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 33 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 33 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 33 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 33 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 33 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 33 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 33 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 33 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 33 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 33 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 33 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 33 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 33 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 33 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 33 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 33 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 33 (type_specifier -> UNSIGNED .)
    INLINE          reduce using rule 33 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 33 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 33 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 33 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 33 (type_specifier -> UNSIGNED .)
    *               reduce using rule 33 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 33 (type_specifier -> UNSIGNED .)
    (               reduce using rule 33 (type_specifier -> UNSIGNED .)
    [               reduce using rule 33 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 33 (type_specifier -> UNSIGNED .)
    )               reduce using rule 33 (type_specifier -> UNSIGNED .)
    :               reduce using rule 33 (type_specifier -> UNSIGNED .)


state 24

    (34) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 34 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 34 (type_specifier -> BOOL .)
    STATIC          reduce using rule 34 (type_specifier -> BOOL .)
    AUTO            reduce using rule 34 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 34 (type_specifier -> BOOL .)
    VOID            reduce using rule 34 (type_specifier -> BOOL .)
    CHAR            reduce using rule 34 (type_specifier -> BOOL .)
    SHORT           reduce using rule 34 (type_specifier -> BOOL .)
    INT             reduce using rule 34 (type_specifier -> BOOL .)
    LONG            reduce using rule 34 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 34 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 34 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 34 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 34 (type_specifier -> BOOL .)
    BOOL            reduce using rule 34 (type_specifier -> BOOL .)
    CONST           reduce using rule 34 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 34 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 34 (type_specifier -> BOOL .)
    INLINE          reduce using rule 34 (type_specifier -> BOOL .)
    ENUM            reduce using rule 34 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 34 (type_specifier -> BOOL .)
    UNION           reduce using rule 34 (type_specifier -> BOOL .)
    ;               reduce using rule 34 (type_specifier -> BOOL .)
    *               reduce using rule 34 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 34 (type_specifier -> BOOL .)
    (               reduce using rule 34 (type_specifier -> BOOL .)
    [               reduce using rule 34 (type_specifier -> BOOL .)
    ,               reduce using rule 34 (type_specifier -> BOOL .)
    )               reduce using rule 34 (type_specifier -> BOOL .)
    :               reduce using rule 34 (type_specifier -> BOOL .)


state 25

    (35) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    INLINE          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 35 (type_specifier -> struct_or_union_specifier .)


state 26

    (36) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 36 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 36 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 36 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 36 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 36 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 36 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 36 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 36 (type_specifier -> enum_specifier .)
    INT             reduce using rule 36 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 36 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 36 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 36 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 36 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 36 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 36 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 36 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 36 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 36 (type_specifier -> enum_specifier .)
    INLINE          reduce using rule 36 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 36 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 36 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 36 (type_specifier -> enum_specifier .)
    ;               reduce using rule 36 (type_specifier -> enum_specifier .)
    *               reduce using rule 36 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 36 (type_specifier -> enum_specifier .)
    (               reduce using rule 36 (type_specifier -> enum_specifier .)
    [               reduce using rule 36 (type_specifier -> enum_specifier .)
    ,               reduce using rule 36 (type_specifier -> enum_specifier .)
    )               reduce using rule 36 (type_specifier -> enum_specifier .)
    :               reduce using rule 36 (type_specifier -> enum_specifier .)


state 27

    (37) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 37 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 37 (type_qualifier -> CONST .)
    STATIC          reduce using rule 37 (type_qualifier -> CONST .)
    AUTO            reduce using rule 37 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 37 (type_qualifier -> CONST .)
    VOID            reduce using rule 37 (type_qualifier -> CONST .)
    CHAR            reduce using rule 37 (type_qualifier -> CONST .)
    SHORT           reduce using rule 37 (type_qualifier -> CONST .)
    INT             reduce using rule 37 (type_qualifier -> CONST .)
    LONG            reduce using rule 37 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 37 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 37 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 37 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 37 (type_qualifier -> CONST .)
    BOOL            reduce using rule 37 (type_qualifier -> CONST .)
    CONST           reduce using rule 37 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 37 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 37 (type_qualifier -> CONST .)
    INLINE          reduce using rule 37 (type_qualifier -> CONST .)
    ENUM            reduce using rule 37 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 37 (type_qualifier -> CONST .)
    UNION           reduce using rule 37 (type_qualifier -> CONST .)
    ;               reduce using rule 37 (type_qualifier -> CONST .)
    *               reduce using rule 37 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 37 (type_qualifier -> CONST .)
    (               reduce using rule 37 (type_qualifier -> CONST .)
    [               reduce using rule 37 (type_qualifier -> CONST .)
    ,               reduce using rule 37 (type_qualifier -> CONST .)
    )               reduce using rule 37 (type_qualifier -> CONST .)
    :               reduce using rule 37 (type_qualifier -> CONST .)
    ]               reduce using rule 37 (type_qualifier -> CONST .)
    INC_OP          reduce using rule 37 (type_qualifier -> CONST .)
    DEC_OP          reduce using rule 37 (type_qualifier -> CONST .)
    SIZEOF          reduce using rule 37 (type_qualifier -> CONST .)
    &               reduce using rule 37 (type_qualifier -> CONST .)
    +               reduce using rule 37 (type_qualifier -> CONST .)
    -               reduce using rule 37 (type_qualifier -> CONST .)
    ~               reduce using rule 37 (type_qualifier -> CONST .)
    !               reduce using rule 37 (type_qualifier -> CONST .)
    CONSTANT        reduce using rule 37 (type_qualifier -> CONST .)
    STRING_LITERAL  reduce using rule 37 (type_qualifier -> CONST .)


state 28

    (38) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 38 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 38 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 38 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 38 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 38 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 38 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 38 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 38 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 38 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 38 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 38 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 38 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 38 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 38 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 38 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 38 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 38 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 38 (type_qualifier -> RESTRICT .)
    INLINE          reduce using rule 38 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 38 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 38 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 38 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 38 (type_qualifier -> RESTRICT .)
    *               reduce using rule 38 (type_qualifier -> RESTRICT .)
    IDENTIFIER      reduce using rule 38 (type_qualifier -> RESTRICT .)
    (               reduce using rule 38 (type_qualifier -> RESTRICT .)
    [               reduce using rule 38 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 38 (type_qualifier -> RESTRICT .)
    )               reduce using rule 38 (type_qualifier -> RESTRICT .)
    :               reduce using rule 38 (type_qualifier -> RESTRICT .)
    ]               reduce using rule 38 (type_qualifier -> RESTRICT .)
    INC_OP          reduce using rule 38 (type_qualifier -> RESTRICT .)
    DEC_OP          reduce using rule 38 (type_qualifier -> RESTRICT .)
    SIZEOF          reduce using rule 38 (type_qualifier -> RESTRICT .)
    &               reduce using rule 38 (type_qualifier -> RESTRICT .)
    +               reduce using rule 38 (type_qualifier -> RESTRICT .)
    -               reduce using rule 38 (type_qualifier -> RESTRICT .)
    ~               reduce using rule 38 (type_qualifier -> RESTRICT .)
    !               reduce using rule 38 (type_qualifier -> RESTRICT .)
    CONSTANT        reduce using rule 38 (type_qualifier -> RESTRICT .)
    STRING_LITERAL  reduce using rule 38 (type_qualifier -> RESTRICT .)


state 29

    (39) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 39 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 39 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 39 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 39 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 39 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 39 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 39 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 39 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 39 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 39 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 39 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 39 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 39 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 39 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 39 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 39 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 39 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 39 (type_qualifier -> VOLATILE .)
    INLINE          reduce using rule 39 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 39 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 39 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 39 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 39 (type_qualifier -> VOLATILE .)
    *               reduce using rule 39 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 39 (type_qualifier -> VOLATILE .)
    (               reduce using rule 39 (type_qualifier -> VOLATILE .)
    [               reduce using rule 39 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 39 (type_qualifier -> VOLATILE .)
    )               reduce using rule 39 (type_qualifier -> VOLATILE .)
    :               reduce using rule 39 (type_qualifier -> VOLATILE .)
    ]               reduce using rule 39 (type_qualifier -> VOLATILE .)
    INC_OP          reduce using rule 39 (type_qualifier -> VOLATILE .)
    DEC_OP          reduce using rule 39 (type_qualifier -> VOLATILE .)
    SIZEOF          reduce using rule 39 (type_qualifier -> VOLATILE .)
    &               reduce using rule 39 (type_qualifier -> VOLATILE .)
    +               reduce using rule 39 (type_qualifier -> VOLATILE .)
    -               reduce using rule 39 (type_qualifier -> VOLATILE .)
    ~               reduce using rule 39 (type_qualifier -> VOLATILE .)
    !               reduce using rule 39 (type_qualifier -> VOLATILE .)
    CONSTANT        reduce using rule 39 (type_qualifier -> VOLATILE .)
    STRING_LITERAL  reduce using rule 39 (type_qualifier -> VOLATILE .)


state 30

    (24) function_specifier -> INLINE .

    TYPEDEF         reduce using rule 24 (function_specifier -> INLINE .)
    EXTERN          reduce using rule 24 (function_specifier -> INLINE .)
    STATIC          reduce using rule 24 (function_specifier -> INLINE .)
    AUTO            reduce using rule 24 (function_specifier -> INLINE .)
    REGISTER        reduce using rule 24 (function_specifier -> INLINE .)
    VOID            reduce using rule 24 (function_specifier -> INLINE .)
    CHAR            reduce using rule 24 (function_specifier -> INLINE .)
    SHORT           reduce using rule 24 (function_specifier -> INLINE .)
    INT             reduce using rule 24 (function_specifier -> INLINE .)
    LONG            reduce using rule 24 (function_specifier -> INLINE .)
    FLOAT           reduce using rule 24 (function_specifier -> INLINE .)
    DOUBLE          reduce using rule 24 (function_specifier -> INLINE .)
    SIGNED          reduce using rule 24 (function_specifier -> INLINE .)
    UNSIGNED        reduce using rule 24 (function_specifier -> INLINE .)
    BOOL            reduce using rule 24 (function_specifier -> INLINE .)
    CONST           reduce using rule 24 (function_specifier -> INLINE .)
    RESTRICT        reduce using rule 24 (function_specifier -> INLINE .)
    VOLATILE        reduce using rule 24 (function_specifier -> INLINE .)
    INLINE          reduce using rule 24 (function_specifier -> INLINE .)
    ENUM            reduce using rule 24 (function_specifier -> INLINE .)
    STRUCT          reduce using rule 24 (function_specifier -> INLINE .)
    UNION           reduce using rule 24 (function_specifier -> INLINE .)
    ;               reduce using rule 24 (function_specifier -> INLINE .)
    *               reduce using rule 24 (function_specifier -> INLINE .)
    IDENTIFIER      reduce using rule 24 (function_specifier -> INLINE .)
    (               reduce using rule 24 (function_specifier -> INLINE .)
    [               reduce using rule 24 (function_specifier -> INLINE .)
    ,               reduce using rule 24 (function_specifier -> INLINE .)
    )               reduce using rule 24 (function_specifier -> INLINE .)


state 31

    (49) struct_or_union_specifier -> struct_or_union . IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (51) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 49
    {               shift and go to state 50


state 32

    (40) enum_specifier -> ENUM . { enumerator_list }
    (41) enum_specifier -> ENUM . IDENTIFIER { enumerator_list }
    (42) enum_specifier -> ENUM . { enumerator_list , }
    (43) enum_specifier -> ENUM . IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> ENUM . IDENTIFIER

    {               shift and go to state 51
    IDENTIFIER      shift and go to state 52


state 33

    (52) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 52 (struct_or_union -> STRUCT .)
    {               reduce using rule 52 (struct_or_union -> STRUCT .)


state 34

    (53) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 53 (struct_or_union -> UNION .)
    {               reduce using rule 53 (struct_or_union -> UNION .)


state 35

    (2) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    RESTRICT        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INLINE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 36

    (200) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (201) function_definition -> declaration_specifiers declarator . compound_statement
    (9) init_declarator -> declarator .
    (10) init_declarator -> declarator . = initializer
    (202) declaration_list -> . declaration
    (203) declaration_list -> . declaration_list declaration
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ;               reduce using rule 9 (init_declarator -> declarator .)
    ,               reduce using rule 9 (init_declarator -> declarator .)
    =               shift and go to state 56
    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declaration_specifiers         shift and go to state 53
    declaration_list               shift and go to state 54
    compound_statement             shift and go to state 55
    declaration                    shift and go to state 57
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 37

    (5) declaration -> declaration_specifiers ; .

    TYPEDEF         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RESTRICT        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INLINE          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    IDENTIFIER      reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INC_OP          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEC_OP          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONSTANT        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 5 (declaration -> declaration_specifiers ; .)


state 38

    (6) declaration -> declaration_specifiers init_declarator_list . ;
    (8) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 59
    ,               shift and go to state 60


state 39

    (66) declarator -> pointer . direct_declarator
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    direct_declarator              shift and go to state 61

state 40

    (67) declarator -> direct_declarator .
    (76) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (78) direct_declarator -> direct_declarator . [ assignment_expression ]
    (79) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (82) direct_declarator -> direct_declarator . [ * ]
    (83) direct_declarator -> direct_declarator . [ ]
    (84) direct_declarator -> direct_declarator . ( parameter_type_list )
    (85) direct_declarator -> direct_declarator . ( identifier_list )
    (86) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 67 (declarator -> direct_declarator .)
    {               reduce using rule 67 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 67 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 67 (declarator -> direct_declarator .)
    STATIC          reduce using rule 67 (declarator -> direct_declarator .)
    AUTO            reduce using rule 67 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 67 (declarator -> direct_declarator .)
    VOID            reduce using rule 67 (declarator -> direct_declarator .)
    CHAR            reduce using rule 67 (declarator -> direct_declarator .)
    SHORT           reduce using rule 67 (declarator -> direct_declarator .)
    INT             reduce using rule 67 (declarator -> direct_declarator .)
    LONG            reduce using rule 67 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 67 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 67 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 67 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 67 (declarator -> direct_declarator .)
    BOOL            reduce using rule 67 (declarator -> direct_declarator .)
    CONST           reduce using rule 67 (declarator -> direct_declarator .)
    RESTRICT        reduce using rule 67 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 67 (declarator -> direct_declarator .)
    INLINE          reduce using rule 67 (declarator -> direct_declarator .)
    ENUM            reduce using rule 67 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 67 (declarator -> direct_declarator .)
    UNION           reduce using rule 67 (declarator -> direct_declarator .)
    ;               reduce using rule 67 (declarator -> direct_declarator .)
    ,               reduce using rule 67 (declarator -> direct_declarator .)
    )               reduce using rule 67 (declarator -> direct_declarator .)
    :               reduce using rule 67 (declarator -> direct_declarator .)
    [               shift and go to state 62
    (               shift and go to state 63


state 41

    (7) init_declarator_list -> init_declarator .

    ;               reduce using rule 7 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 7 (init_declarator_list -> init_declarator .)


state 42

    (68) pointer -> * .
    (69) pointer -> * . type_qualifier_list
    (70) pointer -> * . pointer
    (71) pointer -> * . type_qualifier_list pointer
    (72) type_qualifier_list -> . type_qualifier
    (73) type_qualifier_list -> . type_qualifier_list type_qualifier
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 68 (pointer -> * .)
    (               reduce using rule 68 (pointer -> * .)
    [               reduce using rule 68 (pointer -> * .)
    ,               reduce using rule 68 (pointer -> * .)
    )               reduce using rule 68 (pointer -> * .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qualifier_list            shift and go to state 64
    pointer                        shift and go to state 65
    type_qualifier                 shift and go to state 66

state 43

    (74) direct_declarator -> IDENTIFIER .

    [               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    (               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    =               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    {               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    RESTRICT        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    INLINE          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    ;               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    ,               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    )               reduce using rule 74 (direct_declarator -> IDENTIFIER .)
    :               reduce using rule 74 (direct_declarator -> IDENTIFIER .)


state 44

    (75) direct_declarator -> ( . declarator )
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    declarator                     shift and go to state 67
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 45

    (12) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    ;               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    *               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    (               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    [               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ,               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    )               reduce using rule 12 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 46

    (14) declaration_specifiers -> type_specifier declaration_specifiers .

    ;               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    *               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 14 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 47

    (16) declaration_specifiers -> type_qualifier declaration_specifiers .

    ;               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 16 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 48

    (18) declaration_specifiers -> function_specifier declaration_specifiers .

    ;               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    *               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    (               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    [               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    ,               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)
    )               reduce using rule 18 (declaration_specifiers -> function_specifier declaration_specifiers .)


state 49

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER . { struct_declaration_list }
    (51) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    {               shift and go to state 68
    TYPEDEF         reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    RESTRICT        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INLINE          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ;               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    *               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    (               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    [               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ,               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    )               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    :               reduce using rule 51 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 50

    (50) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (54) struct_declaration_list -> . struct_declaration
    (55) struct_declaration_list -> . struct_declaration_list struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration_list        shift and go to state 69
    struct_declaration             shift and go to state 70
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 51

    (40) enum_specifier -> ENUM { . enumerator_list }
    (42) enum_specifier -> ENUM { . enumerator_list , }
    (45) enumerator_list -> . enumerator
    (46) enumerator_list -> . enumerator_list , enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 76

    enumerator_list                shift and go to state 74
    enumerator                     shift and go to state 75

state 52

    (41) enum_specifier -> ENUM IDENTIFIER . { enumerator_list }
    (43) enum_specifier -> ENUM IDENTIFIER . { enumerator_list , }
    (44) enum_specifier -> ENUM IDENTIFIER .

    {               shift and go to state 77
    TYPEDEF         reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    RESTRICT        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    INLINE          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    ;               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    *               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    (               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    [               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    ,               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    )               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)
    :               reduce using rule 44 (enum_specifier -> ENUM IDENTIFIER .)


state 53

    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 37
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_declarator_list           shift and go to state 38
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 78
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 54

    (200) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (203) declaration_list -> declaration_list . declaration
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    {               shift and go to state 58
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declaration_specifiers         shift and go to state 53
    compound_statement             shift and go to state 79
    declaration                    shift and go to state 80
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 55

    (201) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    RESTRICT        reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    INLINE          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 201 (function_definition -> declaration_specifiers declarator compound_statement .)


state 56

    (10) init_declarator -> declarator = . initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer                    shift and go to state 81
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 57

    (202) declaration_list -> declaration .

    {               reduce using rule 202 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 202 (declaration_list -> declaration .)
    EXTERN          reduce using rule 202 (declaration_list -> declaration .)
    STATIC          reduce using rule 202 (declaration_list -> declaration .)
    AUTO            reduce using rule 202 (declaration_list -> declaration .)
    REGISTER        reduce using rule 202 (declaration_list -> declaration .)
    VOID            reduce using rule 202 (declaration_list -> declaration .)
    CHAR            reduce using rule 202 (declaration_list -> declaration .)
    SHORT           reduce using rule 202 (declaration_list -> declaration .)
    INT             reduce using rule 202 (declaration_list -> declaration .)
    LONG            reduce using rule 202 (declaration_list -> declaration .)
    FLOAT           reduce using rule 202 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 202 (declaration_list -> declaration .)
    SIGNED          reduce using rule 202 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 202 (declaration_list -> declaration .)
    BOOL            reduce using rule 202 (declaration_list -> declaration .)
    CONST           reduce using rule 202 (declaration_list -> declaration .)
    RESTRICT        reduce using rule 202 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 202 (declaration_list -> declaration .)
    INLINE          reduce using rule 202 (declaration_list -> declaration .)
    ENUM            reduce using rule 202 (declaration_list -> declaration .)
    STRUCT          reduce using rule 202 (declaration_list -> declaration .)
    UNION           reduce using rule 202 (declaration_list -> declaration .)


state 58

    (204) compound_statement -> { . }
    (205) compound_statement -> { . block_item_list }
    (206) block_item_list -> . block_item
    (207) block_item_list -> . block_item_list block_item
    (208) block_item -> . declaration
    (209) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 113
    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    block_item_list                shift and go to state 114
    block_item                     shift and go to state 115
    declaration                    shift and go to state 116
    statement                      shift and go to state 117
    declaration_specifiers         shift and go to state 53
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    expression                     shift and go to state 128
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    assignment_expression          shift and go to state 138
    struct_or_union                shift and go to state 31
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 59

    (6) declaration -> declaration_specifiers init_declarator_list ; .

    TYPEDEF         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RESTRICT        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INLINE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_OP          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC_OP          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANT        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)


state 60

    (8) init_declarator_list -> init_declarator_list , . init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    init_declarator                shift and go to state 139
    declarator                     shift and go to state 78
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 61

    (66) declarator -> pointer direct_declarator .
    (76) direct_declarator -> direct_declarator . [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> direct_declarator . [ type_qualifier_list ]
    (78) direct_declarator -> direct_declarator . [ assignment_expression ]
    (79) direct_declarator -> direct_declarator . [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> direct_declarator . [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator . [ type_qualifier_list * ]
    (82) direct_declarator -> direct_declarator . [ * ]
    (83) direct_declarator -> direct_declarator . [ ]
    (84) direct_declarator -> direct_declarator . ( parameter_type_list )
    (85) direct_declarator -> direct_declarator . ( identifier_list )
    (86) direct_declarator -> direct_declarator . ( )

    =               reduce using rule 66 (declarator -> pointer direct_declarator .)
    {               reduce using rule 66 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 66 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 66 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 66 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 66 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 66 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 66 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 66 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 66 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 66 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 66 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 66 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 66 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 66 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 66 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 66 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 66 (declarator -> pointer direct_declarator .)
    RESTRICT        reduce using rule 66 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 66 (declarator -> pointer direct_declarator .)
    INLINE          reduce using rule 66 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 66 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 66 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 66 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 66 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 66 (declarator -> pointer direct_declarator .)
    )               reduce using rule 66 (declarator -> pointer direct_declarator .)
    :               reduce using rule 66 (declarator -> pointer direct_declarator .)
    [               shift and go to state 62
    (               shift and go to state 63


state 62

    (76) direct_declarator -> direct_declarator [ . type_qualifier_list assignment_expression ]
    (77) direct_declarator -> direct_declarator [ . type_qualifier_list ]
    (78) direct_declarator -> direct_declarator [ . assignment_expression ]
    (79) direct_declarator -> direct_declarator [ . STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> direct_declarator [ . type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator [ . type_qualifier_list * ]
    (82) direct_declarator -> direct_declarator [ . * ]
    (83) direct_declarator -> direct_declarator [ . ]
    (72) type_qualifier_list -> . type_qualifier
    (73) type_qualifier_list -> . type_qualifier_list type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    STATIC          shift and go to state 143
    *               shift and go to state 144
    ]               shift and go to state 142
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_qualifier_list            shift and go to state 140
    assignment_expression          shift and go to state 141
    type_qualifier                 shift and go to state 66
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 63

    (84) direct_declarator -> direct_declarator ( . parameter_type_list )
    (85) direct_declarator -> direct_declarator ( . identifier_list )
    (86) direct_declarator -> direct_declarator ( . )
    (179) parameter_type_list -> . parameter_list
    (180) parameter_type_list -> . parameter_list , ELLIPSIS
    (87) identifier_list -> . IDENTIFIER
    (88) identifier_list -> . identifier_list , IDENTIFIER
    (181) parameter_list -> . parameter_declaration
    (182) parameter_list -> . parameter_list , parameter_declaration
    (183) parameter_declaration -> . declaration_specifiers declarator
    (184) parameter_declaration -> . declaration_specifiers abstract_declarator
    (185) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 146
    IDENTIFIER      shift and go to state 149
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_type_list            shift and go to state 145
    identifier_list                shift and go to state 147
    parameter_list                 shift and go to state 148
    parameter_declaration          shift and go to state 150
    declaration_specifiers         shift and go to state 151
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 64

    (69) pointer -> * type_qualifier_list .
    (71) pointer -> * type_qualifier_list . pointer
    (73) type_qualifier_list -> type_qualifier_list . type_qualifier
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 69 (pointer -> * type_qualifier_list .)
    (               reduce using rule 69 (pointer -> * type_qualifier_list .)
    [               reduce using rule 69 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 69 (pointer -> * type_qualifier_list .)
    )               reduce using rule 69 (pointer -> * type_qualifier_list .)
    *               shift and go to state 42
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    pointer                        shift and go to state 152
    type_qualifier                 shift and go to state 153

state 65

    (70) pointer -> * pointer .

    IDENTIFIER      reduce using rule 70 (pointer -> * pointer .)
    (               reduce using rule 70 (pointer -> * pointer .)
    [               reduce using rule 70 (pointer -> * pointer .)
    ,               reduce using rule 70 (pointer -> * pointer .)
    )               reduce using rule 70 (pointer -> * pointer .)


state 66

    (72) type_qualifier_list -> type_qualifier .

    *               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    ]               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    STATIC          reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    INC_OP          reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    DEC_OP          reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    SIZEOF          reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    &               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    +               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    -               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    ~               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    !               reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    CONSTANT        reduce using rule 72 (type_qualifier_list -> type_qualifier .)
    STRING_LITERAL  reduce using rule 72 (type_qualifier_list -> type_qualifier .)


state 67

    (75) direct_declarator -> ( declarator . )

    )               shift and go to state 154


state 68

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER { . struct_declaration_list }
    (54) struct_declaration_list -> . struct_declaration
    (55) struct_declaration_list -> . struct_declaration_list struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration_list        shift and go to state 155
    struct_declaration             shift and go to state 70
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 69

    (50) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (55) struct_declaration_list -> struct_declaration_list . struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    }               shift and go to state 156
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration             shift and go to state 157
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 70

    (54) struct_declaration_list -> struct_declaration .

    }               reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 54 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 54 (struct_declaration_list -> struct_declaration .)


state 71

    (56) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (61) struct_declarator_list -> . struct_declarator
    (62) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (63) struct_declarator -> . declarator
    (64) struct_declarator -> . : constant_expression
    (65) struct_declarator -> . declarator : constant_expression
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 161
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declarator_list         shift and go to state 158
    struct_declarator              shift and go to state 159
    declarator                     shift and go to state 160
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 72

    (57) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (58) specifier_qualifier_list -> type_specifier .
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    :               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 58 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_specifier                 shift and go to state 72
    specifier_qualifier_list       shift and go to state 162
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 73

    (59) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (60) specifier_qualifier_list -> type_qualifier .
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    :               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    [               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 60 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    type_qualifier                 shift and go to state 73
    specifier_qualifier_list       shift and go to state 163
    type_specifier                 shift and go to state 72
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 74

    (40) enum_specifier -> ENUM { enumerator_list . }
    (42) enum_specifier -> ENUM { enumerator_list . , }
    (46) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 164
    ,               shift and go to state 165


state 75

    (45) enumerator_list -> enumerator .

    }               reduce using rule 45 (enumerator_list -> enumerator .)
    ,               reduce using rule 45 (enumerator_list -> enumerator .)


state 76

    (47) enumerator -> IDENTIFIER .
    (48) enumerator -> IDENTIFIER . = constant_expression

    }               reduce using rule 47 (enumerator -> IDENTIFIER .)
    ,               reduce using rule 47 (enumerator -> IDENTIFIER .)
    =               shift and go to state 166


state 77

    (41) enum_specifier -> ENUM IDENTIFIER { . enumerator_list }
    (43) enum_specifier -> ENUM IDENTIFIER { . enumerator_list , }
    (45) enumerator_list -> . enumerator
    (46) enumerator_list -> . enumerator_list , enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 76

    enumerator_list                shift and go to state 167
    enumerator                     shift and go to state 75

state 78

    (9) init_declarator -> declarator .
    (10) init_declarator -> declarator . = initializer

    ;               reduce using rule 9 (init_declarator -> declarator .)
    ,               reduce using rule 9 (init_declarator -> declarator .)
    =               shift and go to state 56


state 79

    (200) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    RESTRICT        reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INLINE          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 200 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 80

    (203) declaration_list -> declaration_list declaration .

    {               reduce using rule 203 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 203 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 203 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 203 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 203 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 203 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 203 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 203 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 203 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 203 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 203 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 203 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 203 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 203 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 203 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 203 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 203 (declaration_list -> declaration_list declaration .)
    RESTRICT        reduce using rule 203 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 203 (declaration_list -> declaration_list declaration .)
    INLINE          reduce using rule 203 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 203 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 203 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 203 (declaration_list -> declaration_list declaration .)


state 81

    (10) init_declarator -> declarator = initializer .

    ;               reduce using rule 10 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 10 (init_declarator -> declarator = initializer .)


state 82

    (192) initializer -> assignment_expression .

    ;               reduce using rule 192 (initializer -> assignment_expression .)
    ,               reduce using rule 192 (initializer -> assignment_expression .)
    }               reduce using rule 192 (initializer -> assignment_expression .)


state 83

    (193) initializer -> { . initializer_list }
    (194) initializer -> { . initializer_list , }
    (188) initializer_list -> . initializer
    (189) initializer_list -> . designation initializer
    (190) initializer_list -> . initializer_list , initializer
    (191) initializer_list -> . initializer_list , designation initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (195) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (196) designator_list -> . designator
    (197) designator_list -> . designator_list designator
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (198) designator -> . [ constant_expression ]
    (199) designator -> . . IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    [               shift and go to state 173
    .               shift and go to state 174
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer_list               shift and go to state 168
    initializer                    shift and go to state 169
    designation                    shift and go to state 170
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 171
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 172
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 84

    (89) assignment_expression -> conditional_expression .

    ;               reduce using rule 89 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 89 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 89 (assignment_expression -> conditional_expression .)
    }               reduce using rule 89 (assignment_expression -> conditional_expression .)
    )               reduce using rule 89 (assignment_expression -> conditional_expression .)
    :               reduce using rule 89 (assignment_expression -> conditional_expression .)


state 85

    (90) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (133) cast_expression -> unary_expression .
    (91) assignment_operator -> . =
    (92) assignment_operator -> . MUL_ASSIGN
    (93) assignment_operator -> . DIV_ASSIGN
    (94) assignment_operator -> . MOD_ASSIGN
    (95) assignment_operator -> . ADD_ASSIGN
    (96) assignment_operator -> . SUB_ASSIGN
    (97) assignment_operator -> . LEFT_ASSIGN
    (98) assignment_operator -> . RIGHT_ASSIGN
    (99) assignment_operator -> . AND_ASSIGN
    (100) assignment_operator -> . XOR_ASSIGN
    (101) assignment_operator -> . OR_ASSIGN

    *               reduce using rule 133 (cast_expression -> unary_expression .)
    /               reduce using rule 133 (cast_expression -> unary_expression .)
    %               reduce using rule 133 (cast_expression -> unary_expression .)
    +               reduce using rule 133 (cast_expression -> unary_expression .)
    -               reduce using rule 133 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 133 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 133 (cast_expression -> unary_expression .)
    <               reduce using rule 133 (cast_expression -> unary_expression .)
    >               reduce using rule 133 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    &               reduce using rule 133 (cast_expression -> unary_expression .)
    ^               reduce using rule 133 (cast_expression -> unary_expression .)
    |               reduce using rule 133 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 133 (cast_expression -> unary_expression .)
    ?               reduce using rule 133 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    ;               reduce using rule 133 (cast_expression -> unary_expression .)
    ,               reduce using rule 133 (cast_expression -> unary_expression .)
    ]               reduce using rule 133 (cast_expression -> unary_expression .)
    }               reduce using rule 133 (cast_expression -> unary_expression .)
    )               reduce using rule 133 (cast_expression -> unary_expression .)
    :               reduce using rule 133 (cast_expression -> unary_expression .)
    =               shift and go to state 176
    MUL_ASSIGN      shift and go to state 177
    DIV_ASSIGN      shift and go to state 178
    MOD_ASSIGN      shift and go to state 179
    ADD_ASSIGN      shift and go to state 180
    SUB_ASSIGN      shift and go to state 181
    LEFT_ASSIGN     shift and go to state 182
    RIGHT_ASSIGN    shift and go to state 183
    AND_ASSIGN      shift and go to state 184
    XOR_ASSIGN      shift and go to state 185
    OR_ASSIGN       shift and go to state 186

    assignment_operator            shift and go to state 175

state 86

    (103) conditional_expression -> logical_or_expression .
    (104) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (106) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 103 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 103 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 103 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 103 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 103 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 103 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 187
    OR_OP           shift and go to state 188


state 87

    (135) unary_expression -> postfix_expression .
    (148) postfix_expression -> postfix_expression . [ expression ]
    (149) postfix_expression -> postfix_expression . ( )
    (150) postfix_expression -> postfix_expression . ( argument_expression_list )
    (151) postfix_expression -> postfix_expression . . IDENTIFIER
    (152) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (153) postfix_expression -> postfix_expression . INC_OP
    (154) postfix_expression -> postfix_expression . DEC_OP

    =               reduce using rule 135 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 135 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 135 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 135 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 135 (unary_expression -> postfix_expression .)
    *               reduce using rule 135 (unary_expression -> postfix_expression .)
    /               reduce using rule 135 (unary_expression -> postfix_expression .)
    %               reduce using rule 135 (unary_expression -> postfix_expression .)
    +               reduce using rule 135 (unary_expression -> postfix_expression .)
    -               reduce using rule 135 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 135 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 135 (unary_expression -> postfix_expression .)
    <               reduce using rule 135 (unary_expression -> postfix_expression .)
    >               reduce using rule 135 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 135 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 135 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 135 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 135 (unary_expression -> postfix_expression .)
    &               reduce using rule 135 (unary_expression -> postfix_expression .)
    ^               reduce using rule 135 (unary_expression -> postfix_expression .)
    |               reduce using rule 135 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 135 (unary_expression -> postfix_expression .)
    ?               reduce using rule 135 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 135 (unary_expression -> postfix_expression .)
    ;               reduce using rule 135 (unary_expression -> postfix_expression .)
    ,               reduce using rule 135 (unary_expression -> postfix_expression .)
    ]               reduce using rule 135 (unary_expression -> postfix_expression .)
    }               reduce using rule 135 (unary_expression -> postfix_expression .)
    )               reduce using rule 135 (unary_expression -> postfix_expression .)
    :               reduce using rule 135 (unary_expression -> postfix_expression .)
    [               shift and go to state 189
    (               shift and go to state 190
    .               shift and go to state 191
    PTR_OP          shift and go to state 192
    INC_OP          shift and go to state 193
    DEC_OP          shift and go to state 194


state 88

    (136) unary_expression -> INC_OP . unary_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 196
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expression               shift and go to state 195
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 89

    (137) unary_expression -> DEC_OP . unary_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 196
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expression               shift and go to state 197
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 90

    (138) unary_expression -> unary_operator . cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 198
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    primary_expression             shift and go to state 95

state 91

    (129) multiplicative_expression -> cast_expression .

    *               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 129 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 129 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 129 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 129 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 129 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 129 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 129 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 129 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 129 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 129 (multiplicative_expression -> cast_expression .)


state 92

    (139) unary_expression -> SIZEOF . unary_expression
    (140) unary_expression -> SIZEOF . ( type_name )
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 202
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expression               shift and go to state 201
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 93

    (155) postfix_expression -> ( . type_name ) { initializer_list }
    (156) postfix_expression -> ( . type_name ) { initializer_list , }
    (160) primary_expression -> ( . expression )
    (134) cast_expression -> ( . type_name ) cast_expression
    (163) type_name -> . specifier_qualifier_list
    (164) type_name -> . specifier_qualifier_list abstract_declarator
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 203
    expression                     shift and go to state 204
    cast_expression                shift and go to state 91
    specifier_qualifier_list       shift and go to state 205
    assignment_expression          shift and go to state 138
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 94

    (105) logical_or_expression -> logical_and_expression .
    (108) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 105 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 206


state 95

    (147) postfix_expression -> primary_expression .

    [               reduce using rule 147 (postfix_expression -> primary_expression .)
    (               reduce using rule 147 (postfix_expression -> primary_expression .)
    .               reduce using rule 147 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 147 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 147 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 147 (postfix_expression -> primary_expression .)
    =               reduce using rule 147 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 147 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 147 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 147 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 147 (postfix_expression -> primary_expression .)
    *               reduce using rule 147 (postfix_expression -> primary_expression .)
    /               reduce using rule 147 (postfix_expression -> primary_expression .)
    %               reduce using rule 147 (postfix_expression -> primary_expression .)
    +               reduce using rule 147 (postfix_expression -> primary_expression .)
    -               reduce using rule 147 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 147 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 147 (postfix_expression -> primary_expression .)
    <               reduce using rule 147 (postfix_expression -> primary_expression .)
    >               reduce using rule 147 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 147 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 147 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 147 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 147 (postfix_expression -> primary_expression .)
    &               reduce using rule 147 (postfix_expression -> primary_expression .)
    ^               reduce using rule 147 (postfix_expression -> primary_expression .)
    |               reduce using rule 147 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 147 (postfix_expression -> primary_expression .)
    ?               reduce using rule 147 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 147 (postfix_expression -> primary_expression .)
    ;               reduce using rule 147 (postfix_expression -> primary_expression .)
    ,               reduce using rule 147 (postfix_expression -> primary_expression .)
    ]               reduce using rule 147 (postfix_expression -> primary_expression .)
    }               reduce using rule 147 (postfix_expression -> primary_expression .)
    )               reduce using rule 147 (postfix_expression -> primary_expression .)
    :               reduce using rule 147 (postfix_expression -> primary_expression .)


state 96

    (157) primary_expression -> IDENTIFIER .

    [               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 157 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 157 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 157 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 157 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 157 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    }               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    :               reduce using rule 157 (primary_expression -> IDENTIFIER .)


state 97

    (141) unary_operator -> & .

    (               reduce using rule 141 (unary_operator -> & .)
    INC_OP          reduce using rule 141 (unary_operator -> & .)
    DEC_OP          reduce using rule 141 (unary_operator -> & .)
    SIZEOF          reduce using rule 141 (unary_operator -> & .)
    &               reduce using rule 141 (unary_operator -> & .)
    *               reduce using rule 141 (unary_operator -> & .)
    +               reduce using rule 141 (unary_operator -> & .)
    -               reduce using rule 141 (unary_operator -> & .)
    ~               reduce using rule 141 (unary_operator -> & .)
    !               reduce using rule 141 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 141 (unary_operator -> & .)
    CONSTANT        reduce using rule 141 (unary_operator -> & .)
    STRING_LITERAL  reduce using rule 141 (unary_operator -> & .)


state 98

    (142) unary_operator -> * .

    (               reduce using rule 142 (unary_operator -> * .)
    INC_OP          reduce using rule 142 (unary_operator -> * .)
    DEC_OP          reduce using rule 142 (unary_operator -> * .)
    SIZEOF          reduce using rule 142 (unary_operator -> * .)
    &               reduce using rule 142 (unary_operator -> * .)
    *               reduce using rule 142 (unary_operator -> * .)
    +               reduce using rule 142 (unary_operator -> * .)
    -               reduce using rule 142 (unary_operator -> * .)
    ~               reduce using rule 142 (unary_operator -> * .)
    !               reduce using rule 142 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 142 (unary_operator -> * .)
    CONSTANT        reduce using rule 142 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_operator -> * .)


state 99

    (143) unary_operator -> + .

    (               reduce using rule 143 (unary_operator -> + .)
    INC_OP          reduce using rule 143 (unary_operator -> + .)
    DEC_OP          reduce using rule 143 (unary_operator -> + .)
    SIZEOF          reduce using rule 143 (unary_operator -> + .)
    &               reduce using rule 143 (unary_operator -> + .)
    *               reduce using rule 143 (unary_operator -> + .)
    +               reduce using rule 143 (unary_operator -> + .)
    -               reduce using rule 143 (unary_operator -> + .)
    ~               reduce using rule 143 (unary_operator -> + .)
    !               reduce using rule 143 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 143 (unary_operator -> + .)
    CONSTANT        reduce using rule 143 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 143 (unary_operator -> + .)


state 100

    (144) unary_operator -> - .

    (               reduce using rule 144 (unary_operator -> - .)
    INC_OP          reduce using rule 144 (unary_operator -> - .)
    DEC_OP          reduce using rule 144 (unary_operator -> - .)
    SIZEOF          reduce using rule 144 (unary_operator -> - .)
    &               reduce using rule 144 (unary_operator -> - .)
    *               reduce using rule 144 (unary_operator -> - .)
    +               reduce using rule 144 (unary_operator -> - .)
    -               reduce using rule 144 (unary_operator -> - .)
    ~               reduce using rule 144 (unary_operator -> - .)
    !               reduce using rule 144 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 144 (unary_operator -> - .)
    CONSTANT        reduce using rule 144 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 144 (unary_operator -> - .)


state 101

    (145) unary_operator -> ~ .

    (               reduce using rule 145 (unary_operator -> ~ .)
    INC_OP          reduce using rule 145 (unary_operator -> ~ .)
    DEC_OP          reduce using rule 145 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 145 (unary_operator -> ~ .)
    &               reduce using rule 145 (unary_operator -> ~ .)
    *               reduce using rule 145 (unary_operator -> ~ .)
    +               reduce using rule 145 (unary_operator -> ~ .)
    -               reduce using rule 145 (unary_operator -> ~ .)
    ~               reduce using rule 145 (unary_operator -> ~ .)
    !               reduce using rule 145 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 145 (unary_operator -> ~ .)
    CONSTANT        reduce using rule 145 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 145 (unary_operator -> ~ .)


state 102

    (146) unary_operator -> ! .

    (               reduce using rule 146 (unary_operator -> ! .)
    INC_OP          reduce using rule 146 (unary_operator -> ! .)
    DEC_OP          reduce using rule 146 (unary_operator -> ! .)
    SIZEOF          reduce using rule 146 (unary_operator -> ! .)
    &               reduce using rule 146 (unary_operator -> ! .)
    *               reduce using rule 146 (unary_operator -> ! .)
    +               reduce using rule 146 (unary_operator -> ! .)
    -               reduce using rule 146 (unary_operator -> ! .)
    ~               reduce using rule 146 (unary_operator -> ! .)
    !               reduce using rule 146 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 146 (unary_operator -> ! .)
    CONSTANT        reduce using rule 146 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 146 (unary_operator -> ! .)


state 103

    (107) logical_and_expression -> inclusive_or_expression .
    (110) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 107 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 207


state 104

    (158) primary_expression -> CONSTANT .

    [               reduce using rule 158 (primary_expression -> CONSTANT .)
    (               reduce using rule 158 (primary_expression -> CONSTANT .)
    .               reduce using rule 158 (primary_expression -> CONSTANT .)
    PTR_OP          reduce using rule 158 (primary_expression -> CONSTANT .)
    INC_OP          reduce using rule 158 (primary_expression -> CONSTANT .)
    DEC_OP          reduce using rule 158 (primary_expression -> CONSTANT .)
    =               reduce using rule 158 (primary_expression -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 158 (primary_expression -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 158 (primary_expression -> CONSTANT .)
    AND_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 158 (primary_expression -> CONSTANT .)
    OR_ASSIGN       reduce using rule 158 (primary_expression -> CONSTANT .)
    *               reduce using rule 158 (primary_expression -> CONSTANT .)
    /               reduce using rule 158 (primary_expression -> CONSTANT .)
    %               reduce using rule 158 (primary_expression -> CONSTANT .)
    +               reduce using rule 158 (primary_expression -> CONSTANT .)
    -               reduce using rule 158 (primary_expression -> CONSTANT .)
    LEFT_OP         reduce using rule 158 (primary_expression -> CONSTANT .)
    RIGHT_OP        reduce using rule 158 (primary_expression -> CONSTANT .)
    <               reduce using rule 158 (primary_expression -> CONSTANT .)
    >               reduce using rule 158 (primary_expression -> CONSTANT .)
    LE_OP           reduce using rule 158 (primary_expression -> CONSTANT .)
    GE_OP           reduce using rule 158 (primary_expression -> CONSTANT .)
    EQ_OP           reduce using rule 158 (primary_expression -> CONSTANT .)
    NE_OP           reduce using rule 158 (primary_expression -> CONSTANT .)
    &               reduce using rule 158 (primary_expression -> CONSTANT .)
    ^               reduce using rule 158 (primary_expression -> CONSTANT .)
    |               reduce using rule 158 (primary_expression -> CONSTANT .)
    AND_OP          reduce using rule 158 (primary_expression -> CONSTANT .)
    ?               reduce using rule 158 (primary_expression -> CONSTANT .)
    OR_OP           reduce using rule 158 (primary_expression -> CONSTANT .)
    ;               reduce using rule 158 (primary_expression -> CONSTANT .)
    ,               reduce using rule 158 (primary_expression -> CONSTANT .)
    ]               reduce using rule 158 (primary_expression -> CONSTANT .)
    }               reduce using rule 158 (primary_expression -> CONSTANT .)
    )               reduce using rule 158 (primary_expression -> CONSTANT .)
    :               reduce using rule 158 (primary_expression -> CONSTANT .)


state 105

    (159) primary_expression -> STRING_LITERAL .

    [               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    (               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    .               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    INC_OP          reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    DEC_OP          reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    =               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    *               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    LE_OP           reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    GE_OP           reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    EQ_OP           reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    NE_OP           reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    AND_OP          reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    OR_OP           reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 159 (primary_expression -> STRING_LITERAL .)


state 106

    (109) inclusive_or_expression -> exclusive_or_expression .
    (112) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 109 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 208


state 107

    (111) exclusive_or_expression -> and_expression .
    (114) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 111 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 111 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 111 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 209


state 108

    (113) and_expression -> equality_expression .
    (116) equality_expression -> equality_expression . EQ_OP relational_expression
    (117) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 113 (and_expression -> equality_expression .)
    ^               reduce using rule 113 (and_expression -> equality_expression .)
    |               reduce using rule 113 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 113 (and_expression -> equality_expression .)
    ?               reduce using rule 113 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 113 (and_expression -> equality_expression .)
    ;               reduce using rule 113 (and_expression -> equality_expression .)
    ,               reduce using rule 113 (and_expression -> equality_expression .)
    ]               reduce using rule 113 (and_expression -> equality_expression .)
    }               reduce using rule 113 (and_expression -> equality_expression .)
    )               reduce using rule 113 (and_expression -> equality_expression .)
    :               reduce using rule 113 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 210
    NE_OP           shift and go to state 211


state 109

    (115) equality_expression -> relational_expression .
    (119) relational_expression -> relational_expression . < shift_expression
    (120) relational_expression -> relational_expression . > shift_expression
    (121) relational_expression -> relational_expression . LE_OP shift_expression
    (122) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 115 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 115 (equality_expression -> relational_expression .)
    &               reduce using rule 115 (equality_expression -> relational_expression .)
    ^               reduce using rule 115 (equality_expression -> relational_expression .)
    |               reduce using rule 115 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 115 (equality_expression -> relational_expression .)
    ?               reduce using rule 115 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 115 (equality_expression -> relational_expression .)
    ;               reduce using rule 115 (equality_expression -> relational_expression .)
    ,               reduce using rule 115 (equality_expression -> relational_expression .)
    ]               reduce using rule 115 (equality_expression -> relational_expression .)
    }               reduce using rule 115 (equality_expression -> relational_expression .)
    )               reduce using rule 115 (equality_expression -> relational_expression .)
    :               reduce using rule 115 (equality_expression -> relational_expression .)
    <               shift and go to state 212
    >               shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 110

    (118) relational_expression -> shift_expression .
    (124) shift_expression -> shift_expression . LEFT_OP additive_expression
    (125) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 118 (relational_expression -> shift_expression .)
    >               reduce using rule 118 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 118 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 118 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 118 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 118 (relational_expression -> shift_expression .)
    &               reduce using rule 118 (relational_expression -> shift_expression .)
    ^               reduce using rule 118 (relational_expression -> shift_expression .)
    |               reduce using rule 118 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 118 (relational_expression -> shift_expression .)
    ?               reduce using rule 118 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 118 (relational_expression -> shift_expression .)
    ;               reduce using rule 118 (relational_expression -> shift_expression .)
    ,               reduce using rule 118 (relational_expression -> shift_expression .)
    ]               reduce using rule 118 (relational_expression -> shift_expression .)
    }               reduce using rule 118 (relational_expression -> shift_expression .)
    )               reduce using rule 118 (relational_expression -> shift_expression .)
    :               reduce using rule 118 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 111

    (123) shift_expression -> additive_expression .
    (127) additive_expression -> additive_expression . + multiplicative_expression
    (128) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 123 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 123 (shift_expression -> additive_expression .)
    <               reduce using rule 123 (shift_expression -> additive_expression .)
    >               reduce using rule 123 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 123 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 123 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 123 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 123 (shift_expression -> additive_expression .)
    &               reduce using rule 123 (shift_expression -> additive_expression .)
    ^               reduce using rule 123 (shift_expression -> additive_expression .)
    |               reduce using rule 123 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 123 (shift_expression -> additive_expression .)
    ?               reduce using rule 123 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 123 (shift_expression -> additive_expression .)
    ;               reduce using rule 123 (shift_expression -> additive_expression .)
    ,               reduce using rule 123 (shift_expression -> additive_expression .)
    ]               reduce using rule 123 (shift_expression -> additive_expression .)
    }               reduce using rule 123 (shift_expression -> additive_expression .)
    )               reduce using rule 123 (shift_expression -> additive_expression .)
    :               reduce using rule 123 (shift_expression -> additive_expression .)
    +               shift and go to state 218
    -               shift and go to state 219


state 112

    (126) additive_expression -> multiplicative_expression .
    (130) multiplicative_expression -> multiplicative_expression . * cast_expression
    (131) multiplicative_expression -> multiplicative_expression . / cast_expression
    (132) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 126 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 126 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 126 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 126 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 126 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 126 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 126 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 126 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 126 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 220
    /               shift and go to state 221
    %               shift and go to state 222


state 113

    (204) compound_statement -> { } .

    TYPEDEF         reduce using rule 204 (compound_statement -> { } .)
    EXTERN          reduce using rule 204 (compound_statement -> { } .)
    STATIC          reduce using rule 204 (compound_statement -> { } .)
    AUTO            reduce using rule 204 (compound_statement -> { } .)
    REGISTER        reduce using rule 204 (compound_statement -> { } .)
    VOID            reduce using rule 204 (compound_statement -> { } .)
    CHAR            reduce using rule 204 (compound_statement -> { } .)
    SHORT           reduce using rule 204 (compound_statement -> { } .)
    INT             reduce using rule 204 (compound_statement -> { } .)
    LONG            reduce using rule 204 (compound_statement -> { } .)
    FLOAT           reduce using rule 204 (compound_statement -> { } .)
    DOUBLE          reduce using rule 204 (compound_statement -> { } .)
    SIGNED          reduce using rule 204 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 204 (compound_statement -> { } .)
    BOOL            reduce using rule 204 (compound_statement -> { } .)
    CONST           reduce using rule 204 (compound_statement -> { } .)
    RESTRICT        reduce using rule 204 (compound_statement -> { } .)
    VOLATILE        reduce using rule 204 (compound_statement -> { } .)
    INLINE          reduce using rule 204 (compound_statement -> { } .)
    ENUM            reduce using rule 204 (compound_statement -> { } .)
    STRUCT          reduce using rule 204 (compound_statement -> { } .)
    UNION           reduce using rule 204 (compound_statement -> { } .)
    $end            reduce using rule 204 (compound_statement -> { } .)
    }               reduce using rule 204 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 204 (compound_statement -> { } .)
    CASE            reduce using rule 204 (compound_statement -> { } .)
    DEFAULT         reduce using rule 204 (compound_statement -> { } .)
    {               reduce using rule 204 (compound_statement -> { } .)
    ;               reduce using rule 204 (compound_statement -> { } .)
    IF              reduce using rule 204 (compound_statement -> { } .)
    SWITCH          reduce using rule 204 (compound_statement -> { } .)
    WHILE           reduce using rule 204 (compound_statement -> { } .)
    DO              reduce using rule 204 (compound_statement -> { } .)
    FOR             reduce using rule 204 (compound_statement -> { } .)
    GOTO            reduce using rule 204 (compound_statement -> { } .)
    CONTINUE        reduce using rule 204 (compound_statement -> { } .)
    BREAK           reduce using rule 204 (compound_statement -> { } .)
    RETURN          reduce using rule 204 (compound_statement -> { } .)
    INC_OP          reduce using rule 204 (compound_statement -> { } .)
    DEC_OP          reduce using rule 204 (compound_statement -> { } .)
    SIZEOF          reduce using rule 204 (compound_statement -> { } .)
    (               reduce using rule 204 (compound_statement -> { } .)
    &               reduce using rule 204 (compound_statement -> { } .)
    *               reduce using rule 204 (compound_statement -> { } .)
    +               reduce using rule 204 (compound_statement -> { } .)
    -               reduce using rule 204 (compound_statement -> { } .)
    ~               reduce using rule 204 (compound_statement -> { } .)
    !               reduce using rule 204 (compound_statement -> { } .)
    CONSTANT        reduce using rule 204 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 204 (compound_statement -> { } .)
    ELSE            reduce using rule 204 (compound_statement -> { } .)


state 114

    (205) compound_statement -> { block_item_list . }
    (207) block_item_list -> block_item_list . block_item
    (208) block_item -> . declaration
    (209) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 223
    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    block_item                     shift and go to state 224
    declaration                    shift and go to state 116
    statement                      shift and go to state 117
    declaration_specifiers         shift and go to state 53
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    expression                     shift and go to state 128
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    assignment_expression          shift and go to state 138
    struct_or_union                shift and go to state 31
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 115

    (206) block_item_list -> block_item .

    }               reduce using rule 206 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 206 (block_item_list -> block_item .)
    CASE            reduce using rule 206 (block_item_list -> block_item .)
    DEFAULT         reduce using rule 206 (block_item_list -> block_item .)
    {               reduce using rule 206 (block_item_list -> block_item .)
    ;               reduce using rule 206 (block_item_list -> block_item .)
    IF              reduce using rule 206 (block_item_list -> block_item .)
    SWITCH          reduce using rule 206 (block_item_list -> block_item .)
    WHILE           reduce using rule 206 (block_item_list -> block_item .)
    DO              reduce using rule 206 (block_item_list -> block_item .)
    FOR             reduce using rule 206 (block_item_list -> block_item .)
    GOTO            reduce using rule 206 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 206 (block_item_list -> block_item .)
    BREAK           reduce using rule 206 (block_item_list -> block_item .)
    RETURN          reduce using rule 206 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 206 (block_item_list -> block_item .)
    EXTERN          reduce using rule 206 (block_item_list -> block_item .)
    STATIC          reduce using rule 206 (block_item_list -> block_item .)
    AUTO            reduce using rule 206 (block_item_list -> block_item .)
    REGISTER        reduce using rule 206 (block_item_list -> block_item .)
    VOID            reduce using rule 206 (block_item_list -> block_item .)
    CHAR            reduce using rule 206 (block_item_list -> block_item .)
    SHORT           reduce using rule 206 (block_item_list -> block_item .)
    INT             reduce using rule 206 (block_item_list -> block_item .)
    LONG            reduce using rule 206 (block_item_list -> block_item .)
    FLOAT           reduce using rule 206 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 206 (block_item_list -> block_item .)
    SIGNED          reduce using rule 206 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 206 (block_item_list -> block_item .)
    BOOL            reduce using rule 206 (block_item_list -> block_item .)
    CONST           reduce using rule 206 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 206 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 206 (block_item_list -> block_item .)
    INLINE          reduce using rule 206 (block_item_list -> block_item .)
    ENUM            reduce using rule 206 (block_item_list -> block_item .)
    STRUCT          reduce using rule 206 (block_item_list -> block_item .)
    UNION           reduce using rule 206 (block_item_list -> block_item .)
    INC_OP          reduce using rule 206 (block_item_list -> block_item .)
    DEC_OP          reduce using rule 206 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 206 (block_item_list -> block_item .)
    (               reduce using rule 206 (block_item_list -> block_item .)
    &               reduce using rule 206 (block_item_list -> block_item .)
    *               reduce using rule 206 (block_item_list -> block_item .)
    +               reduce using rule 206 (block_item_list -> block_item .)
    -               reduce using rule 206 (block_item_list -> block_item .)
    ~               reduce using rule 206 (block_item_list -> block_item .)
    !               reduce using rule 206 (block_item_list -> block_item .)
    CONSTANT        reduce using rule 206 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 206 (block_item_list -> block_item .)


state 116

    (208) block_item -> declaration .

    }               reduce using rule 208 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 208 (block_item -> declaration .)
    CASE            reduce using rule 208 (block_item -> declaration .)
    DEFAULT         reduce using rule 208 (block_item -> declaration .)
    {               reduce using rule 208 (block_item -> declaration .)
    ;               reduce using rule 208 (block_item -> declaration .)
    IF              reduce using rule 208 (block_item -> declaration .)
    SWITCH          reduce using rule 208 (block_item -> declaration .)
    WHILE           reduce using rule 208 (block_item -> declaration .)
    DO              reduce using rule 208 (block_item -> declaration .)
    FOR             reduce using rule 208 (block_item -> declaration .)
    GOTO            reduce using rule 208 (block_item -> declaration .)
    CONTINUE        reduce using rule 208 (block_item -> declaration .)
    BREAK           reduce using rule 208 (block_item -> declaration .)
    RETURN          reduce using rule 208 (block_item -> declaration .)
    TYPEDEF         reduce using rule 208 (block_item -> declaration .)
    EXTERN          reduce using rule 208 (block_item -> declaration .)
    STATIC          reduce using rule 208 (block_item -> declaration .)
    AUTO            reduce using rule 208 (block_item -> declaration .)
    REGISTER        reduce using rule 208 (block_item -> declaration .)
    VOID            reduce using rule 208 (block_item -> declaration .)
    CHAR            reduce using rule 208 (block_item -> declaration .)
    SHORT           reduce using rule 208 (block_item -> declaration .)
    INT             reduce using rule 208 (block_item -> declaration .)
    LONG            reduce using rule 208 (block_item -> declaration .)
    FLOAT           reduce using rule 208 (block_item -> declaration .)
    DOUBLE          reduce using rule 208 (block_item -> declaration .)
    SIGNED          reduce using rule 208 (block_item -> declaration .)
    UNSIGNED        reduce using rule 208 (block_item -> declaration .)
    BOOL            reduce using rule 208 (block_item -> declaration .)
    CONST           reduce using rule 208 (block_item -> declaration .)
    RESTRICT        reduce using rule 208 (block_item -> declaration .)
    VOLATILE        reduce using rule 208 (block_item -> declaration .)
    INLINE          reduce using rule 208 (block_item -> declaration .)
    ENUM            reduce using rule 208 (block_item -> declaration .)
    STRUCT          reduce using rule 208 (block_item -> declaration .)
    UNION           reduce using rule 208 (block_item -> declaration .)
    INC_OP          reduce using rule 208 (block_item -> declaration .)
    DEC_OP          reduce using rule 208 (block_item -> declaration .)
    SIZEOF          reduce using rule 208 (block_item -> declaration .)
    (               reduce using rule 208 (block_item -> declaration .)
    &               reduce using rule 208 (block_item -> declaration .)
    *               reduce using rule 208 (block_item -> declaration .)
    +               reduce using rule 208 (block_item -> declaration .)
    -               reduce using rule 208 (block_item -> declaration .)
    ~               reduce using rule 208 (block_item -> declaration .)
    !               reduce using rule 208 (block_item -> declaration .)
    CONSTANT        reduce using rule 208 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 208 (block_item -> declaration .)


state 117

    (209) block_item -> statement .

    }               reduce using rule 209 (block_item -> statement .)
    IDENTIFIER      reduce using rule 209 (block_item -> statement .)
    CASE            reduce using rule 209 (block_item -> statement .)
    DEFAULT         reduce using rule 209 (block_item -> statement .)
    {               reduce using rule 209 (block_item -> statement .)
    ;               reduce using rule 209 (block_item -> statement .)
    IF              reduce using rule 209 (block_item -> statement .)
    SWITCH          reduce using rule 209 (block_item -> statement .)
    WHILE           reduce using rule 209 (block_item -> statement .)
    DO              reduce using rule 209 (block_item -> statement .)
    FOR             reduce using rule 209 (block_item -> statement .)
    GOTO            reduce using rule 209 (block_item -> statement .)
    CONTINUE        reduce using rule 209 (block_item -> statement .)
    BREAK           reduce using rule 209 (block_item -> statement .)
    RETURN          reduce using rule 209 (block_item -> statement .)
    TYPEDEF         reduce using rule 209 (block_item -> statement .)
    EXTERN          reduce using rule 209 (block_item -> statement .)
    STATIC          reduce using rule 209 (block_item -> statement .)
    AUTO            reduce using rule 209 (block_item -> statement .)
    REGISTER        reduce using rule 209 (block_item -> statement .)
    VOID            reduce using rule 209 (block_item -> statement .)
    CHAR            reduce using rule 209 (block_item -> statement .)
    SHORT           reduce using rule 209 (block_item -> statement .)
    INT             reduce using rule 209 (block_item -> statement .)
    LONG            reduce using rule 209 (block_item -> statement .)
    FLOAT           reduce using rule 209 (block_item -> statement .)
    DOUBLE          reduce using rule 209 (block_item -> statement .)
    SIGNED          reduce using rule 209 (block_item -> statement .)
    UNSIGNED        reduce using rule 209 (block_item -> statement .)
    BOOL            reduce using rule 209 (block_item -> statement .)
    CONST           reduce using rule 209 (block_item -> statement .)
    RESTRICT        reduce using rule 209 (block_item -> statement .)
    VOLATILE        reduce using rule 209 (block_item -> statement .)
    INLINE          reduce using rule 209 (block_item -> statement .)
    ENUM            reduce using rule 209 (block_item -> statement .)
    STRUCT          reduce using rule 209 (block_item -> statement .)
    UNION           reduce using rule 209 (block_item -> statement .)
    INC_OP          reduce using rule 209 (block_item -> statement .)
    DEC_OP          reduce using rule 209 (block_item -> statement .)
    SIZEOF          reduce using rule 209 (block_item -> statement .)
    (               reduce using rule 209 (block_item -> statement .)
    &               reduce using rule 209 (block_item -> statement .)
    *               reduce using rule 209 (block_item -> statement .)
    +               reduce using rule 209 (block_item -> statement .)
    -               reduce using rule 209 (block_item -> statement .)
    ~               reduce using rule 209 (block_item -> statement .)
    !               reduce using rule 209 (block_item -> statement .)
    CONSTANT        reduce using rule 209 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 209 (block_item -> statement .)


state 118

    (219) expression_statement -> ; .

    }               reduce using rule 219 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 219 (expression_statement -> ; .)
    CASE            reduce using rule 219 (expression_statement -> ; .)
    DEFAULT         reduce using rule 219 (expression_statement -> ; .)
    {               reduce using rule 219 (expression_statement -> ; .)
    ;               reduce using rule 219 (expression_statement -> ; .)
    IF              reduce using rule 219 (expression_statement -> ; .)
    SWITCH          reduce using rule 219 (expression_statement -> ; .)
    WHILE           reduce using rule 219 (expression_statement -> ; .)
    DO              reduce using rule 219 (expression_statement -> ; .)
    FOR             reduce using rule 219 (expression_statement -> ; .)
    GOTO            reduce using rule 219 (expression_statement -> ; .)
    CONTINUE        reduce using rule 219 (expression_statement -> ; .)
    BREAK           reduce using rule 219 (expression_statement -> ; .)
    RETURN          reduce using rule 219 (expression_statement -> ; .)
    TYPEDEF         reduce using rule 219 (expression_statement -> ; .)
    EXTERN          reduce using rule 219 (expression_statement -> ; .)
    STATIC          reduce using rule 219 (expression_statement -> ; .)
    AUTO            reduce using rule 219 (expression_statement -> ; .)
    REGISTER        reduce using rule 219 (expression_statement -> ; .)
    VOID            reduce using rule 219 (expression_statement -> ; .)
    CHAR            reduce using rule 219 (expression_statement -> ; .)
    SHORT           reduce using rule 219 (expression_statement -> ; .)
    INT             reduce using rule 219 (expression_statement -> ; .)
    LONG            reduce using rule 219 (expression_statement -> ; .)
    FLOAT           reduce using rule 219 (expression_statement -> ; .)
    DOUBLE          reduce using rule 219 (expression_statement -> ; .)
    SIGNED          reduce using rule 219 (expression_statement -> ; .)
    UNSIGNED        reduce using rule 219 (expression_statement -> ; .)
    BOOL            reduce using rule 219 (expression_statement -> ; .)
    CONST           reduce using rule 219 (expression_statement -> ; .)
    RESTRICT        reduce using rule 219 (expression_statement -> ; .)
    VOLATILE        reduce using rule 219 (expression_statement -> ; .)
    INLINE          reduce using rule 219 (expression_statement -> ; .)
    ENUM            reduce using rule 219 (expression_statement -> ; .)
    STRUCT          reduce using rule 219 (expression_statement -> ; .)
    UNION           reduce using rule 219 (expression_statement -> ; .)
    INC_OP          reduce using rule 219 (expression_statement -> ; .)
    DEC_OP          reduce using rule 219 (expression_statement -> ; .)
    SIZEOF          reduce using rule 219 (expression_statement -> ; .)
    (               reduce using rule 219 (expression_statement -> ; .)
    &               reduce using rule 219 (expression_statement -> ; .)
    *               reduce using rule 219 (expression_statement -> ; .)
    +               reduce using rule 219 (expression_statement -> ; .)
    -               reduce using rule 219 (expression_statement -> ; .)
    ~               reduce using rule 219 (expression_statement -> ; .)
    !               reduce using rule 219 (expression_statement -> ; .)
    CONSTANT        reduce using rule 219 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 219 (expression_statement -> ; .)
    ELSE            reduce using rule 219 (expression_statement -> ; .)
    )               reduce using rule 219 (expression_statement -> ; .)


state 119

    (210) statement -> labeled_statement .

    }               reduce using rule 210 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 210 (statement -> labeled_statement .)
    CASE            reduce using rule 210 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 210 (statement -> labeled_statement .)
    {               reduce using rule 210 (statement -> labeled_statement .)
    ;               reduce using rule 210 (statement -> labeled_statement .)
    IF              reduce using rule 210 (statement -> labeled_statement .)
    SWITCH          reduce using rule 210 (statement -> labeled_statement .)
    WHILE           reduce using rule 210 (statement -> labeled_statement .)
    DO              reduce using rule 210 (statement -> labeled_statement .)
    FOR             reduce using rule 210 (statement -> labeled_statement .)
    GOTO            reduce using rule 210 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 210 (statement -> labeled_statement .)
    BREAK           reduce using rule 210 (statement -> labeled_statement .)
    RETURN          reduce using rule 210 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 210 (statement -> labeled_statement .)
    EXTERN          reduce using rule 210 (statement -> labeled_statement .)
    STATIC          reduce using rule 210 (statement -> labeled_statement .)
    AUTO            reduce using rule 210 (statement -> labeled_statement .)
    REGISTER        reduce using rule 210 (statement -> labeled_statement .)
    VOID            reduce using rule 210 (statement -> labeled_statement .)
    CHAR            reduce using rule 210 (statement -> labeled_statement .)
    SHORT           reduce using rule 210 (statement -> labeled_statement .)
    INT             reduce using rule 210 (statement -> labeled_statement .)
    LONG            reduce using rule 210 (statement -> labeled_statement .)
    FLOAT           reduce using rule 210 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 210 (statement -> labeled_statement .)
    SIGNED          reduce using rule 210 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 210 (statement -> labeled_statement .)
    BOOL            reduce using rule 210 (statement -> labeled_statement .)
    CONST           reduce using rule 210 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 210 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 210 (statement -> labeled_statement .)
    INLINE          reduce using rule 210 (statement -> labeled_statement .)
    ENUM            reduce using rule 210 (statement -> labeled_statement .)
    STRUCT          reduce using rule 210 (statement -> labeled_statement .)
    UNION           reduce using rule 210 (statement -> labeled_statement .)
    INC_OP          reduce using rule 210 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 210 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 210 (statement -> labeled_statement .)
    (               reduce using rule 210 (statement -> labeled_statement .)
    &               reduce using rule 210 (statement -> labeled_statement .)
    *               reduce using rule 210 (statement -> labeled_statement .)
    +               reduce using rule 210 (statement -> labeled_statement .)
    -               reduce using rule 210 (statement -> labeled_statement .)
    ~               reduce using rule 210 (statement -> labeled_statement .)
    !               reduce using rule 210 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 210 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 210 (statement -> labeled_statement .)
    ELSE            reduce using rule 210 (statement -> labeled_statement .)


state 120

    (211) statement -> compound_statement .

    }               reduce using rule 211 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 211 (statement -> compound_statement .)
    CASE            reduce using rule 211 (statement -> compound_statement .)
    DEFAULT         reduce using rule 211 (statement -> compound_statement .)
    {               reduce using rule 211 (statement -> compound_statement .)
    ;               reduce using rule 211 (statement -> compound_statement .)
    IF              reduce using rule 211 (statement -> compound_statement .)
    SWITCH          reduce using rule 211 (statement -> compound_statement .)
    WHILE           reduce using rule 211 (statement -> compound_statement .)
    DO              reduce using rule 211 (statement -> compound_statement .)
    FOR             reduce using rule 211 (statement -> compound_statement .)
    GOTO            reduce using rule 211 (statement -> compound_statement .)
    CONTINUE        reduce using rule 211 (statement -> compound_statement .)
    BREAK           reduce using rule 211 (statement -> compound_statement .)
    RETURN          reduce using rule 211 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 211 (statement -> compound_statement .)
    EXTERN          reduce using rule 211 (statement -> compound_statement .)
    STATIC          reduce using rule 211 (statement -> compound_statement .)
    AUTO            reduce using rule 211 (statement -> compound_statement .)
    REGISTER        reduce using rule 211 (statement -> compound_statement .)
    VOID            reduce using rule 211 (statement -> compound_statement .)
    CHAR            reduce using rule 211 (statement -> compound_statement .)
    SHORT           reduce using rule 211 (statement -> compound_statement .)
    INT             reduce using rule 211 (statement -> compound_statement .)
    LONG            reduce using rule 211 (statement -> compound_statement .)
    FLOAT           reduce using rule 211 (statement -> compound_statement .)
    DOUBLE          reduce using rule 211 (statement -> compound_statement .)
    SIGNED          reduce using rule 211 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 211 (statement -> compound_statement .)
    BOOL            reduce using rule 211 (statement -> compound_statement .)
    CONST           reduce using rule 211 (statement -> compound_statement .)
    RESTRICT        reduce using rule 211 (statement -> compound_statement .)
    VOLATILE        reduce using rule 211 (statement -> compound_statement .)
    INLINE          reduce using rule 211 (statement -> compound_statement .)
    ENUM            reduce using rule 211 (statement -> compound_statement .)
    STRUCT          reduce using rule 211 (statement -> compound_statement .)
    UNION           reduce using rule 211 (statement -> compound_statement .)
    INC_OP          reduce using rule 211 (statement -> compound_statement .)
    DEC_OP          reduce using rule 211 (statement -> compound_statement .)
    SIZEOF          reduce using rule 211 (statement -> compound_statement .)
    (               reduce using rule 211 (statement -> compound_statement .)
    &               reduce using rule 211 (statement -> compound_statement .)
    *               reduce using rule 211 (statement -> compound_statement .)
    +               reduce using rule 211 (statement -> compound_statement .)
    -               reduce using rule 211 (statement -> compound_statement .)
    ~               reduce using rule 211 (statement -> compound_statement .)
    !               reduce using rule 211 (statement -> compound_statement .)
    CONSTANT        reduce using rule 211 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 211 (statement -> compound_statement .)
    ELSE            reduce using rule 211 (statement -> compound_statement .)


state 121

    (212) statement -> expression_statement .

    }               reduce using rule 212 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 212 (statement -> expression_statement .)
    CASE            reduce using rule 212 (statement -> expression_statement .)
    DEFAULT         reduce using rule 212 (statement -> expression_statement .)
    {               reduce using rule 212 (statement -> expression_statement .)
    ;               reduce using rule 212 (statement -> expression_statement .)
    IF              reduce using rule 212 (statement -> expression_statement .)
    SWITCH          reduce using rule 212 (statement -> expression_statement .)
    WHILE           reduce using rule 212 (statement -> expression_statement .)
    DO              reduce using rule 212 (statement -> expression_statement .)
    FOR             reduce using rule 212 (statement -> expression_statement .)
    GOTO            reduce using rule 212 (statement -> expression_statement .)
    CONTINUE        reduce using rule 212 (statement -> expression_statement .)
    BREAK           reduce using rule 212 (statement -> expression_statement .)
    RETURN          reduce using rule 212 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 212 (statement -> expression_statement .)
    EXTERN          reduce using rule 212 (statement -> expression_statement .)
    STATIC          reduce using rule 212 (statement -> expression_statement .)
    AUTO            reduce using rule 212 (statement -> expression_statement .)
    REGISTER        reduce using rule 212 (statement -> expression_statement .)
    VOID            reduce using rule 212 (statement -> expression_statement .)
    CHAR            reduce using rule 212 (statement -> expression_statement .)
    SHORT           reduce using rule 212 (statement -> expression_statement .)
    INT             reduce using rule 212 (statement -> expression_statement .)
    LONG            reduce using rule 212 (statement -> expression_statement .)
    FLOAT           reduce using rule 212 (statement -> expression_statement .)
    DOUBLE          reduce using rule 212 (statement -> expression_statement .)
    SIGNED          reduce using rule 212 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 212 (statement -> expression_statement .)
    BOOL            reduce using rule 212 (statement -> expression_statement .)
    CONST           reduce using rule 212 (statement -> expression_statement .)
    RESTRICT        reduce using rule 212 (statement -> expression_statement .)
    VOLATILE        reduce using rule 212 (statement -> expression_statement .)
    INLINE          reduce using rule 212 (statement -> expression_statement .)
    ENUM            reduce using rule 212 (statement -> expression_statement .)
    STRUCT          reduce using rule 212 (statement -> expression_statement .)
    UNION           reduce using rule 212 (statement -> expression_statement .)
    INC_OP          reduce using rule 212 (statement -> expression_statement .)
    DEC_OP          reduce using rule 212 (statement -> expression_statement .)
    SIZEOF          reduce using rule 212 (statement -> expression_statement .)
    (               reduce using rule 212 (statement -> expression_statement .)
    &               reduce using rule 212 (statement -> expression_statement .)
    *               reduce using rule 212 (statement -> expression_statement .)
    +               reduce using rule 212 (statement -> expression_statement .)
    -               reduce using rule 212 (statement -> expression_statement .)
    ~               reduce using rule 212 (statement -> expression_statement .)
    !               reduce using rule 212 (statement -> expression_statement .)
    CONSTANT        reduce using rule 212 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 212 (statement -> expression_statement .)
    ELSE            reduce using rule 212 (statement -> expression_statement .)


state 122

    (213) statement -> selection_statement .

    }               reduce using rule 213 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 213 (statement -> selection_statement .)
    CASE            reduce using rule 213 (statement -> selection_statement .)
    DEFAULT         reduce using rule 213 (statement -> selection_statement .)
    {               reduce using rule 213 (statement -> selection_statement .)
    ;               reduce using rule 213 (statement -> selection_statement .)
    IF              reduce using rule 213 (statement -> selection_statement .)
    SWITCH          reduce using rule 213 (statement -> selection_statement .)
    WHILE           reduce using rule 213 (statement -> selection_statement .)
    DO              reduce using rule 213 (statement -> selection_statement .)
    FOR             reduce using rule 213 (statement -> selection_statement .)
    GOTO            reduce using rule 213 (statement -> selection_statement .)
    CONTINUE        reduce using rule 213 (statement -> selection_statement .)
    BREAK           reduce using rule 213 (statement -> selection_statement .)
    RETURN          reduce using rule 213 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 213 (statement -> selection_statement .)
    EXTERN          reduce using rule 213 (statement -> selection_statement .)
    STATIC          reduce using rule 213 (statement -> selection_statement .)
    AUTO            reduce using rule 213 (statement -> selection_statement .)
    REGISTER        reduce using rule 213 (statement -> selection_statement .)
    VOID            reduce using rule 213 (statement -> selection_statement .)
    CHAR            reduce using rule 213 (statement -> selection_statement .)
    SHORT           reduce using rule 213 (statement -> selection_statement .)
    INT             reduce using rule 213 (statement -> selection_statement .)
    LONG            reduce using rule 213 (statement -> selection_statement .)
    FLOAT           reduce using rule 213 (statement -> selection_statement .)
    DOUBLE          reduce using rule 213 (statement -> selection_statement .)
    SIGNED          reduce using rule 213 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 213 (statement -> selection_statement .)
    BOOL            reduce using rule 213 (statement -> selection_statement .)
    CONST           reduce using rule 213 (statement -> selection_statement .)
    RESTRICT        reduce using rule 213 (statement -> selection_statement .)
    VOLATILE        reduce using rule 213 (statement -> selection_statement .)
    INLINE          reduce using rule 213 (statement -> selection_statement .)
    ENUM            reduce using rule 213 (statement -> selection_statement .)
    STRUCT          reduce using rule 213 (statement -> selection_statement .)
    UNION           reduce using rule 213 (statement -> selection_statement .)
    INC_OP          reduce using rule 213 (statement -> selection_statement .)
    DEC_OP          reduce using rule 213 (statement -> selection_statement .)
    SIZEOF          reduce using rule 213 (statement -> selection_statement .)
    (               reduce using rule 213 (statement -> selection_statement .)
    &               reduce using rule 213 (statement -> selection_statement .)
    *               reduce using rule 213 (statement -> selection_statement .)
    +               reduce using rule 213 (statement -> selection_statement .)
    -               reduce using rule 213 (statement -> selection_statement .)
    ~               reduce using rule 213 (statement -> selection_statement .)
    !               reduce using rule 213 (statement -> selection_statement .)
    CONSTANT        reduce using rule 213 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 213 (statement -> selection_statement .)
    ELSE            reduce using rule 213 (statement -> selection_statement .)


state 123

    (214) statement -> iteration_statement .

    }               reduce using rule 214 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 214 (statement -> iteration_statement .)
    CASE            reduce using rule 214 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 214 (statement -> iteration_statement .)
    {               reduce using rule 214 (statement -> iteration_statement .)
    ;               reduce using rule 214 (statement -> iteration_statement .)
    IF              reduce using rule 214 (statement -> iteration_statement .)
    SWITCH          reduce using rule 214 (statement -> iteration_statement .)
    WHILE           reduce using rule 214 (statement -> iteration_statement .)
    DO              reduce using rule 214 (statement -> iteration_statement .)
    FOR             reduce using rule 214 (statement -> iteration_statement .)
    GOTO            reduce using rule 214 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 214 (statement -> iteration_statement .)
    BREAK           reduce using rule 214 (statement -> iteration_statement .)
    RETURN          reduce using rule 214 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 214 (statement -> iteration_statement .)
    EXTERN          reduce using rule 214 (statement -> iteration_statement .)
    STATIC          reduce using rule 214 (statement -> iteration_statement .)
    AUTO            reduce using rule 214 (statement -> iteration_statement .)
    REGISTER        reduce using rule 214 (statement -> iteration_statement .)
    VOID            reduce using rule 214 (statement -> iteration_statement .)
    CHAR            reduce using rule 214 (statement -> iteration_statement .)
    SHORT           reduce using rule 214 (statement -> iteration_statement .)
    INT             reduce using rule 214 (statement -> iteration_statement .)
    LONG            reduce using rule 214 (statement -> iteration_statement .)
    FLOAT           reduce using rule 214 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 214 (statement -> iteration_statement .)
    SIGNED          reduce using rule 214 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 214 (statement -> iteration_statement .)
    BOOL            reduce using rule 214 (statement -> iteration_statement .)
    CONST           reduce using rule 214 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 214 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 214 (statement -> iteration_statement .)
    INLINE          reduce using rule 214 (statement -> iteration_statement .)
    ENUM            reduce using rule 214 (statement -> iteration_statement .)
    STRUCT          reduce using rule 214 (statement -> iteration_statement .)
    UNION           reduce using rule 214 (statement -> iteration_statement .)
    INC_OP          reduce using rule 214 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 214 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 214 (statement -> iteration_statement .)
    (               reduce using rule 214 (statement -> iteration_statement .)
    &               reduce using rule 214 (statement -> iteration_statement .)
    *               reduce using rule 214 (statement -> iteration_statement .)
    +               reduce using rule 214 (statement -> iteration_statement .)
    -               reduce using rule 214 (statement -> iteration_statement .)
    ~               reduce using rule 214 (statement -> iteration_statement .)
    !               reduce using rule 214 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 214 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 214 (statement -> iteration_statement .)
    ELSE            reduce using rule 214 (statement -> iteration_statement .)


state 124

    (215) statement -> jump_statement .

    }               reduce using rule 215 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 215 (statement -> jump_statement .)
    CASE            reduce using rule 215 (statement -> jump_statement .)
    DEFAULT         reduce using rule 215 (statement -> jump_statement .)
    {               reduce using rule 215 (statement -> jump_statement .)
    ;               reduce using rule 215 (statement -> jump_statement .)
    IF              reduce using rule 215 (statement -> jump_statement .)
    SWITCH          reduce using rule 215 (statement -> jump_statement .)
    WHILE           reduce using rule 215 (statement -> jump_statement .)
    DO              reduce using rule 215 (statement -> jump_statement .)
    FOR             reduce using rule 215 (statement -> jump_statement .)
    GOTO            reduce using rule 215 (statement -> jump_statement .)
    CONTINUE        reduce using rule 215 (statement -> jump_statement .)
    BREAK           reduce using rule 215 (statement -> jump_statement .)
    RETURN          reduce using rule 215 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 215 (statement -> jump_statement .)
    EXTERN          reduce using rule 215 (statement -> jump_statement .)
    STATIC          reduce using rule 215 (statement -> jump_statement .)
    AUTO            reduce using rule 215 (statement -> jump_statement .)
    REGISTER        reduce using rule 215 (statement -> jump_statement .)
    VOID            reduce using rule 215 (statement -> jump_statement .)
    CHAR            reduce using rule 215 (statement -> jump_statement .)
    SHORT           reduce using rule 215 (statement -> jump_statement .)
    INT             reduce using rule 215 (statement -> jump_statement .)
    LONG            reduce using rule 215 (statement -> jump_statement .)
    FLOAT           reduce using rule 215 (statement -> jump_statement .)
    DOUBLE          reduce using rule 215 (statement -> jump_statement .)
    SIGNED          reduce using rule 215 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 215 (statement -> jump_statement .)
    BOOL            reduce using rule 215 (statement -> jump_statement .)
    CONST           reduce using rule 215 (statement -> jump_statement .)
    RESTRICT        reduce using rule 215 (statement -> jump_statement .)
    VOLATILE        reduce using rule 215 (statement -> jump_statement .)
    INLINE          reduce using rule 215 (statement -> jump_statement .)
    ENUM            reduce using rule 215 (statement -> jump_statement .)
    STRUCT          reduce using rule 215 (statement -> jump_statement .)
    UNION           reduce using rule 215 (statement -> jump_statement .)
    INC_OP          reduce using rule 215 (statement -> jump_statement .)
    DEC_OP          reduce using rule 215 (statement -> jump_statement .)
    SIZEOF          reduce using rule 215 (statement -> jump_statement .)
    (               reduce using rule 215 (statement -> jump_statement .)
    &               reduce using rule 215 (statement -> jump_statement .)
    *               reduce using rule 215 (statement -> jump_statement .)
    +               reduce using rule 215 (statement -> jump_statement .)
    -               reduce using rule 215 (statement -> jump_statement .)
    ~               reduce using rule 215 (statement -> jump_statement .)
    !               reduce using rule 215 (statement -> jump_statement .)
    CONSTANT        reduce using rule 215 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 215 (statement -> jump_statement .)
    ELSE            reduce using rule 215 (statement -> jump_statement .)


state 125

    (216) labeled_statement -> IDENTIFIER . : statement
    (157) primary_expression -> IDENTIFIER .

    :               shift and go to state 225
    [               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 157 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 157 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 157 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 157 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 157 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 157 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 157 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 157 (primary_expression -> IDENTIFIER .)


state 126

    (217) labeled_statement -> CASE . constant_expression : statement
    (102) constant_expression -> . conditional_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    constant_expression            shift and go to state 226
    conditional_expression         shift and go to state 227
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 94
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 127

    (218) labeled_statement -> DEFAULT . : statement

    :               shift and go to state 228


state 128

    (220) expression_statement -> expression . ;
    (162) expression -> expression . , assignment_expression

    ;               shift and go to state 229
    ,               shift and go to state 230


state 129

    (221) selection_statement -> IF . ( expression ) statement ELSE statement
    (222) selection_statement -> IF . ( expression ) statement

    (               shift and go to state 231


state 130

    (223) selection_statement -> SWITCH . ( expression ) statement

    (               shift and go to state 232


state 131

    (224) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 233


state 132

    (225) iteration_statement -> DO . statement WHILE ( expression ) ;
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    statement                      shift and go to state 234
    expression                     shift and go to state 128
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 133

    (226) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (227) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> FOR . ( declaration expression_statement ) statement
    (229) iteration_statement -> FOR . ( declaration expression_statement expression ) statement

    (               shift and go to state 235


state 134

    (230) jump_statement -> GOTO . IDENTIFIER ;

    IDENTIFIER      shift and go to state 236


state 135

    (231) jump_statement -> CONTINUE . ;

    ;               shift and go to state 237


state 136

    (232) jump_statement -> BREAK . ;

    ;               shift and go to state 238


state 137

    (233) jump_statement -> RETURN . ;
    (234) jump_statement -> RETURN . expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 239
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 240
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 138

    (161) expression -> assignment_expression .

    ;               reduce using rule 161 (expression -> assignment_expression .)
    ,               reduce using rule 161 (expression -> assignment_expression .)
    )               reduce using rule 161 (expression -> assignment_expression .)
    :               reduce using rule 161 (expression -> assignment_expression .)
    ]               reduce using rule 161 (expression -> assignment_expression .)


state 139

    (8) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)


state 140

    (76) direct_declarator -> direct_declarator [ type_qualifier_list . assignment_expression ]
    (77) direct_declarator -> direct_declarator [ type_qualifier_list . ]
    (80) direct_declarator -> direct_declarator [ type_qualifier_list . STATIC assignment_expression ]
    (81) direct_declarator -> direct_declarator [ type_qualifier_list . * ]
    (73) type_qualifier_list -> type_qualifier_list . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 242
    STATIC          shift and go to state 243
    *               shift and go to state 244
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 241
    type_qualifier                 shift and go to state 153
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 141

    (78) direct_declarator -> direct_declarator [ assignment_expression . ]

    ]               shift and go to state 245


state 142

    (83) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    TYPEDEF         reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    EXTERN          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    STATIC          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    AUTO            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    REGISTER        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    SHORT           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    LONG            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    FLOAT           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    DOUBLE          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    SIGNED          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    UNSIGNED        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    BOOL            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    CONST           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    RESTRICT        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    VOLATILE        reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    INLINE          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    ENUM            reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    UNION           reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 83 (direct_declarator -> direct_declarator [ ] .)


state 143

    (79) direct_declarator -> direct_declarator [ STATIC . type_qualifier_list assignment_expression ]
    (72) type_qualifier_list -> . type_qualifier
    (73) type_qualifier_list -> . type_qualifier_list type_qualifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29

    type_qualifier_list            shift and go to state 246
    type_qualifier                 shift and go to state 66

state 144

    (82) direct_declarator -> direct_declarator [ * . ]
    (142) unary_operator -> * .

    ]               shift and go to state 247
    (               reduce using rule 142 (unary_operator -> * .)
    INC_OP          reduce using rule 142 (unary_operator -> * .)
    DEC_OP          reduce using rule 142 (unary_operator -> * .)
    SIZEOF          reduce using rule 142 (unary_operator -> * .)
    &               reduce using rule 142 (unary_operator -> * .)
    *               reduce using rule 142 (unary_operator -> * .)
    +               reduce using rule 142 (unary_operator -> * .)
    -               reduce using rule 142 (unary_operator -> * .)
    ~               reduce using rule 142 (unary_operator -> * .)
    !               reduce using rule 142 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 142 (unary_operator -> * .)
    CONSTANT        reduce using rule 142 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_operator -> * .)


state 145

    (84) direct_declarator -> direct_declarator ( parameter_type_list . )

    )               shift and go to state 248


state 146

    (86) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    TYPEDEF         reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    EXTERN          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    STATIC          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    AUTO            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    REGISTER        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    SHORT           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    LONG            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    FLOAT           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    DOUBLE          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    SIGNED          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    UNSIGNED        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    BOOL            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    CONST           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    RESTRICT        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    VOLATILE        reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    INLINE          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    ENUM            reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    UNION           reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 86 (direct_declarator -> direct_declarator ( ) .)


state 147

    (85) direct_declarator -> direct_declarator ( identifier_list . )
    (88) identifier_list -> identifier_list . , IDENTIFIER

    )               shift and go to state 249
    ,               shift and go to state 250


state 148

    (179) parameter_type_list -> parameter_list .
    (180) parameter_type_list -> parameter_list . , ELLIPSIS
    (182) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 179 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 251


state 149

    (87) identifier_list -> IDENTIFIER .

    )               reduce using rule 87 (identifier_list -> IDENTIFIER .)
    ,               reduce using rule 87 (identifier_list -> IDENTIFIER .)


state 150

    (181) parameter_list -> parameter_declaration .

    ,               reduce using rule 181 (parameter_list -> parameter_declaration .)
    )               reduce using rule 181 (parameter_list -> parameter_declaration .)


state 151

    (183) parameter_declaration -> declaration_specifiers . declarator
    (184) parameter_declaration -> declaration_specifiers . abstract_declarator
    (185) parameter_declaration -> declaration_specifiers .
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (165) abstract_declarator -> . pointer
    (166) abstract_declarator -> . direct_abstract_declarator
    (167) abstract_declarator -> . pointer direct_abstract_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (168) direct_abstract_declarator -> . ( abstract_declarator )
    (169) direct_abstract_declarator -> . [ ]
    (170) direct_abstract_declarator -> . [ assignment_expression ]
    (171) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (172) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (173) direct_abstract_declarator -> . [ * ]
    (174) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (175) direct_abstract_declarator -> . ( )
    (176) direct_abstract_declarator -> . ( parameter_type_list )
    (177) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (178) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 185 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 185 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 256
    [               shift and go to state 257

    declarator                     shift and go to state 252
    abstract_declarator            shift and go to state 253
    pointer                        shift and go to state 254
    direct_declarator              shift and go to state 40
    direct_abstract_declarator     shift and go to state 255

state 152

    (71) pointer -> * type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    (               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 71 (pointer -> * type_qualifier_list pointer .)


state 153

    (73) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ]               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STATIC          reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    INC_OP          reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    DEC_OP          reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    SIZEOF          reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    &               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    +               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    -               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ~               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    !               reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONSTANT        reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    STRING_LITERAL  reduce using rule 73 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 154

    (75) direct_declarator -> ( declarator ) .

    [               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    TYPEDEF         reduce using rule 75 (direct_declarator -> ( declarator ) .)
    EXTERN          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    STATIC          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    AUTO            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    REGISTER        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    SHORT           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 75 (direct_declarator -> ( declarator ) .)
    LONG            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    FLOAT           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    DOUBLE          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    SIGNED          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    UNSIGNED        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    BOOL            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    CONST           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    RESTRICT        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    VOLATILE        reduce using rule 75 (direct_declarator -> ( declarator ) .)
    INLINE          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    ENUM            reduce using rule 75 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 75 (direct_declarator -> ( declarator ) .)
    UNION           reduce using rule 75 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 75 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 75 (direct_declarator -> ( declarator ) .)


state 155

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list . }
    (55) struct_declaration_list -> struct_declaration_list . struct_declaration
    (56) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    }               shift and go to state 258
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    struct_or_union                shift and go to state 31
    struct_declaration             shift and go to state 157
    specifier_qualifier_list       shift and go to state 71
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26

state 156

    (50) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOID            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CHAR            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SHORT           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INT             reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    LONG            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    FLOAT           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    DOUBLE          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SIGNED          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNSIGNED        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    BOOL            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    RESTRICT        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INLINE          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ENUM            reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STRUCT          reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNION           reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 50 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 157

    (55) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 55 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 158

    (56) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (62) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 259
    ,               shift and go to state 260


state 159

    (61) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 61 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 61 (struct_declarator_list -> struct_declarator .)


state 160

    (63) struct_declarator -> declarator .
    (65) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 63 (struct_declarator -> declarator .)
    ,               reduce using rule 63 (struct_declarator -> declarator .)
    :               shift and go to state 261


state 161

    (64) struct_declarator -> : . constant_expression
    (102) constant_expression -> . conditional_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    constant_expression            shift and go to state 262
    conditional_expression         shift and go to state 227
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 94
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 162

    (57) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    :               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 57 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 163

    (59) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    [               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 59 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 164

    (40) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    VOID            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    CHAR            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    SHORT           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    INT             reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    LONG            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    FLOAT           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    DOUBLE          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    SIGNED          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    UNSIGNED        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    BOOL            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    RESTRICT        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    INLINE          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    ENUM            reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    STRUCT          reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    UNION           reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    IDENTIFIER      reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 40 (enum_specifier -> ENUM { enumerator_list } .)


state 165

    (42) enum_specifier -> ENUM { enumerator_list , . }
    (46) enumerator_list -> enumerator_list , . enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 263
    IDENTIFIER      shift and go to state 76

    enumerator                     shift and go to state 264

state 166

    (48) enumerator -> IDENTIFIER = . constant_expression
    (102) constant_expression -> . conditional_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    constant_expression            shift and go to state 265
    conditional_expression         shift and go to state 227
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 94
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 167

    (41) enum_specifier -> ENUM IDENTIFIER { enumerator_list . }
    (43) enum_specifier -> ENUM IDENTIFIER { enumerator_list . , }
    (46) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 266
    ,               shift and go to state 267


state 168

    (193) initializer -> { initializer_list . }
    (194) initializer -> { initializer_list . , }
    (190) initializer_list -> initializer_list . , initializer
    (191) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 268
    ,               shift and go to state 269


state 169

    (188) initializer_list -> initializer .

    }               reduce using rule 188 (initializer_list -> initializer .)
    ,               reduce using rule 188 (initializer_list -> initializer .)


state 170

    (189) initializer_list -> designation . initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer                    shift and go to state 270
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 171

    (195) designation -> designator_list . =
    (197) designator_list -> designator_list . designator
    (198) designator -> . [ constant_expression ]
    (199) designator -> . . IDENTIFIER

    =               shift and go to state 271
    [               shift and go to state 173
    .               shift and go to state 174

    designator                     shift and go to state 272

state 172

    (196) designator_list -> designator .

    =               reduce using rule 196 (designator_list -> designator .)
    [               reduce using rule 196 (designator_list -> designator .)
    .               reduce using rule 196 (designator_list -> designator .)


state 173

    (198) designator -> [ . constant_expression ]
    (102) constant_expression -> . conditional_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    constant_expression            shift and go to state 273
    conditional_expression         shift and go to state 227
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 94
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 174

    (199) designator -> . . IDENTIFIER

    IDENTIFIER      shift and go to state 274


state 175

    (90) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    unary_expression               shift and go to state 85
    assignment_expression          shift and go to state 275
    conditional_expression         shift and go to state 84
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 176

    (91) assignment_operator -> = .

    INC_OP          reduce using rule 91 (assignment_operator -> = .)
    DEC_OP          reduce using rule 91 (assignment_operator -> = .)
    SIZEOF          reduce using rule 91 (assignment_operator -> = .)
    (               reduce using rule 91 (assignment_operator -> = .)
    &               reduce using rule 91 (assignment_operator -> = .)
    *               reduce using rule 91 (assignment_operator -> = .)
    +               reduce using rule 91 (assignment_operator -> = .)
    -               reduce using rule 91 (assignment_operator -> = .)
    ~               reduce using rule 91 (assignment_operator -> = .)
    !               reduce using rule 91 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 91 (assignment_operator -> = .)
    CONSTANT        reduce using rule 91 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 91 (assignment_operator -> = .)


state 177

    (92) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    &               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    *               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    +               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    ~               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 92 (assignment_operator -> MUL_ASSIGN .)


state 178

    (93) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    &               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    *               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    +               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    ~               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 93 (assignment_operator -> DIV_ASSIGN .)


state 179

    (94) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    &               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    *               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    +               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    ~               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 94 (assignment_operator -> MOD_ASSIGN .)


state 180

    (95) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    &               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    *               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    +               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    ~               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 95 (assignment_operator -> ADD_ASSIGN .)


state 181

    (96) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    &               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    *               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    +               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    ~               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 96 (assignment_operator -> SUB_ASSIGN .)


state 182

    (97) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    &               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    *               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    +               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    ~               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 97 (assignment_operator -> LEFT_ASSIGN .)


state 183

    (98) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    &               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    *               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    +               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    ~               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 98 (assignment_operator -> RIGHT_ASSIGN .)


state 184

    (99) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    &               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    *               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    +               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    CONSTANT        reduce using rule 99 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 99 (assignment_operator -> AND_ASSIGN .)


state 185

    (100) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    &               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    *               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    +               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 100 (assignment_operator -> XOR_ASSIGN .)


state 186

    (101) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    &               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    *               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    +               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    CONSTANT        reduce using rule 101 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 101 (assignment_operator -> OR_ASSIGN .)


state 187

    (104) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    logical_or_expression          shift and go to state 86
    expression                     shift and go to state 276
    conditional_expression         shift and go to state 84
    assignment_expression          shift and go to state 138
    unary_expression               shift and go to state 85
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 188

    (106) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    logical_and_expression         shift and go to state 277
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 189

    (148) postfix_expression -> postfix_expression [ . expression ]
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    postfix_expression             shift and go to state 87
    expression                     shift and go to state 278
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 190

    (149) postfix_expression -> postfix_expression ( . )
    (150) postfix_expression -> postfix_expression ( . argument_expression_list )
    (186) argument_expression_list -> . assignment_expression
    (187) argument_expression_list -> . argument_expression_list , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 279
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    postfix_expression             shift and go to state 87
    argument_expression_list       shift and go to state 280
    assignment_expression          shift and go to state 281
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 191

    (151) postfix_expression -> postfix_expression . . IDENTIFIER

    IDENTIFIER      shift and go to state 282


state 192

    (152) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 283


state 193

    (153) postfix_expression -> postfix_expression INC_OP .

    [               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    (               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    .               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    =               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    *               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    /               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    %               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    +               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    -               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    <               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    >               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    &               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    ^               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    |               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    ?               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    ;               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    ,               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    ]               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    }               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    )               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)
    :               reduce using rule 153 (postfix_expression -> postfix_expression INC_OP .)


state 194

    (154) postfix_expression -> postfix_expression DEC_OP .

    [               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    (               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    .               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    =               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    *               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    /               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    %               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    +               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    -               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    <               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    >               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    &               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    ^               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    |               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    ?               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    ;               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    ,               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    ]               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    }               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    )               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)
    :               reduce using rule 154 (postfix_expression -> postfix_expression DEC_OP .)


state 195

    (136) unary_expression -> INC_OP unary_expression .

    =               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    *               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    %               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    &               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    ^               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    |               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    ?               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    }               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)
    :               reduce using rule 136 (unary_expression -> INC_OP unary_expression .)


state 196

    (155) postfix_expression -> ( . type_name ) { initializer_list }
    (156) postfix_expression -> ( . type_name ) { initializer_list , }
    (160) primary_expression -> ( . expression )
    (163) type_name -> . specifier_qualifier_list
    (164) type_name -> . specifier_qualifier_list abstract_declarator
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 284
    expression                     shift and go to state 204
    specifier_qualifier_list       shift and go to state 205
    assignment_expression          shift and go to state 138
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 197

    (137) unary_expression -> DEC_OP unary_expression .

    =               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    *               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    %               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    &               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    ^               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    |               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    ?               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    }               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)
    :               reduce using rule 137 (unary_expression -> DEC_OP unary_expression .)


state 198

    (138) unary_expression -> unary_operator cast_expression .

    =               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    *               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 138 (unary_expression -> unary_operator cast_expression .)


state 199

    (133) cast_expression -> unary_expression .

    =               reduce using rule 133 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 133 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 133 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 133 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 133 (cast_expression -> unary_expression .)
    *               reduce using rule 133 (cast_expression -> unary_expression .)
    /               reduce using rule 133 (cast_expression -> unary_expression .)
    %               reduce using rule 133 (cast_expression -> unary_expression .)
    +               reduce using rule 133 (cast_expression -> unary_expression .)
    -               reduce using rule 133 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 133 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 133 (cast_expression -> unary_expression .)
    <               reduce using rule 133 (cast_expression -> unary_expression .)
    >               reduce using rule 133 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    &               reduce using rule 133 (cast_expression -> unary_expression .)
    ^               reduce using rule 133 (cast_expression -> unary_expression .)
    |               reduce using rule 133 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 133 (cast_expression -> unary_expression .)
    ?               reduce using rule 133 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 133 (cast_expression -> unary_expression .)
    ;               reduce using rule 133 (cast_expression -> unary_expression .)
    ,               reduce using rule 133 (cast_expression -> unary_expression .)
    ]               reduce using rule 133 (cast_expression -> unary_expression .)
    }               reduce using rule 133 (cast_expression -> unary_expression .)
    )               reduce using rule 133 (cast_expression -> unary_expression .)
    :               reduce using rule 133 (cast_expression -> unary_expression .)


state 200

    (134) cast_expression -> ( . type_name ) cast_expression
    (155) postfix_expression -> ( . type_name ) { initializer_list }
    (156) postfix_expression -> ( . type_name ) { initializer_list , }
    (160) primary_expression -> ( . expression )
    (163) type_name -> . specifier_qualifier_list
    (164) type_name -> . specifier_qualifier_list abstract_declarator
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 285
    cast_expression                shift and go to state 91
    expression                     shift and go to state 204
    specifier_qualifier_list       shift and go to state 205
    assignment_expression          shift and go to state 138
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 201

    (139) unary_expression -> SIZEOF unary_expression .

    =               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    *               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 139 (unary_expression -> SIZEOF unary_expression .)


state 202

    (140) unary_expression -> SIZEOF ( . type_name )
    (155) postfix_expression -> ( . type_name ) { initializer_list }
    (156) postfix_expression -> ( . type_name ) { initializer_list , }
    (160) primary_expression -> ( . expression )
    (163) type_name -> . specifier_qualifier_list
    (164) type_name -> . specifier_qualifier_list abstract_declarator
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (57) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (58) specifier_qualifier_list -> . type_specifier
    (59) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (60) specifier_qualifier_list -> . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    type_name                      shift and go to state 286
    expression                     shift and go to state 204
    specifier_qualifier_list       shift and go to state 205
    assignment_expression          shift and go to state 138
    type_specifier                 shift and go to state 72
    type_qualifier                 shift and go to state 73
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 203

    (155) postfix_expression -> ( type_name . ) { initializer_list }
    (156) postfix_expression -> ( type_name . ) { initializer_list , }
    (134) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 287


state 204

    (160) primary_expression -> ( expression . )
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 288
    ,               shift and go to state 230


state 205

    (163) type_name -> specifier_qualifier_list .
    (164) type_name -> specifier_qualifier_list . abstract_declarator
    (165) abstract_declarator -> . pointer
    (166) abstract_declarator -> . direct_abstract_declarator
    (167) abstract_declarator -> . pointer direct_abstract_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (168) direct_abstract_declarator -> . ( abstract_declarator )
    (169) direct_abstract_declarator -> . [ ]
    (170) direct_abstract_declarator -> . [ assignment_expression ]
    (171) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (172) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (173) direct_abstract_declarator -> . [ * ]
    (174) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (175) direct_abstract_declarator -> . ( )
    (176) direct_abstract_declarator -> . ( parameter_type_list )
    (177) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (178) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 163 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 42
    (               shift and go to state 291
    [               shift and go to state 257

    abstract_declarator            shift and go to state 289
    pointer                        shift and go to state 290
    direct_abstract_declarator     shift and go to state 255

state 206

    (108) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    inclusive_or_expression        shift and go to state 292
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 207

    (110) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    exclusive_or_expression        shift and go to state 293
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 208

    (112) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    and_expression                 shift and go to state 294
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 209

    (114) and_expression -> and_expression & . equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    equality_expression            shift and go to state 295
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 210

    (116) equality_expression -> equality_expression EQ_OP . relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    relational_expression          shift and go to state 296
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 211

    (117) equality_expression -> equality_expression NE_OP . relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    relational_expression          shift and go to state 297
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 212

    (119) relational_expression -> relational_expression < . shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expression               shift and go to state 298
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 213

    (120) relational_expression -> relational_expression > . shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expression               shift and go to state 299
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 214

    (121) relational_expression -> relational_expression LE_OP . shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expression               shift and go to state 300
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 215

    (122) relational_expression -> relational_expression GE_OP . shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    shift_expression               shift and go to state 301
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 216

    (124) shift_expression -> shift_expression LEFT_OP . additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    additive_expression            shift and go to state 302
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 217

    (125) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    additive_expression            shift and go to state 303
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 218

    (127) additive_expression -> additive_expression + . multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    multiplicative_expression      shift and go to state 304
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 219

    (128) additive_expression -> additive_expression - . multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    multiplicative_expression      shift and go to state 305
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 220

    (130) multiplicative_expression -> multiplicative_expression * . cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expression                shift and go to state 306
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 221

    (131) multiplicative_expression -> multiplicative_expression / . cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expression                shift and go to state 307
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 222

    (132) multiplicative_expression -> multiplicative_expression % . cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expression                shift and go to state 308
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 223

    (205) compound_statement -> { block_item_list } .

    TYPEDEF         reduce using rule 205 (compound_statement -> { block_item_list } .)
    EXTERN          reduce using rule 205 (compound_statement -> { block_item_list } .)
    STATIC          reduce using rule 205 (compound_statement -> { block_item_list } .)
    AUTO            reduce using rule 205 (compound_statement -> { block_item_list } .)
    REGISTER        reduce using rule 205 (compound_statement -> { block_item_list } .)
    VOID            reduce using rule 205 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 205 (compound_statement -> { block_item_list } .)
    SHORT           reduce using rule 205 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 205 (compound_statement -> { block_item_list } .)
    LONG            reduce using rule 205 (compound_statement -> { block_item_list } .)
    FLOAT           reduce using rule 205 (compound_statement -> { block_item_list } .)
    DOUBLE          reduce using rule 205 (compound_statement -> { block_item_list } .)
    SIGNED          reduce using rule 205 (compound_statement -> { block_item_list } .)
    UNSIGNED        reduce using rule 205 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 205 (compound_statement -> { block_item_list } .)
    CONST           reduce using rule 205 (compound_statement -> { block_item_list } .)
    RESTRICT        reduce using rule 205 (compound_statement -> { block_item_list } .)
    VOLATILE        reduce using rule 205 (compound_statement -> { block_item_list } .)
    INLINE          reduce using rule 205 (compound_statement -> { block_item_list } .)
    ENUM            reduce using rule 205 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 205 (compound_statement -> { block_item_list } .)
    UNION           reduce using rule 205 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 205 (compound_statement -> { block_item_list } .)
    }               reduce using rule 205 (compound_statement -> { block_item_list } .)
    IDENTIFIER      reduce using rule 205 (compound_statement -> { block_item_list } .)
    CASE            reduce using rule 205 (compound_statement -> { block_item_list } .)
    DEFAULT         reduce using rule 205 (compound_statement -> { block_item_list } .)
    {               reduce using rule 205 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 205 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 205 (compound_statement -> { block_item_list } .)
    SWITCH          reduce using rule 205 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 205 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 205 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 205 (compound_statement -> { block_item_list } .)
    GOTO            reduce using rule 205 (compound_statement -> { block_item_list } .)
    CONTINUE        reduce using rule 205 (compound_statement -> { block_item_list } .)
    BREAK           reduce using rule 205 (compound_statement -> { block_item_list } .)
    RETURN          reduce using rule 205 (compound_statement -> { block_item_list } .)
    INC_OP          reduce using rule 205 (compound_statement -> { block_item_list } .)
    DEC_OP          reduce using rule 205 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 205 (compound_statement -> { block_item_list } .)
    (               reduce using rule 205 (compound_statement -> { block_item_list } .)
    &               reduce using rule 205 (compound_statement -> { block_item_list } .)
    *               reduce using rule 205 (compound_statement -> { block_item_list } .)
    +               reduce using rule 205 (compound_statement -> { block_item_list } .)
    -               reduce using rule 205 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 205 (compound_statement -> { block_item_list } .)
    !               reduce using rule 205 (compound_statement -> { block_item_list } .)
    CONSTANT        reduce using rule 205 (compound_statement -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 205 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 205 (compound_statement -> { block_item_list } .)


state 224

    (207) block_item_list -> block_item_list block_item .

    }               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 207 (block_item_list -> block_item_list block_item .)
    CASE            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    DEFAULT         reduce using rule 207 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 207 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 207 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 207 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 207 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 207 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 207 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 207 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 207 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 207 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 207 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 207 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 207 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 207 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 207 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 207 (block_item_list -> block_item_list block_item .)
    INLINE          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 207 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 207 (block_item_list -> block_item_list block_item .)
    INC_OP          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    DEC_OP          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 207 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 207 (block_item_list -> block_item_list block_item .)
    CONSTANT        reduce using rule 207 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 207 (block_item_list -> block_item_list block_item .)


state 225

    (216) labeled_statement -> IDENTIFIER : . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    statement                      shift and go to state 309
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 226

    (217) labeled_statement -> CASE constant_expression . : statement

    :               shift and go to state 310


state 227

    (102) constant_expression -> conditional_expression .

    :               reduce using rule 102 (constant_expression -> conditional_expression .)
    ;               reduce using rule 102 (constant_expression -> conditional_expression .)
    ,               reduce using rule 102 (constant_expression -> conditional_expression .)
    }               reduce using rule 102 (constant_expression -> conditional_expression .)
    ]               reduce using rule 102 (constant_expression -> conditional_expression .)


state 228

    (218) labeled_statement -> DEFAULT : . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    statement                      shift and go to state 311
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 229

    (220) expression_statement -> expression ; .

    }               reduce using rule 220 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 220 (expression_statement -> expression ; .)
    CASE            reduce using rule 220 (expression_statement -> expression ; .)
    DEFAULT         reduce using rule 220 (expression_statement -> expression ; .)
    {               reduce using rule 220 (expression_statement -> expression ; .)
    ;               reduce using rule 220 (expression_statement -> expression ; .)
    IF              reduce using rule 220 (expression_statement -> expression ; .)
    SWITCH          reduce using rule 220 (expression_statement -> expression ; .)
    WHILE           reduce using rule 220 (expression_statement -> expression ; .)
    DO              reduce using rule 220 (expression_statement -> expression ; .)
    FOR             reduce using rule 220 (expression_statement -> expression ; .)
    GOTO            reduce using rule 220 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 220 (expression_statement -> expression ; .)
    BREAK           reduce using rule 220 (expression_statement -> expression ; .)
    RETURN          reduce using rule 220 (expression_statement -> expression ; .)
    TYPEDEF         reduce using rule 220 (expression_statement -> expression ; .)
    EXTERN          reduce using rule 220 (expression_statement -> expression ; .)
    STATIC          reduce using rule 220 (expression_statement -> expression ; .)
    AUTO            reduce using rule 220 (expression_statement -> expression ; .)
    REGISTER        reduce using rule 220 (expression_statement -> expression ; .)
    VOID            reduce using rule 220 (expression_statement -> expression ; .)
    CHAR            reduce using rule 220 (expression_statement -> expression ; .)
    SHORT           reduce using rule 220 (expression_statement -> expression ; .)
    INT             reduce using rule 220 (expression_statement -> expression ; .)
    LONG            reduce using rule 220 (expression_statement -> expression ; .)
    FLOAT           reduce using rule 220 (expression_statement -> expression ; .)
    DOUBLE          reduce using rule 220 (expression_statement -> expression ; .)
    SIGNED          reduce using rule 220 (expression_statement -> expression ; .)
    UNSIGNED        reduce using rule 220 (expression_statement -> expression ; .)
    BOOL            reduce using rule 220 (expression_statement -> expression ; .)
    CONST           reduce using rule 220 (expression_statement -> expression ; .)
    RESTRICT        reduce using rule 220 (expression_statement -> expression ; .)
    VOLATILE        reduce using rule 220 (expression_statement -> expression ; .)
    INLINE          reduce using rule 220 (expression_statement -> expression ; .)
    ENUM            reduce using rule 220 (expression_statement -> expression ; .)
    STRUCT          reduce using rule 220 (expression_statement -> expression ; .)
    UNION           reduce using rule 220 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 220 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 220 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 220 (expression_statement -> expression ; .)
    (               reduce using rule 220 (expression_statement -> expression ; .)
    &               reduce using rule 220 (expression_statement -> expression ; .)
    *               reduce using rule 220 (expression_statement -> expression ; .)
    +               reduce using rule 220 (expression_statement -> expression ; .)
    -               reduce using rule 220 (expression_statement -> expression ; .)
    ~               reduce using rule 220 (expression_statement -> expression ; .)
    !               reduce using rule 220 (expression_statement -> expression ; .)
    CONSTANT        reduce using rule 220 (expression_statement -> expression ; .)
    STRING_LITERAL  reduce using rule 220 (expression_statement -> expression ; .)
    ELSE            reduce using rule 220 (expression_statement -> expression ; .)
    )               reduce using rule 220 (expression_statement -> expression ; .)


state 230

    (162) expression -> expression , . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 312
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 231

    (221) selection_statement -> IF ( . expression ) statement ELSE statement
    (222) selection_statement -> IF ( . expression ) statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 313
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 232

    (223) selection_statement -> SWITCH ( . expression ) statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 314
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 233

    (224) iteration_statement -> WHILE ( . expression ) statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 315
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 234

    (225) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 316


state 235

    (226) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (227) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (228) iteration_statement -> FOR ( . declaration expression_statement ) statement
    (229) iteration_statement -> FOR ( . declaration expression_statement expression ) statement
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 118
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    ENUM            shift and go to state 32
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 317
    expression                     shift and go to state 128
    declaration                    shift and go to state 318
    declaration_specifiers         shift and go to state 53
    assignment_expression          shift and go to state 138
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    struct_or_union                shift and go to state 31
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 236

    (230) jump_statement -> GOTO IDENTIFIER . ;

    ;               shift and go to state 319


state 237

    (231) jump_statement -> CONTINUE ; .

    }               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 231 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 231 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 231 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 231 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 231 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 231 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 231 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 231 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    TYPEDEF         reduce using rule 231 (jump_statement -> CONTINUE ; .)
    EXTERN          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    STATIC          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    AUTO            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    REGISTER        reduce using rule 231 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 231 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 231 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 231 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 231 (jump_statement -> CONTINUE ; .)
    BOOL            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    CONST           reduce using rule 231 (jump_statement -> CONTINUE ; .)
    RESTRICT        reduce using rule 231 (jump_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 231 (jump_statement -> CONTINUE ; .)
    INLINE          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    ENUM            reduce using rule 231 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    UNION           reduce using rule 231 (jump_statement -> CONTINUE ; .)
    INC_OP          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    DEC_OP          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 231 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 231 (jump_statement -> CONTINUE ; .)
    CONSTANT        reduce using rule 231 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 231 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 231 (jump_statement -> CONTINUE ; .)


state 238

    (232) jump_statement -> BREAK ; .

    }               reduce using rule 232 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 232 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 232 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 232 (jump_statement -> BREAK ; .)
    {               reduce using rule 232 (jump_statement -> BREAK ; .)
    ;               reduce using rule 232 (jump_statement -> BREAK ; .)
    IF              reduce using rule 232 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 232 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 232 (jump_statement -> BREAK ; .)
    DO              reduce using rule 232 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 232 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 232 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 232 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 232 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 232 (jump_statement -> BREAK ; .)
    TYPEDEF         reduce using rule 232 (jump_statement -> BREAK ; .)
    EXTERN          reduce using rule 232 (jump_statement -> BREAK ; .)
    STATIC          reduce using rule 232 (jump_statement -> BREAK ; .)
    AUTO            reduce using rule 232 (jump_statement -> BREAK ; .)
    REGISTER        reduce using rule 232 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 232 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 232 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 232 (jump_statement -> BREAK ; .)
    INT             reduce using rule 232 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 232 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 232 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 232 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 232 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 232 (jump_statement -> BREAK ; .)
    BOOL            reduce using rule 232 (jump_statement -> BREAK ; .)
    CONST           reduce using rule 232 (jump_statement -> BREAK ; .)
    RESTRICT        reduce using rule 232 (jump_statement -> BREAK ; .)
    VOLATILE        reduce using rule 232 (jump_statement -> BREAK ; .)
    INLINE          reduce using rule 232 (jump_statement -> BREAK ; .)
    ENUM            reduce using rule 232 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 232 (jump_statement -> BREAK ; .)
    UNION           reduce using rule 232 (jump_statement -> BREAK ; .)
    INC_OP          reduce using rule 232 (jump_statement -> BREAK ; .)
    DEC_OP          reduce using rule 232 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 232 (jump_statement -> BREAK ; .)
    (               reduce using rule 232 (jump_statement -> BREAK ; .)
    &               reduce using rule 232 (jump_statement -> BREAK ; .)
    *               reduce using rule 232 (jump_statement -> BREAK ; .)
    +               reduce using rule 232 (jump_statement -> BREAK ; .)
    -               reduce using rule 232 (jump_statement -> BREAK ; .)
    ~               reduce using rule 232 (jump_statement -> BREAK ; .)
    !               reduce using rule 232 (jump_statement -> BREAK ; .)
    CONSTANT        reduce using rule 232 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 232 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 232 (jump_statement -> BREAK ; .)


state 239

    (233) jump_statement -> RETURN ; .

    }               reduce using rule 233 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 233 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 233 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 233 (jump_statement -> RETURN ; .)
    {               reduce using rule 233 (jump_statement -> RETURN ; .)
    ;               reduce using rule 233 (jump_statement -> RETURN ; .)
    IF              reduce using rule 233 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 233 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 233 (jump_statement -> RETURN ; .)
    DO              reduce using rule 233 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 233 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 233 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 233 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 233 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 233 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 233 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 233 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 233 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 233 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 233 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 233 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 233 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 233 (jump_statement -> RETURN ; .)
    INT             reduce using rule 233 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 233 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 233 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 233 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 233 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 233 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 233 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 233 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 233 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 233 (jump_statement -> RETURN ; .)
    INLINE          reduce using rule 233 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 233 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 233 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 233 (jump_statement -> RETURN ; .)
    INC_OP          reduce using rule 233 (jump_statement -> RETURN ; .)
    DEC_OP          reduce using rule 233 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 233 (jump_statement -> RETURN ; .)
    (               reduce using rule 233 (jump_statement -> RETURN ; .)
    &               reduce using rule 233 (jump_statement -> RETURN ; .)
    *               reduce using rule 233 (jump_statement -> RETURN ; .)
    +               reduce using rule 233 (jump_statement -> RETURN ; .)
    -               reduce using rule 233 (jump_statement -> RETURN ; .)
    ~               reduce using rule 233 (jump_statement -> RETURN ; .)
    !               reduce using rule 233 (jump_statement -> RETURN ; .)
    CONSTANT        reduce using rule 233 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 233 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 233 (jump_statement -> RETURN ; .)


state 240

    (234) jump_statement -> RETURN expression . ;
    (162) expression -> expression . , assignment_expression

    ;               shift and go to state 320
    ,               shift and go to state 230


state 241

    (76) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression . ]

    ]               shift and go to state 321


state 242

    (77) direct_declarator -> direct_declarator [ type_qualifier_list ] .

    [               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    (               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    =               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    {               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    TYPEDEF         reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    EXTERN          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STATIC          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    AUTO            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    REGISTER        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOID            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CHAR            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SHORT           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INT             reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    LONG            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    FLOAT           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    DOUBLE          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    SIGNED          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNSIGNED        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    BOOL            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    CONST           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    RESTRICT        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    VOLATILE        reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    INLINE          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ENUM            reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    STRUCT          reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    UNION           reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ;               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    ,               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    )               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)
    :               reduce using rule 77 (direct_declarator -> direct_declarator [ type_qualifier_list ] .)


state 243

    (80) direct_declarator -> direct_declarator [ type_qualifier_list STATIC . assignment_expression ]
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 322
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 244

    (81) direct_declarator -> direct_declarator [ type_qualifier_list * . ]
    (142) unary_operator -> * .

    ]               shift and go to state 323
    (               reduce using rule 142 (unary_operator -> * .)
    INC_OP          reduce using rule 142 (unary_operator -> * .)
    DEC_OP          reduce using rule 142 (unary_operator -> * .)
    SIZEOF          reduce using rule 142 (unary_operator -> * .)
    &               reduce using rule 142 (unary_operator -> * .)
    *               reduce using rule 142 (unary_operator -> * .)
    +               reduce using rule 142 (unary_operator -> * .)
    -               reduce using rule 142 (unary_operator -> * .)
    ~               reduce using rule 142 (unary_operator -> * .)
    !               reduce using rule 142 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 142 (unary_operator -> * .)
    CONSTANT        reduce using rule 142 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_operator -> * .)


state 245

    (78) direct_declarator -> direct_declarator [ assignment_expression ] .

    [               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    (               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    =               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    {               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    TYPEDEF         reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    EXTERN          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STATIC          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    AUTO            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    REGISTER        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOID            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CHAR            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SHORT           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INT             reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    LONG            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    FLOAT           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    DOUBLE          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    SIGNED          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNSIGNED        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    BOOL            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    CONST           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    RESTRICT        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    VOLATILE        reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    INLINE          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ENUM            reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    STRUCT          reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    UNION           reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ;               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    ,               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    )               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)
    :               reduce using rule 78 (direct_declarator -> direct_declarator [ assignment_expression ] .)


state 246

    (79) direct_declarator -> direct_declarator [ STATIC type_qualifier_list . assignment_expression ]
    (73) type_qualifier_list -> type_qualifier_list . type_qualifier
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 324
    type_qualifier                 shift and go to state 153
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 247

    (82) direct_declarator -> direct_declarator [ * ] .

    [               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    (               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    =               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    {               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    TYPEDEF         reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    EXTERN          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    STATIC          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    AUTO            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    REGISTER        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    VOID            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    CHAR            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    SHORT           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    INT             reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    LONG            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    FLOAT           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    DOUBLE          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    SIGNED          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    UNSIGNED        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    BOOL            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    CONST           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    RESTRICT        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    VOLATILE        reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    INLINE          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    ENUM            reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    STRUCT          reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    UNION           reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    ;               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    ,               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    )               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)
    :               reduce using rule 82 (direct_declarator -> direct_declarator [ * ] .)


state 248

    (84) direct_declarator -> direct_declarator ( parameter_type_list ) .

    [               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    (               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    =               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    TYPEDEF         reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    EXTERN          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STATIC          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    AUTO            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    REGISTER        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOID            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CHAR            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SHORT           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INT             reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    LONG            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    FLOAT           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    DOUBLE          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SIGNED          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNSIGNED        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    BOOL            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CONST           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    RESTRICT        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOLATILE        reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INLINE          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ENUM            reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STRUCT          reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNION           reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    :               reduce using rule 84 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 249

    (85) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    TYPEDEF         reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    EXTERN          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STATIC          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    AUTO            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    REGISTER        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SHORT           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    LONG            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    FLOAT           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    DOUBLE          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SIGNED          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNSIGNED        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    BOOL            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CONST           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    RESTRICT        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOLATILE        reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INLINE          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ENUM            reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNION           reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 85 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 250

    (88) identifier_list -> identifier_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 325


state 251

    (180) parameter_type_list -> parameter_list , . ELLIPSIS
    (182) parameter_list -> parameter_list , . parameter_declaration
    (183) parameter_declaration -> . declaration_specifiers declarator
    (184) parameter_declaration -> . declaration_specifiers abstract_declarator
    (185) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 326
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_declaration          shift and go to state 327
    declaration_specifiers         shift and go to state 151
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 252

    (183) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 183 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 183 (parameter_declaration -> declaration_specifiers declarator .)


state 253

    (184) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 184 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 184 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 254

    (66) declarator -> pointer . direct_declarator
    (165) abstract_declarator -> pointer .
    (167) abstract_declarator -> pointer . direct_abstract_declarator
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (168) direct_abstract_declarator -> . ( abstract_declarator )
    (169) direct_abstract_declarator -> . [ ]
    (170) direct_abstract_declarator -> . [ assignment_expression ]
    (171) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (172) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (173) direct_abstract_declarator -> . [ * ]
    (174) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (175) direct_abstract_declarator -> . ( )
    (176) direct_abstract_declarator -> . ( parameter_type_list )
    (177) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (178) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 165 (abstract_declarator -> pointer .)
    )               reduce using rule 165 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 256
    [               shift and go to state 257

    direct_declarator              shift and go to state 61
    direct_abstract_declarator     shift and go to state 328

state 255

    (166) abstract_declarator -> direct_abstract_declarator .
    (171) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (172) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (174) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (177) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (178) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 166 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 166 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 329
    (               shift and go to state 330


state 256

    (75) direct_declarator -> ( . declarator )
    (168) direct_abstract_declarator -> ( . abstract_declarator )
    (175) direct_abstract_declarator -> ( . )
    (176) direct_abstract_declarator -> ( . parameter_type_list )
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (165) abstract_declarator -> . pointer
    (166) abstract_declarator -> . direct_abstract_declarator
    (167) abstract_declarator -> . pointer direct_abstract_declarator
    (179) parameter_type_list -> . parameter_list
    (180) parameter_type_list -> . parameter_list , ELLIPSIS
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )
    (168) direct_abstract_declarator -> . ( abstract_declarator )
    (169) direct_abstract_declarator -> . [ ]
    (170) direct_abstract_declarator -> . [ assignment_expression ]
    (171) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (172) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (173) direct_abstract_declarator -> . [ * ]
    (174) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (175) direct_abstract_declarator -> . ( )
    (176) direct_abstract_declarator -> . ( parameter_type_list )
    (177) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (178) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (181) parameter_list -> . parameter_declaration
    (182) parameter_list -> . parameter_list , parameter_declaration
    (183) parameter_declaration -> . declaration_specifiers declarator
    (184) parameter_declaration -> . declaration_specifiers abstract_declarator
    (185) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 331
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 256
    [               shift and go to state 257
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    declarator                     shift and go to state 67
    abstract_declarator            shift and go to state 332
    parameter_type_list            shift and go to state 333
    pointer                        shift and go to state 254
    direct_declarator              shift and go to state 40
    direct_abstract_declarator     shift and go to state 255
    parameter_list                 shift and go to state 148
    parameter_declaration          shift and go to state 150
    declaration_specifiers         shift and go to state 151
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 257

    (169) direct_abstract_declarator -> [ . ]
    (170) direct_abstract_declarator -> [ . assignment_expression ]
    (173) direct_abstract_declarator -> [ . * ]
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 334
    *               shift and go to state 336
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 335
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 258

    (49) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .

    TYPEDEF         reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    EXTERN          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STATIC          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    AUTO            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    REGISTER        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOID            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CHAR            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SHORT           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INT             reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    LONG            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    FLOAT           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    DOUBLE          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SIGNED          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNSIGNED        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    BOOL            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CONST           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    RESTRICT        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOLATILE        reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INLINE          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ENUM            reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STRUCT          reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNION           reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ;               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    *               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    (               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    [               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ,               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    )               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    :               reduce using rule 49 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)


state 259

    (56) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    RESTRICT        reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 56 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 260

    (62) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (63) struct_declarator -> . declarator
    (64) struct_declarator -> . : constant_expression
    (65) struct_declarator -> . declarator : constant_expression
    (66) declarator -> . pointer direct_declarator
    (67) declarator -> . direct_declarator
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (74) direct_declarator -> . IDENTIFIER
    (75) direct_declarator -> . ( declarator )
    (76) direct_declarator -> . direct_declarator [ type_qualifier_list assignment_expression ]
    (77) direct_declarator -> . direct_declarator [ type_qualifier_list ]
    (78) direct_declarator -> . direct_declarator [ assignment_expression ]
    (79) direct_declarator -> . direct_declarator [ STATIC type_qualifier_list assignment_expression ]
    (80) direct_declarator -> . direct_declarator [ type_qualifier_list STATIC assignment_expression ]
    (81) direct_declarator -> . direct_declarator [ type_qualifier_list * ]
    (82) direct_declarator -> . direct_declarator [ * ]
    (83) direct_declarator -> . direct_declarator [ ]
    (84) direct_declarator -> . direct_declarator ( parameter_type_list )
    (85) direct_declarator -> . direct_declarator ( identifier_list )
    (86) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 161
    *               shift and go to state 42
    IDENTIFIER      shift and go to state 43
    (               shift and go to state 44

    struct_declarator              shift and go to state 337
    declarator                     shift and go to state 160
    pointer                        shift and go to state 39
    direct_declarator              shift and go to state 40

state 261

    (65) struct_declarator -> declarator : . constant_expression
    (102) constant_expression -> . conditional_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    constant_expression            shift and go to state 338
    conditional_expression         shift and go to state 227
    logical_or_expression          shift and go to state 86
    logical_and_expression         shift and go to state 94
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 262

    (64) struct_declarator -> : constant_expression .

    ;               reduce using rule 64 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 64 (struct_declarator -> : constant_expression .)


state 263

    (42) enum_specifier -> ENUM { enumerator_list , } .

    TYPEDEF         reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    EXTERN          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    STATIC          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    AUTO            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    REGISTER        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    VOID            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    CHAR            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    SHORT           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    INT             reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    LONG            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    FLOAT           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    DOUBLE          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    SIGNED          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    UNSIGNED        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    BOOL            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    CONST           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    RESTRICT        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    VOLATILE        reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    INLINE          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    ENUM            reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    STRUCT          reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    UNION           reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    ;               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    *               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    IDENTIFIER      reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    (               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    [               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    ,               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    )               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)
    :               reduce using rule 42 (enum_specifier -> ENUM { enumerator_list , } .)


state 264

    (46) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 46 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 46 (enumerator_list -> enumerator_list , enumerator .)


state 265

    (48) enumerator -> IDENTIFIER = constant_expression .

    }               reduce using rule 48 (enumerator -> IDENTIFIER = constant_expression .)
    ,               reduce using rule 48 (enumerator -> IDENTIFIER = constant_expression .)


state 266

    (41) enum_specifier -> ENUM IDENTIFIER { enumerator_list } .

    TYPEDEF         reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    EXTERN          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STATIC          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    AUTO            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    REGISTER        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOID            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CHAR            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SHORT           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INT             reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    LONG            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    FLOAT           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    DOUBLE          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SIGNED          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNSIGNED        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    BOOL            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CONST           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    RESTRICT        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOLATILE        reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INLINE          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ENUM            reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STRUCT          reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNION           reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ;               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    *               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    IDENTIFIER      reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    (               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    [               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ,               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    )               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    :               reduce using rule 41 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)


state 267

    (43) enum_specifier -> ENUM IDENTIFIER { enumerator_list , . }
    (46) enumerator_list -> enumerator_list , . enumerator
    (47) enumerator -> . IDENTIFIER
    (48) enumerator -> . IDENTIFIER = constant_expression

    }               shift and go to state 339
    IDENTIFIER      shift and go to state 76

    enumerator                     shift and go to state 264

state 268

    (193) initializer -> { initializer_list } .

    ;               reduce using rule 193 (initializer -> { initializer_list } .)
    ,               reduce using rule 193 (initializer -> { initializer_list } .)
    }               reduce using rule 193 (initializer -> { initializer_list } .)


state 269

    (194) initializer -> { initializer_list , . }
    (190) initializer_list -> initializer_list , . initializer
    (191) initializer_list -> initializer_list , . designation initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (195) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (196) designator_list -> . designator
    (197) designator_list -> . designator_list designator
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (198) designator -> . [ constant_expression ]
    (199) designator -> . . IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 340
    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    [               shift and go to state 173
    .               shift and go to state 174
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer                    shift and go to state 341
    designation                    shift and go to state 342
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 171
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 172
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 270

    (189) initializer_list -> designation initializer .

    }               reduce using rule 189 (initializer_list -> designation initializer .)
    ,               reduce using rule 189 (initializer_list -> designation initializer .)


state 271

    (195) designation -> designator_list = .

    {               reduce using rule 195 (designation -> designator_list = .)
    INC_OP          reduce using rule 195 (designation -> designator_list = .)
    DEC_OP          reduce using rule 195 (designation -> designator_list = .)
    SIZEOF          reduce using rule 195 (designation -> designator_list = .)
    (               reduce using rule 195 (designation -> designator_list = .)
    &               reduce using rule 195 (designation -> designator_list = .)
    *               reduce using rule 195 (designation -> designator_list = .)
    +               reduce using rule 195 (designation -> designator_list = .)
    -               reduce using rule 195 (designation -> designator_list = .)
    ~               reduce using rule 195 (designation -> designator_list = .)
    !               reduce using rule 195 (designation -> designator_list = .)
    IDENTIFIER      reduce using rule 195 (designation -> designator_list = .)
    CONSTANT        reduce using rule 195 (designation -> designator_list = .)
    STRING_LITERAL  reduce using rule 195 (designation -> designator_list = .)


state 272

    (197) designator_list -> designator_list designator .

    =               reduce using rule 197 (designator_list -> designator_list designator .)
    [               reduce using rule 197 (designator_list -> designator_list designator .)
    .               reduce using rule 197 (designator_list -> designator_list designator .)


state 273

    (198) designator -> [ constant_expression . ]

    ]               shift and go to state 343


state 274

    (199) designator -> . IDENTIFIER .

    =               reduce using rule 199 (designator -> . IDENTIFIER .)
    [               reduce using rule 199 (designator -> . IDENTIFIER .)
    .               reduce using rule 199 (designator -> . IDENTIFIER .)


state 275

    (90) assignment_expression -> unary_expression assignment_operator assignment_expression .

    ;               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    }               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 90 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 276

    (104) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (162) expression -> expression . , assignment_expression

    :               shift and go to state 344
    ,               shift and go to state 230


state 277

    (106) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (108) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 106 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 206


state 278

    (148) postfix_expression -> postfix_expression [ expression . ]
    (162) expression -> expression . , assignment_expression

    ]               shift and go to state 345
    ,               shift and go to state 230


state 279

    (149) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    INC_OP          reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    DEC_OP          reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    MUL_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    DIV_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    MOD_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    SUB_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    LEFT_ASSIGN     reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_ASSIGN    reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    AND_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    XOR_ASSIGN      reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    OR_ASSIGN       reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    LE_OP           reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    GE_OP           reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    NE_OP           reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 149 (postfix_expression -> postfix_expression ( ) .)


state 280

    (150) postfix_expression -> postfix_expression ( argument_expression_list . )
    (187) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 346
    ,               shift and go to state 347


state 281

    (186) argument_expression_list -> assignment_expression .

    )               reduce using rule 186 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 186 (argument_expression_list -> assignment_expression .)


state 282

    (151) postfix_expression -> postfix_expression . IDENTIFIER .

    [               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    (               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    .               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    PTR_OP          reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INC_OP          reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DEC_OP          reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    =               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_ASSIGN       reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    *               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    /               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    %               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    +               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    -               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_OP         reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_OP        reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    <               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    >               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LE_OP           reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    GE_OP           reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EQ_OP           reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    NE_OP           reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    &               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ^               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    |               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_OP          reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ?               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_OP           reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ;               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ,               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ]               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    }               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    )               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)
    :               reduce using rule 151 (postfix_expression -> postfix_expression . IDENTIFIER .)


state 283

    (152) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    [               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    (               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    .               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    =               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    *               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    /               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    %               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    +               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    -               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    <               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    >               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    &               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ^               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    |               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ?               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ;               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ,               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ]               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    }               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    )               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    :               reduce using rule 152 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 284

    (155) postfix_expression -> ( type_name . ) { initializer_list }
    (156) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 348


state 285

    (134) cast_expression -> ( type_name . ) cast_expression
    (155) postfix_expression -> ( type_name . ) { initializer_list }
    (156) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 349


state 286

    (140) unary_expression -> SIZEOF ( type_name . )
    (155) postfix_expression -> ( type_name . ) { initializer_list }
    (156) postfix_expression -> ( type_name . ) { initializer_list , }

    )               shift and go to state 350


state 287

    (155) postfix_expression -> ( type_name ) . { initializer_list }
    (156) postfix_expression -> ( type_name ) . { initializer_list , }
    (134) cast_expression -> ( type_name ) . cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    {               shift and go to state 351
    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expression                shift and go to state 352
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 288

    (160) primary_expression -> ( expression ) .

    [               reduce using rule 160 (primary_expression -> ( expression ) .)
    (               reduce using rule 160 (primary_expression -> ( expression ) .)
    .               reduce using rule 160 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 160 (primary_expression -> ( expression ) .)
    INC_OP          reduce using rule 160 (primary_expression -> ( expression ) .)
    DEC_OP          reduce using rule 160 (primary_expression -> ( expression ) .)
    =               reduce using rule 160 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 160 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 160 (primary_expression -> ( expression ) .)
    AND_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    XOR_ASSIGN      reduce using rule 160 (primary_expression -> ( expression ) .)
    OR_ASSIGN       reduce using rule 160 (primary_expression -> ( expression ) .)
    *               reduce using rule 160 (primary_expression -> ( expression ) .)
    /               reduce using rule 160 (primary_expression -> ( expression ) .)
    %               reduce using rule 160 (primary_expression -> ( expression ) .)
    +               reduce using rule 160 (primary_expression -> ( expression ) .)
    -               reduce using rule 160 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 160 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 160 (primary_expression -> ( expression ) .)
    <               reduce using rule 160 (primary_expression -> ( expression ) .)
    >               reduce using rule 160 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 160 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 160 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 160 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 160 (primary_expression -> ( expression ) .)
    &               reduce using rule 160 (primary_expression -> ( expression ) .)
    ^               reduce using rule 160 (primary_expression -> ( expression ) .)
    |               reduce using rule 160 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 160 (primary_expression -> ( expression ) .)
    ?               reduce using rule 160 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 160 (primary_expression -> ( expression ) .)
    ;               reduce using rule 160 (primary_expression -> ( expression ) .)
    ,               reduce using rule 160 (primary_expression -> ( expression ) .)
    ]               reduce using rule 160 (primary_expression -> ( expression ) .)
    }               reduce using rule 160 (primary_expression -> ( expression ) .)
    )               reduce using rule 160 (primary_expression -> ( expression ) .)
    :               reduce using rule 160 (primary_expression -> ( expression ) .)


state 289

    (164) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 164 (type_name -> specifier_qualifier_list abstract_declarator .)


state 290

    (165) abstract_declarator -> pointer .
    (167) abstract_declarator -> pointer . direct_abstract_declarator
    (168) direct_abstract_declarator -> . ( abstract_declarator )
    (169) direct_abstract_declarator -> . [ ]
    (170) direct_abstract_declarator -> . [ assignment_expression ]
    (171) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (172) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (173) direct_abstract_declarator -> . [ * ]
    (174) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (175) direct_abstract_declarator -> . ( )
    (176) direct_abstract_declarator -> . ( parameter_type_list )
    (177) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (178) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 165 (abstract_declarator -> pointer .)
    (               shift and go to state 291
    [               shift and go to state 257

    direct_abstract_declarator     shift and go to state 328

state 291

    (168) direct_abstract_declarator -> ( . abstract_declarator )
    (175) direct_abstract_declarator -> ( . )
    (176) direct_abstract_declarator -> ( . parameter_type_list )
    (165) abstract_declarator -> . pointer
    (166) abstract_declarator -> . direct_abstract_declarator
    (167) abstract_declarator -> . pointer direct_abstract_declarator
    (179) parameter_type_list -> . parameter_list
    (180) parameter_type_list -> . parameter_list , ELLIPSIS
    (68) pointer -> . *
    (69) pointer -> . * type_qualifier_list
    (70) pointer -> . * pointer
    (71) pointer -> . * type_qualifier_list pointer
    (168) direct_abstract_declarator -> . ( abstract_declarator )
    (169) direct_abstract_declarator -> . [ ]
    (170) direct_abstract_declarator -> . [ assignment_expression ]
    (171) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (172) direct_abstract_declarator -> . direct_abstract_declarator [ assignment_expression ]
    (173) direct_abstract_declarator -> . [ * ]
    (174) direct_abstract_declarator -> . direct_abstract_declarator [ * ]
    (175) direct_abstract_declarator -> . ( )
    (176) direct_abstract_declarator -> . ( parameter_type_list )
    (177) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (178) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (181) parameter_list -> . parameter_declaration
    (182) parameter_list -> . parameter_list , parameter_declaration
    (183) parameter_declaration -> . declaration_specifiers declarator
    (184) parameter_declaration -> . declaration_specifiers abstract_declarator
    (185) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 331
    *               shift and go to state 42
    (               shift and go to state 291
    [               shift and go to state 257
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    abstract_declarator            shift and go to state 332
    parameter_type_list            shift and go to state 333
    pointer                        shift and go to state 290
    direct_abstract_declarator     shift and go to state 255
    parameter_list                 shift and go to state 148
    parameter_declaration          shift and go to state 150
    declaration_specifiers         shift and go to state 151
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 292

    (108) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (110) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 108 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 207


state 293

    (110) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (112) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 110 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 208


state 294

    (112) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (114) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 112 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 209


state 295

    (114) and_expression -> and_expression & equality_expression .
    (116) equality_expression -> equality_expression . EQ_OP relational_expression
    (117) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 114 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 210
    NE_OP           shift and go to state 211


state 296

    (116) equality_expression -> equality_expression EQ_OP relational_expression .
    (119) relational_expression -> relational_expression . < shift_expression
    (120) relational_expression -> relational_expression . > shift_expression
    (121) relational_expression -> relational_expression . LE_OP shift_expression
    (122) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ?               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ;               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ]               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    }               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 116 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 212
    >               shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 297

    (117) equality_expression -> equality_expression NE_OP relational_expression .
    (119) relational_expression -> relational_expression . < shift_expression
    (120) relational_expression -> relational_expression . > shift_expression
    (121) relational_expression -> relational_expression . LE_OP shift_expression
    (122) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    ?               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    ;               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    ]               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    }               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 117 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 212
    >               shift and go to state 213
    LE_OP           shift and go to state 214
    GE_OP           shift and go to state 215


state 298

    (119) relational_expression -> relational_expression < shift_expression .
    (124) shift_expression -> shift_expression . LEFT_OP additive_expression
    (125) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 119 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 299

    (120) relational_expression -> relational_expression > shift_expression .
    (124) shift_expression -> shift_expression . LEFT_OP additive_expression
    (125) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 120 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 300

    (121) relational_expression -> relational_expression LE_OP shift_expression .
    (124) shift_expression -> shift_expression . LEFT_OP additive_expression
    (125) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    ?               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    ;               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    ]               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    }               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 121 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 301

    (122) relational_expression -> relational_expression GE_OP shift_expression .
    (124) shift_expression -> shift_expression . LEFT_OP additive_expression
    (125) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    ?               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    ;               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    ]               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    }               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 122 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 216
    RIGHT_OP        shift and go to state 217


state 302

    (124) shift_expression -> shift_expression LEFT_OP additive_expression .
    (127) additive_expression -> additive_expression . + multiplicative_expression
    (128) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ?               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ;               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ]               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    }               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 124 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 218
    -               shift and go to state 219


state 303

    (125) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (127) additive_expression -> additive_expression . + multiplicative_expression
    (128) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ?               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ;               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ]               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    }               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 125 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 218
    -               shift and go to state 219


state 304

    (127) additive_expression -> additive_expression + multiplicative_expression .
    (130) multiplicative_expression -> multiplicative_expression . * cast_expression
    (131) multiplicative_expression -> multiplicative_expression . / cast_expression
    (132) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 127 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 220
    /               shift and go to state 221
    %               shift and go to state 222


state 305

    (128) additive_expression -> additive_expression - multiplicative_expression .
    (130) multiplicative_expression -> multiplicative_expression . * cast_expression
    (131) multiplicative_expression -> multiplicative_expression . / cast_expression
    (132) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 128 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 220
    /               shift and go to state 221
    %               shift and go to state 222


state 306

    (130) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LEFT_OP         reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RIGHT_OP        reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE_OP           reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_OP           reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_OP           reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE_OP           reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 130 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 307

    (131) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LEFT_OP         reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RIGHT_OP        reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE_OP           reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_OP           reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_OP           reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE_OP           reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 131 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 308

    (132) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LEFT_OP         reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RIGHT_OP        reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE_OP           reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_OP           reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_OP           reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE_OP           reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 132 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 309

    (216) labeled_statement -> IDENTIFIER : statement .

    }               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    IDENTIFIER      reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    CASE            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    DEFAULT         reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    {               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    ;               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    IF              reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    SWITCH          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    WHILE           reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    DO              reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    FOR             reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    GOTO            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    CONTINUE        reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    BREAK           reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    RETURN          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    TYPEDEF         reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    EXTERN          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    STATIC          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    AUTO            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    REGISTER        reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    VOID            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    CHAR            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    SHORT           reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    INT             reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    LONG            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    FLOAT           reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    DOUBLE          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    SIGNED          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    UNSIGNED        reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    BOOL            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    CONST           reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    RESTRICT        reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    VOLATILE        reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    INLINE          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    ENUM            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    STRUCT          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    UNION           reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    INC_OP          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    DEC_OP          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    SIZEOF          reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    (               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    &               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    *               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    +               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    -               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    ~               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    !               reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    CONSTANT        reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    STRING_LITERAL  reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)
    ELSE            reduce using rule 216 (labeled_statement -> IDENTIFIER : statement .)


state 310

    (217) labeled_statement -> CASE constant_expression : . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    statement                      shift and go to state 353
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 311

    (218) labeled_statement -> DEFAULT : statement .

    }               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    IDENTIFIER      reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    CASE            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    DEFAULT         reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    {               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    ;               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    IF              reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    SWITCH          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    WHILE           reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    DO              reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    FOR             reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    GOTO            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    CONTINUE        reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    BREAK           reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    RETURN          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    TYPEDEF         reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    EXTERN          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    STATIC          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    AUTO            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    REGISTER        reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    VOID            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    CHAR            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    SHORT           reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    INT             reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    LONG            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    FLOAT           reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    DOUBLE          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    SIGNED          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    UNSIGNED        reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    BOOL            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    CONST           reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    RESTRICT        reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    VOLATILE        reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    INLINE          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    ENUM            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    STRUCT          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    UNION           reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    INC_OP          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    DEC_OP          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    SIZEOF          reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    (               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    &               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    *               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    +               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    -               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    ~               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    !               reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    CONSTANT        reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 218 (labeled_statement -> DEFAULT : statement .)
    ELSE            reduce using rule 218 (labeled_statement -> DEFAULT : statement .)


state 312

    (162) expression -> expression , assignment_expression .

    ;               reduce using rule 162 (expression -> expression , assignment_expression .)
    ,               reduce using rule 162 (expression -> expression , assignment_expression .)
    )               reduce using rule 162 (expression -> expression , assignment_expression .)
    :               reduce using rule 162 (expression -> expression , assignment_expression .)
    ]               reduce using rule 162 (expression -> expression , assignment_expression .)


state 313

    (221) selection_statement -> IF ( expression . ) statement ELSE statement
    (222) selection_statement -> IF ( expression . ) statement
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 354
    ,               shift and go to state 230


state 314

    (223) selection_statement -> SWITCH ( expression . ) statement
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 355
    ,               shift and go to state 230


state 315

    (224) iteration_statement -> WHILE ( expression . ) statement
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 356
    ,               shift and go to state 230


state 316

    (225) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 357


state 317

    (226) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (227) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 118
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 358
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 318

    (228) iteration_statement -> FOR ( declaration . expression_statement ) statement
    (229) iteration_statement -> FOR ( declaration . expression_statement expression ) statement
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 118
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 359
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 319

    (230) jump_statement -> GOTO IDENTIFIER ; .

    }               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    CASE            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    DEFAULT         reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    {               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    ;               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    IF              reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    SWITCH          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    WHILE           reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    DO              reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    FOR             reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    GOTO            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    CONTINUE        reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    BREAK           reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    RETURN          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    TYPEDEF         reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    EXTERN          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    STATIC          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    AUTO            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    REGISTER        reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    VOID            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    CHAR            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    SHORT           reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    INT             reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    LONG            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    FLOAT           reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    DOUBLE          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    SIGNED          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    UNSIGNED        reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    BOOL            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    CONST           reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    RESTRICT        reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    VOLATILE        reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    INLINE          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    ENUM            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    STRUCT          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    UNION           reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    INC_OP          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    DEC_OP          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    SIZEOF          reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    (               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    &               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    *               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    +               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    -               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    ~               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    !               reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    CONSTANT        reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)
    ELSE            reduce using rule 230 (jump_statement -> GOTO IDENTIFIER ; .)


state 320

    (234) jump_statement -> RETURN expression ; .

    }               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 234 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 234 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 234 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 234 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 234 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 234 (jump_statement -> RETURN expression ; .)
    GOTO            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 234 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 234 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    TYPEDEF         reduce using rule 234 (jump_statement -> RETURN expression ; .)
    EXTERN          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    STATIC          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    AUTO            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    REGISTER        reduce using rule 234 (jump_statement -> RETURN expression ; .)
    VOID            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    CHAR            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    SHORT           reduce using rule 234 (jump_statement -> RETURN expression ; .)
    INT             reduce using rule 234 (jump_statement -> RETURN expression ; .)
    LONG            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 234 (jump_statement -> RETURN expression ; .)
    DOUBLE          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    SIGNED          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    UNSIGNED        reduce using rule 234 (jump_statement -> RETURN expression ; .)
    BOOL            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    CONST           reduce using rule 234 (jump_statement -> RETURN expression ; .)
    RESTRICT        reduce using rule 234 (jump_statement -> RETURN expression ; .)
    VOLATILE        reduce using rule 234 (jump_statement -> RETURN expression ; .)
    INLINE          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    ENUM            reduce using rule 234 (jump_statement -> RETURN expression ; .)
    STRUCT          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    UNION           reduce using rule 234 (jump_statement -> RETURN expression ; .)
    INC_OP          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    DEC_OP          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 234 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 234 (jump_statement -> RETURN expression ; .)
    CONSTANT        reduce using rule 234 (jump_statement -> RETURN expression ; .)
    STRING_LITERAL  reduce using rule 234 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 234 (jump_statement -> RETURN expression ; .)


state 321

    (76) direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .

    [               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    (               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    =               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    {               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    )               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)
    :               reduce using rule 76 (direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ] .)


state 322

    (80) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression . ]

    ]               shift and go to state 360


state 323

    (81) direct_declarator -> direct_declarator [ type_qualifier_list * ] .

    [               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    (               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    =               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    {               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    TYPEDEF         reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    EXTERN          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STATIC          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    AUTO            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    REGISTER        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOID            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CHAR            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SHORT           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INT             reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    LONG            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    FLOAT           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    DOUBLE          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    SIGNED          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNSIGNED        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    BOOL            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    CONST           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    RESTRICT        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    VOLATILE        reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    INLINE          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ENUM            reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    STRUCT          reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    UNION           reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ;               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    ,               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    )               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)
    :               reduce using rule 81 (direct_declarator -> direct_declarator [ type_qualifier_list * ] .)


state 324

    (79) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression . ]

    ]               shift and go to state 361


state 325

    (88) identifier_list -> identifier_list , IDENTIFIER .

    )               reduce using rule 88 (identifier_list -> identifier_list , IDENTIFIER .)
    ,               reduce using rule 88 (identifier_list -> identifier_list , IDENTIFIER .)


state 326

    (180) parameter_type_list -> parameter_list , ELLIPSIS .

    )               reduce using rule 180 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 327

    (182) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 182 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 182 (parameter_list -> parameter_list , parameter_declaration .)


state 328

    (167) abstract_declarator -> pointer direct_abstract_declarator .
    (171) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (172) direct_abstract_declarator -> direct_abstract_declarator . [ assignment_expression ]
    (174) direct_abstract_declarator -> direct_abstract_declarator . [ * ]
    (177) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (178) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    ,               reduce using rule 167 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 167 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 329
    (               shift and go to state 330


state 329

    (171) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (172) direct_abstract_declarator -> direct_abstract_declarator [ . assignment_expression ]
    (174) direct_abstract_declarator -> direct_abstract_declarator [ . * ]
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    ]               shift and go to state 362
    *               shift and go to state 364
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 363
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 330

    (177) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (178) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_type_list )
    (179) parameter_type_list -> . parameter_list
    (180) parameter_type_list -> . parameter_list , ELLIPSIS
    (181) parameter_list -> . parameter_declaration
    (182) parameter_list -> . parameter_list , parameter_declaration
    (183) parameter_declaration -> . declaration_specifiers declarator
    (184) parameter_declaration -> . declaration_specifiers abstract_declarator
    (185) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier
    (12) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (13) declaration_specifiers -> . type_specifier
    (14) declaration_specifiers -> . type_specifier declaration_specifiers
    (15) declaration_specifiers -> . type_qualifier
    (16) declaration_specifiers -> . type_qualifier declaration_specifiers
    (17) declaration_specifiers -> . function_specifier
    (18) declaration_specifiers -> . function_specifier declaration_specifiers
    (19) storage_class_specifier -> . TYPEDEF
    (20) storage_class_specifier -> . EXTERN
    (21) storage_class_specifier -> . STATIC
    (22) storage_class_specifier -> . AUTO
    (23) storage_class_specifier -> . REGISTER
    (25) type_specifier -> . VOID
    (26) type_specifier -> . CHAR
    (27) type_specifier -> . SHORT
    (28) type_specifier -> . INT
    (29) type_specifier -> . LONG
    (30) type_specifier -> . FLOAT
    (31) type_specifier -> . DOUBLE
    (32) type_specifier -> . SIGNED
    (33) type_specifier -> . UNSIGNED
    (34) type_specifier -> . BOOL
    (35) type_specifier -> . struct_or_union_specifier
    (36) type_specifier -> . enum_specifier
    (37) type_qualifier -> . CONST
    (38) type_qualifier -> . RESTRICT
    (39) type_qualifier -> . VOLATILE
    (24) function_specifier -> . INLINE
    (49) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (50) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (51) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (40) enum_specifier -> . ENUM { enumerator_list }
    (41) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (42) enum_specifier -> . ENUM { enumerator_list , }
    (43) enum_specifier -> . ENUM IDENTIFIER { enumerator_list , }
    (44) enum_specifier -> . ENUM IDENTIFIER
    (52) struct_or_union -> . STRUCT
    (53) struct_or_union -> . UNION

    )               shift and go to state 365
    TYPEDEF         shift and go to state 10
    EXTERN          shift and go to state 11
    STATIC          shift and go to state 12
    AUTO            shift and go to state 13
    REGISTER        shift and go to state 14
    VOID            shift and go to state 15
    CHAR            shift and go to state 16
    SHORT           shift and go to state 17
    INT             shift and go to state 18
    LONG            shift and go to state 19
    FLOAT           shift and go to state 20
    DOUBLE          shift and go to state 21
    SIGNED          shift and go to state 22
    UNSIGNED        shift and go to state 23
    BOOL            shift and go to state 24
    CONST           shift and go to state 27
    RESTRICT        shift and go to state 28
    VOLATILE        shift and go to state 29
    INLINE          shift and go to state 30
    ENUM            shift and go to state 32
    STRUCT          shift and go to state 33
    UNION           shift and go to state 34

    parameter_type_list            shift and go to state 366
    parameter_list                 shift and go to state 148
    parameter_declaration          shift and go to state 150
    declaration_specifiers         shift and go to state 151
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    function_specifier             shift and go to state 9
    struct_or_union_specifier      shift and go to state 25
    enum_specifier                 shift and go to state 26
    struct_or_union                shift and go to state 31

state 331

    (175) direct_abstract_declarator -> ( ) .

    [               reduce using rule 175 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 175 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 175 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 175 (direct_abstract_declarator -> ( ) .)


state 332

    (168) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 367


state 333

    (176) direct_abstract_declarator -> ( parameter_type_list . )

    )               shift and go to state 368


state 334

    (169) direct_abstract_declarator -> [ ] .

    [               reduce using rule 169 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 169 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 169 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 169 (direct_abstract_declarator -> [ ] .)


state 335

    (170) direct_abstract_declarator -> [ assignment_expression . ]

    ]               shift and go to state 369


state 336

    (173) direct_abstract_declarator -> [ * . ]
    (142) unary_operator -> * .

    ]               shift and go to state 370
    (               reduce using rule 142 (unary_operator -> * .)
    INC_OP          reduce using rule 142 (unary_operator -> * .)
    DEC_OP          reduce using rule 142 (unary_operator -> * .)
    SIZEOF          reduce using rule 142 (unary_operator -> * .)
    &               reduce using rule 142 (unary_operator -> * .)
    *               reduce using rule 142 (unary_operator -> * .)
    +               reduce using rule 142 (unary_operator -> * .)
    -               reduce using rule 142 (unary_operator -> * .)
    ~               reduce using rule 142 (unary_operator -> * .)
    !               reduce using rule 142 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 142 (unary_operator -> * .)
    CONSTANT        reduce using rule 142 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_operator -> * .)


state 337

    (62) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 62 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 62 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 338

    (65) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 65 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 65 (struct_declarator -> declarator : constant_expression .)


state 339

    (43) enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .

    TYPEDEF         reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    EXTERN          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STATIC          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    AUTO            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    REGISTER        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOID            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CHAR            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SHORT           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INT             reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    LONG            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    FLOAT           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    DOUBLE          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    SIGNED          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNSIGNED        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    BOOL            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    CONST           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    RESTRICT        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    VOLATILE        reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    INLINE          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ENUM            reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    STRUCT          reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    UNION           reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ;               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    *               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    IDENTIFIER      reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    (               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    [               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    ,               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    )               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)
    :               reduce using rule 43 (enum_specifier -> ENUM IDENTIFIER { enumerator_list , } .)


state 340

    (194) initializer -> { initializer_list , } .

    ;               reduce using rule 194 (initializer -> { initializer_list , } .)
    ,               reduce using rule 194 (initializer -> { initializer_list , } .)
    }               reduce using rule 194 (initializer -> { initializer_list , } .)


state 341

    (190) initializer_list -> initializer_list , initializer .

    }               reduce using rule 190 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 190 (initializer_list -> initializer_list , initializer .)


state 342

    (191) initializer_list -> initializer_list , designation . initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer                    shift and go to state 371
    assignment_expression          shift and go to state 82
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 343

    (198) designator -> [ constant_expression ] .

    =               reduce using rule 198 (designator -> [ constant_expression ] .)
    [               reduce using rule 198 (designator -> [ constant_expression ] .)
    .               reduce using rule 198 (designator -> [ constant_expression ] .)


state 344

    (104) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    logical_or_expression          shift and go to state 86
    conditional_expression         shift and go to state 372
    logical_and_expression         shift and go to state 94
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112
    cast_expression                shift and go to state 91
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 345

    (148) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    INC_OP          reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    DEC_OP          reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_ASSIGN     reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_ASSIGN    reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    AND_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    XOR_ASSIGN      reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    OR_ASSIGN       reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 148 (postfix_expression -> postfix_expression [ expression ] .)


state 346

    (150) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_OP          reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DEC_OP          reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_ASSIGN     reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_ASSIGN    reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    XOR_ASSIGN      reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_ASSIGN       reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE_OP           reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_OP           reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE_OP           reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 150 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 347

    (187) argument_expression_list -> argument_expression_list , . assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    assignment_expression          shift and go to state 373
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 348

    (155) postfix_expression -> ( type_name ) . { initializer_list }
    (156) postfix_expression -> ( type_name ) . { initializer_list , }

    {               shift and go to state 351


state 349

    (134) cast_expression -> ( type_name ) . cast_expression
    (155) postfix_expression -> ( type_name ) . { initializer_list }
    (156) postfix_expression -> ( type_name ) . { initializer_list , }
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )

    {               shift and go to state 351
    (               shift and go to state 200
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    cast_expression                shift and go to state 352
    unary_expression               shift and go to state 199
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 95

state 350

    (140) unary_expression -> SIZEOF ( type_name ) .
    (155) postfix_expression -> ( type_name ) . { initializer_list }
    (156) postfix_expression -> ( type_name ) . { initializer_list , }

    =               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    MUL_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    DIV_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    MOD_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    ADD_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    SUB_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_ASSIGN     reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_ASSIGN    reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    AND_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    XOR_ASSIGN      reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    OR_ASSIGN       reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    *               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_OP         reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_OP        reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    LE_OP           reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    GE_OP           reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_OP           reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    NE_OP           reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 140 (unary_expression -> SIZEOF ( type_name ) .)
    {               shift and go to state 351


state 351

    (155) postfix_expression -> ( type_name ) { . initializer_list }
    (156) postfix_expression -> ( type_name ) { . initializer_list , }
    (188) initializer_list -> . initializer
    (189) initializer_list -> . designation initializer
    (190) initializer_list -> . initializer_list , initializer
    (191) initializer_list -> . initializer_list , designation initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (195) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (196) designator_list -> . designator
    (197) designator_list -> . designator_list designator
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (198) designator -> . [ constant_expression ]
    (199) designator -> . . IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    [               shift and go to state 173
    .               shift and go to state 174
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer_list               shift and go to state 374
    initializer                    shift and go to state 169
    designation                    shift and go to state 170
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 171
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 172
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 352

    (134) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_OP         reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_OP        reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    LE_OP           reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    GE_OP           reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    EQ_OP           reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    NE_OP           reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    MUL_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    DIV_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    MOD_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    ADD_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    SUB_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_ASSIGN     reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_ASSIGN    reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    AND_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    XOR_ASSIGN      reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    OR_ASSIGN       reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 134 (cast_expression -> ( type_name ) cast_expression .)


state 353

    (217) labeled_statement -> CASE constant_expression : statement .

    }               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    IDENTIFIER      reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    CASE            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    {               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    ;               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    IF              reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    WHILE           reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    DO              reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    FOR             reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    GOTO            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    BREAK           reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    RETURN          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    TYPEDEF         reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    EXTERN          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    STATIC          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    AUTO            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    REGISTER        reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    VOID            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    CHAR            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    SHORT           reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    INT             reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    LONG            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    DOUBLE          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    SIGNED          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    UNSIGNED        reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    BOOL            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    CONST           reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    RESTRICT        reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    VOLATILE        reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    INLINE          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    ENUM            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    STRUCT          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    UNION           reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    INC_OP          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    DEC_OP          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    (               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    &               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    *               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    +               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    -               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    ~               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    !               reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    CONSTANT        reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)
    ELSE            reduce using rule 217 (labeled_statement -> CASE constant_expression : statement .)


state 354

    (221) selection_statement -> IF ( expression ) . statement ELSE statement
    (222) selection_statement -> IF ( expression ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 128
    statement                      shift and go to state 375
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 355

    (223) selection_statement -> SWITCH ( expression ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 128
    statement                      shift and go to state 376
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 356

    (224) iteration_statement -> WHILE ( expression ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 128
    statement                      shift and go to state 377
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 357

    (225) iteration_statement -> DO statement WHILE ( . expression ) ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 378
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 358

    (226) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (227) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 379
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 380
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 359

    (228) iteration_statement -> FOR ( declaration expression_statement . ) statement
    (229) iteration_statement -> FOR ( declaration expression_statement . expression ) statement
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 381
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 382
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 360

    (80) direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .

    [               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    (               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    =               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    {               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    TYPEDEF         reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    EXTERN          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STATIC          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    AUTO            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    REGISTER        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOID            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CHAR            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SHORT           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INT             reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    LONG            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    FLOAT           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    DOUBLE          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    SIGNED          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNSIGNED        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    BOOL            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    CONST           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    RESTRICT        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    VOLATILE        reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    INLINE          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ENUM            reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    STRUCT          reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    UNION           reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ;               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    ,               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    )               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)
    :               reduce using rule 80 (direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ] .)


state 361

    (79) direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .

    [               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    (               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    =               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    {               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    TYPEDEF         reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    EXTERN          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STATIC          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    AUTO            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    REGISTER        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOID            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CHAR            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SHORT           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INT             reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    LONG            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    FLOAT           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    DOUBLE          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    SIGNED          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNSIGNED        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    BOOL            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    CONST           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    RESTRICT        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    VOLATILE        reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    INLINE          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ENUM            reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    STRUCT          reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    UNION           reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ;               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    ,               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    )               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)
    :               reduce using rule 79 (direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ] .)


state 362

    (171) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 171 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 363

    (172) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression . ]

    ]               shift and go to state 383


state 364

    (174) direct_abstract_declarator -> direct_abstract_declarator [ * . ]
    (142) unary_operator -> * .

    ]               shift and go to state 384
    (               reduce using rule 142 (unary_operator -> * .)
    INC_OP          reduce using rule 142 (unary_operator -> * .)
    DEC_OP          reduce using rule 142 (unary_operator -> * .)
    SIZEOF          reduce using rule 142 (unary_operator -> * .)
    &               reduce using rule 142 (unary_operator -> * .)
    *               reduce using rule 142 (unary_operator -> * .)
    +               reduce using rule 142 (unary_operator -> * .)
    -               reduce using rule 142 (unary_operator -> * .)
    ~               reduce using rule 142 (unary_operator -> * .)
    !               reduce using rule 142 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 142 (unary_operator -> * .)
    CONSTANT        reduce using rule 142 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 142 (unary_operator -> * .)


state 365

    (177) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 177 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 366

    (178) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list . )

    )               shift and go to state 385


state 367

    (168) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 168 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 168 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 168 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 168 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 368

    (176) direct_abstract_declarator -> ( parameter_type_list ) .

    [               reduce using rule 176 (direct_abstract_declarator -> ( parameter_type_list ) .)
    (               reduce using rule 176 (direct_abstract_declarator -> ( parameter_type_list ) .)
    ,               reduce using rule 176 (direct_abstract_declarator -> ( parameter_type_list ) .)
    )               reduce using rule 176 (direct_abstract_declarator -> ( parameter_type_list ) .)


state 369

    (170) direct_abstract_declarator -> [ assignment_expression ] .

    [               reduce using rule 170 (direct_abstract_declarator -> [ assignment_expression ] .)
    (               reduce using rule 170 (direct_abstract_declarator -> [ assignment_expression ] .)
    ,               reduce using rule 170 (direct_abstract_declarator -> [ assignment_expression ] .)
    )               reduce using rule 170 (direct_abstract_declarator -> [ assignment_expression ] .)


state 370

    (173) direct_abstract_declarator -> [ * ] .

    [               reduce using rule 173 (direct_abstract_declarator -> [ * ] .)
    (               reduce using rule 173 (direct_abstract_declarator -> [ * ] .)
    ,               reduce using rule 173 (direct_abstract_declarator -> [ * ] .)
    )               reduce using rule 173 (direct_abstract_declarator -> [ * ] .)


state 371

    (191) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 191 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 191 (initializer_list -> initializer_list , designation initializer .)


state 372

    (104) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 104 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 104 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 104 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 104 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 104 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 104 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 373

    (187) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 187 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 187 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 374

    (155) postfix_expression -> ( type_name ) { initializer_list . }
    (156) postfix_expression -> ( type_name ) { initializer_list . , }
    (190) initializer_list -> initializer_list . , initializer
    (191) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 386
    ,               shift and go to state 387


state 375

    (221) selection_statement -> IF ( expression ) statement . ELSE statement
    (222) selection_statement -> IF ( expression ) statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 388
    }               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    CASE            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    GOTO            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    TYPEDEF         reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    EXTERN          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    STATIC          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    AUTO            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    REGISTER        reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    INT             reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    SIGNED          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    UNSIGNED        reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    BOOL            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    CONST           reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    RESTRICT        reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    VOLATILE        reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    INLINE          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    ENUM            reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    STRUCT          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    UNION           reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    CONSTANT        reduce using rule 222 (selection_statement -> IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 222 (selection_statement -> IF ( expression ) statement .)

  ! ELSE            [ reduce using rule 222 (selection_statement -> IF ( expression ) statement .) ]


state 376

    (223) selection_statement -> SWITCH ( expression ) statement .

    }               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    IDENTIFIER      reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    CASE            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    DEFAULT         reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    {               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    ;               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    IF              reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    SWITCH          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    WHILE           reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    DO              reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    FOR             reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    GOTO            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    CONTINUE        reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    BREAK           reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    RETURN          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    TYPEDEF         reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    EXTERN          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    STATIC          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    AUTO            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    REGISTER        reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    VOID            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    CHAR            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    SHORT           reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    INT             reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    LONG            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    FLOAT           reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    DOUBLE          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    SIGNED          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    UNSIGNED        reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    BOOL            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    CONST           reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    RESTRICT        reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    VOLATILE        reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    INLINE          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    ENUM            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    STRUCT          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    UNION           reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    INC_OP          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    DEC_OP          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    SIZEOF          reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    (               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    &               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    *               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    +               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    -               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    ~               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    !               reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    CONSTANT        reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    STRING_LITERAL  reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)
    ELSE            reduce using rule 223 (selection_statement -> SWITCH ( expression ) statement .)


state 377

    (224) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    CASE            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    DEFAULT         reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    SWITCH          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    GOTO            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    TYPEDEF         reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    EXTERN          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    STATIC          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    AUTO            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    REGISTER        reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    SIGNED          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    UNSIGNED        reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    BOOL            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    CONST           reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    RESTRICT        reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    VOLATILE        reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    INLINE          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    ENUM            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    STRUCT          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    UNION           reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANT        reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 224 (iteration_statement -> WHILE ( expression ) statement .)


state 378

    (225) iteration_statement -> DO statement WHILE ( expression . ) ;
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 389
    ,               shift and go to state 230


state 379

    (226) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 121
    statement                      shift and go to state 390
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 380

    (227) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 391
    ,               shift and go to state 230


state 381

    (228) iteration_statement -> FOR ( declaration expression_statement ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 121
    statement                      shift and go to state 392
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    expression                     shift and go to state 128
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 382

    (229) iteration_statement -> FOR ( declaration expression_statement expression . ) statement
    (162) expression -> expression . , assignment_expression

    )               shift and go to state 393
    ,               shift and go to state 230


state 383

    (172) direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .

    [               reduce using rule 172 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    (               reduce using rule 172 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    ,               reduce using rule 172 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)
    )               reduce using rule 172 (direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ] .)


state 384

    (174) direct_abstract_declarator -> direct_abstract_declarator [ * ] .

    [               reduce using rule 174 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    (               reduce using rule 174 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    ,               reduce using rule 174 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)
    )               reduce using rule 174 (direct_abstract_declarator -> direct_abstract_declarator [ * ] .)


state 385

    (178) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .

    [               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    (               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    ,               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    )               reduce using rule 178 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)


state 386

    (155) postfix_expression -> ( type_name ) { initializer_list } .

    [               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    (               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    .               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    PTR_OP          reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    INC_OP          reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    DEC_OP          reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    =               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    MUL_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    DIV_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    MOD_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    ADD_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    SUB_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    LEFT_ASSIGN     reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    RIGHT_ASSIGN    reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    AND_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    XOR_ASSIGN      reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    OR_ASSIGN       reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    *               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    /               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    %               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    +               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    -               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    LEFT_OP         reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    RIGHT_OP        reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    <               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    >               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    LE_OP           reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    GE_OP           reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    EQ_OP           reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    NE_OP           reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    &               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    ^               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    |               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    AND_OP          reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    ?               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    OR_OP           reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    ;               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    ,               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    ]               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    }               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    )               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)
    :               reduce using rule 155 (postfix_expression -> ( type_name ) { initializer_list } .)


state 387

    (156) postfix_expression -> ( type_name ) { initializer_list , . }
    (190) initializer_list -> initializer_list , . initializer
    (191) initializer_list -> initializer_list , . designation initializer
    (192) initializer -> . assignment_expression
    (193) initializer -> . { initializer_list }
    (194) initializer -> . { initializer_list , }
    (195) designation -> . designator_list =
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (196) designator_list -> . designator
    (197) designator_list -> . designator_list designator
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (198) designator -> . [ constant_expression ]
    (199) designator -> . . IDENTIFIER
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 394
    {               shift and go to state 83
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    [               shift and go to state 173
    .               shift and go to state 174
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    IDENTIFIER      shift and go to state 96
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    initializer                    shift and go to state 341
    designation                    shift and go to state 342
    assignment_expression          shift and go to state 82
    designator_list                shift and go to state 171
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    designator                     shift and go to state 172
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 388

    (221) selection_statement -> IF ( expression ) statement ELSE . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression                     shift and go to state 128
    statement                      shift and go to state 395
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    expression_statement           shift and go to state 121
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 389

    (225) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 396


state 390

    (226) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IDENTIFIER      reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CASE            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEFAULT         reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SWITCH          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    GOTO            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONTINUE        reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BREAK           reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RETURN          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    TYPEDEF         reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    EXTERN          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STATIC          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    AUTO            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    REGISTER        reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOID            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SHORT           reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT             reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    LONG            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FLOAT           reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DOUBLE          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIGNED          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNSIGNED        reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONST           reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RESTRICT        reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOLATILE        reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INLINE          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ENUM            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRUCT          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNION           reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC_OP          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEC_OP          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONSTANT        reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 226 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 391

    (227) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 121
    expression                     shift and go to state 128
    statement                      shift and go to state 397
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 392

    (228) iteration_statement -> FOR ( declaration expression_statement ) statement .

    }               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IDENTIFIER      reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CASE            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEFAULT         reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    {               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ;               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IF              reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SWITCH          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    WHILE           reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DO              reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FOR             reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    GOTO            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONTINUE        reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BREAK           reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RETURN          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    TYPEDEF         reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    EXTERN          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STATIC          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    AUTO            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    REGISTER        reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOID            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SHORT           reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT             reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    LONG            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FLOAT           reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DOUBLE          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIGNED          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNSIGNED        reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONST           reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RESTRICT        reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOLATILE        reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INLINE          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ENUM            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRUCT          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNION           reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INC_OP          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEC_OP          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIZEOF          reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    (               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    &               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    *               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    +               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    -               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ~               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    !               reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONSTANT        reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ELSE            reduce using rule 228 (iteration_statement -> FOR ( declaration expression_statement ) statement .)


state 393

    (229) iteration_statement -> FOR ( declaration expression_statement expression ) . statement
    (210) statement -> . labeled_statement
    (211) statement -> . compound_statement
    (212) statement -> . expression_statement
    (213) statement -> . selection_statement
    (214) statement -> . iteration_statement
    (215) statement -> . jump_statement
    (216) labeled_statement -> . IDENTIFIER : statement
    (217) labeled_statement -> . CASE constant_expression : statement
    (218) labeled_statement -> . DEFAULT : statement
    (204) compound_statement -> . { }
    (205) compound_statement -> . { block_item_list }
    (219) expression_statement -> . ;
    (220) expression_statement -> . expression ;
    (221) selection_statement -> . IF ( expression ) statement ELSE statement
    (222) selection_statement -> . IF ( expression ) statement
    (223) selection_statement -> . SWITCH ( expression ) statement
    (224) iteration_statement -> . WHILE ( expression ) statement
    (225) iteration_statement -> . DO statement WHILE ( expression ) ;
    (226) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (227) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (228) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (229) iteration_statement -> . FOR ( declaration expression_statement expression ) statement
    (230) jump_statement -> . GOTO IDENTIFIER ;
    (231) jump_statement -> . CONTINUE ;
    (232) jump_statement -> . BREAK ;
    (233) jump_statement -> . RETURN ;
    (234) jump_statement -> . RETURN expression ;
    (161) expression -> . assignment_expression
    (162) expression -> . expression , assignment_expression
    (89) assignment_expression -> . conditional_expression
    (90) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (103) conditional_expression -> . logical_or_expression
    (104) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (135) unary_expression -> . postfix_expression
    (136) unary_expression -> . INC_OP unary_expression
    (137) unary_expression -> . DEC_OP unary_expression
    (138) unary_expression -> . unary_operator cast_expression
    (139) unary_expression -> . SIZEOF unary_expression
    (140) unary_expression -> . SIZEOF ( type_name )
    (105) logical_or_expression -> . logical_and_expression
    (106) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (147) postfix_expression -> . primary_expression
    (148) postfix_expression -> . postfix_expression [ expression ]
    (149) postfix_expression -> . postfix_expression ( )
    (150) postfix_expression -> . postfix_expression ( argument_expression_list )
    (151) postfix_expression -> . postfix_expression . IDENTIFIER
    (152) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (153) postfix_expression -> . postfix_expression INC_OP
    (154) postfix_expression -> . postfix_expression DEC_OP
    (155) postfix_expression -> . ( type_name ) { initializer_list }
    (156) postfix_expression -> . ( type_name ) { initializer_list , }
    (141) unary_operator -> . &
    (142) unary_operator -> . *
    (143) unary_operator -> . +
    (144) unary_operator -> . -
    (145) unary_operator -> . ~
    (146) unary_operator -> . !
    (107) logical_and_expression -> . inclusive_or_expression
    (108) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (157) primary_expression -> . IDENTIFIER
    (158) primary_expression -> . CONSTANT
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (109) inclusive_or_expression -> . exclusive_or_expression
    (110) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (111) exclusive_or_expression -> . and_expression
    (112) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (113) and_expression -> . equality_expression
    (114) and_expression -> . and_expression & equality_expression
    (115) equality_expression -> . relational_expression
    (116) equality_expression -> . equality_expression EQ_OP relational_expression
    (117) equality_expression -> . equality_expression NE_OP relational_expression
    (118) relational_expression -> . shift_expression
    (119) relational_expression -> . relational_expression < shift_expression
    (120) relational_expression -> . relational_expression > shift_expression
    (121) relational_expression -> . relational_expression LE_OP shift_expression
    (122) relational_expression -> . relational_expression GE_OP shift_expression
    (123) shift_expression -> . additive_expression
    (124) shift_expression -> . shift_expression LEFT_OP additive_expression
    (125) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (126) additive_expression -> . multiplicative_expression
    (127) additive_expression -> . additive_expression + multiplicative_expression
    (128) additive_expression -> . additive_expression - multiplicative_expression
    (129) multiplicative_expression -> . cast_expression
    (130) multiplicative_expression -> . multiplicative_expression * cast_expression
    (131) multiplicative_expression -> . multiplicative_expression / cast_expression
    (132) multiplicative_expression -> . multiplicative_expression % cast_expression
    (133) cast_expression -> . unary_expression
    (134) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 125
    CASE            shift and go to state 126
    DEFAULT         shift and go to state 127
    {               shift and go to state 58
    ;               shift and go to state 118
    IF              shift and go to state 129
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 131
    DO              shift and go to state 132
    FOR             shift and go to state 133
    GOTO            shift and go to state 134
    CONTINUE        shift and go to state 135
    BREAK           shift and go to state 136
    RETURN          shift and go to state 137
    INC_OP          shift and go to state 88
    DEC_OP          shift and go to state 89
    SIZEOF          shift and go to state 92
    (               shift and go to state 93
    &               shift and go to state 97
    *               shift and go to state 98
    +               shift and go to state 99
    -               shift and go to state 100
    ~               shift and go to state 101
    !               shift and go to state 102
    CONSTANT        shift and go to state 104
    STRING_LITERAL  shift and go to state 105

    expression_statement           shift and go to state 121
    expression                     shift and go to state 128
    statement                      shift and go to state 398
    labeled_statement              shift and go to state 119
    compound_statement             shift and go to state 120
    selection_statement            shift and go to state 122
    iteration_statement            shift and go to state 123
    jump_statement                 shift and go to state 124
    assignment_expression          shift and go to state 138
    conditional_expression         shift and go to state 84
    unary_expression               shift and go to state 85
    logical_or_expression          shift and go to state 86
    postfix_expression             shift and go to state 87
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 94
    primary_expression             shift and go to state 95
    inclusive_or_expression        shift and go to state 103
    exclusive_or_expression        shift and go to state 106
    and_expression                 shift and go to state 107
    equality_expression            shift and go to state 108
    relational_expression          shift and go to state 109
    shift_expression               shift and go to state 110
    additive_expression            shift and go to state 111
    multiplicative_expression      shift and go to state 112

state 394

    (156) postfix_expression -> ( type_name ) { initializer_list , } .

    [               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    (               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    .               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    PTR_OP          reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    INC_OP          reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    DEC_OP          reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    =               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    MUL_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    DIV_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    MOD_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ADD_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    SUB_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LEFT_ASSIGN     reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    RIGHT_ASSIGN    reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AND_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    XOR_ASSIGN      reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    OR_ASSIGN       reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    *               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    /               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    %               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    +               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    -               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LEFT_OP         reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    RIGHT_OP        reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    <               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    >               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    LE_OP           reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    GE_OP           reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    EQ_OP           reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    NE_OP           reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    &               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ^               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    |               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    AND_OP          reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ?               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    OR_OP           reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ;               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ,               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    ]               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    }               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    )               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)
    :               reduce using rule 156 (postfix_expression -> ( type_name ) { initializer_list , } .)


state 395

    (221) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CASE            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEFAULT         reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SWITCH          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    GOTO            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    TYPEDEF         reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    EXTERN          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STATIC          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    AUTO            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    REGISTER        reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOID            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CHAR            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SHORT           reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INT             reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    LONG            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FLOAT           reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DOUBLE          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIGNED          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNSIGNED        reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BOOL            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONST           reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RESTRICT        reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    VOLATILE        reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INLINE          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ENUM            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRUCT          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    UNION           reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANT        reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 221 (selection_statement -> IF ( expression ) statement ELSE statement .)


state 396

    (225) iteration_statement -> DO statement WHILE ( expression ) ; .

    }               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IDENTIFIER      reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CASE            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEFAULT         reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SWITCH          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    GOTO            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    TYPEDEF         reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    EXTERN          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STATIC          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    AUTO            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    REGISTER        reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SHORT           reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    LONG            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FLOAT           reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIGNED          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNSIGNED        reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BOOL            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONST           reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RESTRICT        reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    VOLATILE        reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INLINE          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ENUM            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRUCT          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    UNION           reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_OP          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEC_OP          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIZEOF          reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    *               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ~               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANT        reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 225 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 397

    (227) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CASE            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEFAULT         reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SWITCH          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    GOTO            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    EXTERN          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STATIC          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    AUTO            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    REGISTER        reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOID            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CHAR            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SHORT           reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INT             reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    LONG            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FLOAT           reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DOUBLE          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIGNED          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BOOL            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONST           reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RESTRICT        reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    VOLATILE        reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INLINE          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ENUM            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRUCT          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    UNION           reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_OP          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC_OP          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIZEOF          reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANT        reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 227 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 398

    (229) iteration_statement -> FOR ( declaration expression_statement expression ) statement .

    }               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CASE            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEFAULT         reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    {               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ;               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    IF              reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SWITCH          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    WHILE           reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DO              reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FOR             reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    GOTO            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONTINUE        reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BREAK           reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RETURN          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    TYPEDEF         reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    EXTERN          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STATIC          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    AUTO            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    REGISTER        reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOID            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CHAR            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SHORT           reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INT             reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    LONG            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    FLOAT           reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DOUBLE          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIGNED          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNSIGNED        reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    BOOL            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONST           reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    RESTRICT        reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    VOLATILE        reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INLINE          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ENUM            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRUCT          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    UNION           reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    INC_OP          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    DEC_OP          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    SIZEOF          reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    (               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    &               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    *               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    +               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    -               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ~               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    !               reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    CONSTANT        reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)
    ELSE            reduce using rule 229 (iteration_statement -> FOR ( declaration expression_statement expression ) statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 375 resolved as shift
