
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ADD_ASSIGN AND_ASSIGN AND_OP AUTO BOOL BREAK CASE CHAR CONST CONSTANT CONTINUE DEC_OP DEFAULT DIV_ASSIGN DO DOUBLE ELLIPSIS ELSE ENUM EQ_OP EXTERN FLOAT FOR GE_OP GOTO IDENTIFIER IF INC_OP INLINE INT LEFT_ASSIGN LEFT_OP LE_OP LONG MOD_ASSIGN MUL_ASSIGN NE_OP OR_ASSIGN OR_OP PTR_OP REGISTER RESTRICT RETURN RIGHT_ASSIGN RIGHT_OP SHORT SIGNED SIZEOF STATIC STRING_LITERAL STRUCT SUB_ASSIGN SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE XOR_ASSIGN translation_unit : external_declaration\n                         | translation_unit external_declaration  external_declaration : function_definition\n                             | declaration  declaration : declaration_specifiers ';'\n                    | declaration_specifiers init_declarator_list ';'  init_declarator_list : init_declarator\n                             | init_declarator_list ',' init_declarator  init_declarator : declarator\n                        | declarator '=' initializer  declaration_specifiers \t: storage_class_specifier\n                                | storage_class_specifier declaration_specifiers\n                                | type_specifier\n                                | type_specifier declaration_specifiers\n                                | type_qualifier\n                                | type_qualifier declaration_specifiers\n                                | function_specifier\n                                | function_specifier declaration_specifiers  storage_class_specifier : TYPEDEF\n                                | EXTERN\n                                | STATIC\n                                | AUTO\n                                | REGISTER  function_specifier : INLINE  type_specifier : VOID\n                       | CHAR\n                       | SHORT\n                       | INT\n                       | LONG\n                       | FLOAT\n                       | DOUBLE\n                       | SIGNED\n                       | UNSIGNED\n                       | BOOL\n                       | struct_or_union_specifier\n                       | enum_specifier  type_qualifier : CONST\n                       | RESTRICT\n                       | VOLATILE  enum_specifier : ENUM '{' enumerator_list '}'\n                        | ENUM IDENTIFIER '{' enumerator_list '}'\n                        | ENUM '{' enumerator_list ',' '}'\n                        | ENUM IDENTIFIER '{' enumerator_list ',' '}'\n                        | ENUM IDENTIFIER  enumerator_list : enumerator\n                        | enumerator_list ',' enumerator  enumerator : IDENTIFIER\n                   | IDENTIFIER '=' constant_expression  struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'\n                                  | struct_or_union '{' struct_declaration_list '}'\n                                  | struct_or_union IDENTIFIER  struct_or_union : STRUCT\n                        | UNION  struct_declaration_list : struct_declaration\n                                | struct_declaration_list struct_declaration  struct_declaration : specifier_qualifier_list struct_declarator_list ';'  specifier_qualifier_list : type_specifier specifier_qualifier_list\n                                 | type_specifier\n                                 | type_qualifier specifier_qualifier_list\n                                 | type_qualifier   struct_declarator_list : struct_declarator\n                               | struct_declarator_list ',' struct_declarator  struct_declarator : declarator\n                          | ':' constant_expression\n                          | declarator ':' constant_expression  declarator : pointer direct_declarator\n                   | direct_declarator  pointer : '*'\n                | '*' type_qualifier_list\n                | '*' pointer\n                | '*' type_qualifier_list pointer  type_qualifier_list : type_qualifier\n                            | type_qualifier_list type_qualifier  direct_declarator : IDENTIFIER\n                        | '(' declarator ')'\n                        | direct_declarator '[' type_qualifier_list assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list ']'\n                        | direct_declarator '[' assignment_expression ']'\n                        | direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'\n                        | direct_declarator '[' type_qualifier_list '*' ']'\n                        | direct_declarator '[' '*' ']'\n                        | direct_declarator '[' ']'\n                        | direct_declarator '(' parameter_type_list ')'\n                        | direct_declarator '(' identifier_list ')'\n                        | direct_declarator '(' ')'  identifier_list : IDENTIFIER\n                        | identifier_list ',' IDENTIFIER  assignment_expression : conditional_expression\n                              | unary_expression assignment_operator assignment_expression  assignment_operator : '='\n                            | MUL_ASSIGN\n                            | DIV_ASSIGN\n                            | MOD_ASSIGN\n                            | ADD_ASSIGN\n                            | SUB_ASSIGN\n                            | LEFT_ASSIGN\n                            | RIGHT_ASSIGN\n                            | AND_ASSIGN\n                            | XOR_ASSIGN\n                            | OR_ASSIGN  constant_expression : conditional_expression  conditional_expression : logical_or_expression\n                               | logical_or_expression '?' expression ':' conditional_expression  logical_or_expression : logical_and_expression\n                              | logical_or_expression OR_OP logical_and_expression  logical_and_expression : inclusive_or_expression\n                               | logical_and_expression AND_OP inclusive_or_expression  inclusive_or_expression : exclusive_or_expression\n                                | inclusive_or_expression '|' exclusive_or_expression  exclusive_or_expression : and_expression\n                                | exclusive_or_expression '^' and_expression  and_expression : equality_expression\n                       | and_expression '&' equality_expression  equality_expression : relational_expression\n                            | equality_expression EQ_OP relational_expression\n                            | equality_expression NE_OP relational_expression  relational_expression : shift_expression\n                              | relational_expression '<' shift_expression\n                              | relational_expression '>' shift_expression\n                              | relational_expression LE_OP shift_expression\n                              | relational_expression GE_OP shift_expression  shift_expression : additive_expression\n                         | shift_expression LEFT_OP additive_expression\n                         | shift_expression RIGHT_OP additive_expression  additive_expression : multiplicative_expression\n                            | additive_expression '+' multiplicative_expression\n                            | additive_expression '-' multiplicative_expression  multiplicative_expression : cast_expression\n                                  | multiplicative_expression '*' cast_expression\n                                  | multiplicative_expression '/' cast_expression\n                                  | multiplicative_expression '%' cast_expression  cast_expression : unary_expression\n                        | '(' type_name ')' cast_expression  unary_expression : postfix_expression\n                         | INC_OP unary_expression\n                         | DEC_OP unary_expression\n                         | unary_operator cast_expression\n                         | SIZEOF unary_expression\n                         | SIZEOF '(' type_name ')'  unary_operator : '&'\n                       | '*'\n                       | '+'\n                       | '-'\n                       | '~'\n                       | '!'  postfix_expression : primary_expression\n                           | postfix_expression '[' expression ']'\n                           | postfix_expression '(' ')'\n                           | postfix_expression '(' argument_expression_list ')'\n                           | postfix_expression '.' IDENTIFIER\n                           | postfix_expression PTR_OP IDENTIFIER\n                           | postfix_expression INC_OP\n                           | postfix_expression DEC_OP\n                           | '(' type_name ')' '{' initializer_list '}'\n                           | '(' type_name ')' '{' initializer_list ',' '}'  primary_expression : IDENTIFIER\n                           | CONSTANT\n                           | STRING_LITERAL\n                           | '(' expression ')'  expression : assignment_expression\n                   | expression ',' assignment_expression  type_name : specifier_qualifier_list\n                  | specifier_qualifier_list abstract_declarator  abstract_declarator : pointer\n                            | direct_abstract_declarator\n                            | pointer direct_abstract_declarator  direct_abstract_declarator : '(' abstract_declarator ')'\n                                   | '[' ']'\n                                   | '[' assignment_expression ']'\n                                   | direct_abstract_declarator '[' ']'\n                                   | direct_abstract_declarator '[' assignment_expression ']'\n                                   | '[' '*' ']'\n                                   | direct_abstract_declarator '[' '*' ']'\n                                   | '(' ')'\n                                   | '(' parameter_type_list ')'\n                                   | direct_abstract_declarator '(' ')'\n                                   | direct_abstract_declarator '(' parameter_type_list ')'  parameter_type_list : parameter_list\n                            | parameter_list ',' ELLIPSIS  parameter_list : parameter_declaration\n                       | parameter_list ',' parameter_declaration  parameter_declaration : declaration_specifiers declarator\n                              | declaration_specifiers abstract_declarator\n                              | declaration_specifiers  argument_expression_list : assignment_expression\n                                 | argument_expression_list ',' assignment_expression  initializer_list : initializer\n                         | designation initializer\n                         | initializer_list ',' initializer\n                         | initializer_list ',' designation initializer  initializer : assignment_expression\n                    | '{' initializer_list '}'\n                    | '{' initializer_list ',' '}'  designation : designator_list '='  designator_list : designator\n                        | designator_list designator  designator : '[' constant_expression ']'\n                   | '.' IDENTIFIER  function_definition : declaration_specifiers declarator declaration_list compound_statement\n                            | declaration_specifiers declarator compound_statement  declaration_list : declaration\n                         | declaration_list declaration  compound_statement : '{' '}'\n                           | '{' block_item_list '}'  block_item_list : block_item\n                        | block_item_list block_item  block_item : declaration\n                   | statement  statement : labeled_statement\n                  | compound_statement\n                  | expression_statement\n                  | selection_statement\n                  | iteration_statement\n                  | jump_statement  labeled_statement : IDENTIFIER ':' statement\n                          | CASE constant_expression ':' statement\n                          | DEFAULT ':' statement  expression_statement : ';'\n                             | expression ';'  selection_statement : IF '(' expression ')' statement ELSE statement\n                            | IF '(' expression ')' statement\n                            | SWITCH '(' expression ')' statement  iteration_statement : WHILE '(' expression ')' statement\n                            | DO statement WHILE '(' expression ')' ';'\n                            | FOR '(' expression_statement expression_statement ')' statement\n                            | FOR '(' expression_statement expression_statement expression ')' statement\n                            | FOR '(' declaration expression_statement ')' statement\n                            | FOR '(' declaration expression_statement expression ')' statement  jump_statement : GOTO IDENTIFIER ';'\n                       | CONTINUE ';'\n                       | BREAK ';'\n                       | RETURN ';'\n                       | RETURN expression ';' "
    
_lr_action_items = {'TYPEDEF':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,156,164,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[10,10,-1,-3,-4,10,10,10,10,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,10,-5,-67,-74,-51,-44,10,-201,-202,10,-6,-66,10,-200,-203,-204,10,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,-50,-40,-205,-207,-220,10,-231,-232,-233,-77,-78,-82,-84,-85,10,10,-49,-42,-41,10,-216,-218,-230,-234,-76,-81,10,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'EXTERN':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,156,164,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[11,11,-1,-3,-4,11,11,11,11,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,11,-5,-67,-74,-51,-44,11,-201,-202,11,-6,-66,11,-200,-203,-204,11,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,-50,-40,-205,-207,-220,11,-231,-232,-233,-77,-78,-82,-84,-85,11,11,-49,-42,-41,11,-216,-218,-230,-234,-76,-81,11,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'STATIC':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,62,63,66,79,80,113,114,115,116,117,118,119,120,121,122,123,124,140,142,146,153,154,156,164,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[12,12,-1,-3,-4,12,12,12,12,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,12,-5,-67,-74,-51,-44,12,-201,-202,12,-6,-66,143,12,-72,-200,-203,-204,12,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,243,-83,-86,-73,-75,-50,-40,-205,-207,-220,12,-231,-232,-233,-77,-78,-82,-84,-85,12,12,-49,-42,-41,12,-216,-218,-230,-234,-76,-81,12,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'AUTO':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,156,164,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[13,13,-1,-3,-4,13,13,13,13,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,13,-5,-67,-74,-51,-44,13,-201,-202,13,-6,-66,13,-200,-203,-204,13,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,-50,-40,-205,-207,-220,13,-231,-232,-233,-77,-78,-82,-84,-85,13,13,-49,-42,-41,13,-216,-218,-230,-234,-76,-81,13,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'REGISTER':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,156,164,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[14,14,-1,-3,-4,14,14,14,14,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,14,-5,-67,-74,-51,-44,14,-201,-202,14,-6,-66,14,-200,-203,-204,14,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,-50,-40,-205,-207,-220,14,-231,-232,-233,-77,-78,-82,-84,-85,14,14,-49,-42,-41,14,-216,-218,-230,-234,-76,-81,14,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'VOID':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[15,15,-1,-3,-4,15,15,15,15,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,15,-5,-67,-74,-51,15,-44,15,-201,-202,15,-6,-66,15,15,15,-54,15,15,-200,-203,15,-204,15,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,15,-50,-55,-40,15,15,15,-205,-207,-220,15,-231,-232,-233,-77,-78,-82,-84,-85,15,15,-49,-56,-42,-41,15,-216,-218,-230,-234,-76,-81,15,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'CHAR':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[16,16,-1,-3,-4,16,16,16,16,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,16,-5,-67,-74,-51,16,-44,16,-201,-202,16,-6,-66,16,16,16,-54,16,16,-200,-203,16,-204,16,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,16,-50,-55,-40,16,16,16,-205,-207,-220,16,-231,-232,-233,-77,-78,-82,-84,-85,16,16,-49,-56,-42,-41,16,-216,-218,-230,-234,-76,-81,16,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'SHORT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[17,17,-1,-3,-4,17,17,17,17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,17,-5,-67,-74,-51,17,-44,17,-201,-202,17,-6,-66,17,17,17,-54,17,17,-200,-203,17,-204,17,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,17,-50,-55,-40,17,17,17,-205,-207,-220,17,-231,-232,-233,-77,-78,-82,-84,-85,17,17,-49,-56,-42,-41,17,-216,-218,-230,-234,-76,-81,17,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'INT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[18,18,-1,-3,-4,18,18,18,18,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,18,-5,-67,-74,-51,18,-44,18,-201,-202,18,-6,-66,18,18,18,-54,18,18,-200,-203,18,-204,18,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,18,-50,-55,-40,18,18,18,-205,-207,-220,18,-231,-232,-233,-77,-78,-82,-84,-85,18,18,-49,-56,-42,-41,18,-216,-218,-230,-234,-76,-81,18,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'LONG':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[19,19,-1,-3,-4,19,19,19,19,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,19,-5,-67,-74,-51,19,-44,19,-201,-202,19,-6,-66,19,19,19,-54,19,19,-200,-203,19,-204,19,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,19,-50,-55,-40,19,19,19,-205,-207,-220,19,-231,-232,-233,-77,-78,-82,-84,-85,19,19,-49,-56,-42,-41,19,-216,-218,-230,-234,-76,-81,19,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'FLOAT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[20,20,-1,-3,-4,20,20,20,20,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,20,-5,-67,-74,-51,20,-44,20,-201,-202,20,-6,-66,20,20,20,-54,20,20,-200,-203,20,-204,20,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,20,-50,-55,-40,20,20,20,-205,-207,-220,20,-231,-232,-233,-77,-78,-82,-84,-85,20,20,-49,-56,-42,-41,20,-216,-218,-230,-234,-76,-81,20,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'DOUBLE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[21,21,-1,-3,-4,21,21,21,21,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,21,-5,-67,-74,-51,21,-44,21,-201,-202,21,-6,-66,21,21,21,-54,21,21,-200,-203,21,-204,21,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,21,-50,-55,-40,21,21,21,-205,-207,-220,21,-231,-232,-233,-77,-78,-82,-84,-85,21,21,-49,-56,-42,-41,21,-216,-218,-230,-234,-76,-81,21,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'SIGNED':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[22,22,-1,-3,-4,22,22,22,22,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,22,-5,-67,-74,-51,22,-44,22,-201,-202,22,-6,-66,22,22,22,-54,22,22,-200,-203,22,-204,22,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,22,-50,-55,-40,22,22,22,-205,-207,-220,22,-231,-232,-233,-77,-78,-82,-84,-85,22,22,-49,-56,-42,-41,22,-216,-218,-230,-234,-76,-81,22,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'UNSIGNED':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[23,23,-1,-3,-4,23,23,23,23,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,23,-5,-67,-74,-51,23,-44,23,-201,-202,23,-6,-66,23,23,23,-54,23,23,-200,-203,23,-204,23,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,23,-50,-55,-40,23,23,23,-205,-207,-220,23,-231,-232,-233,-77,-78,-82,-84,-85,23,23,-49,-56,-42,-41,23,-216,-218,-230,-234,-76,-81,23,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'BOOL':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[24,24,-1,-3,-4,24,24,24,24,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,24,-5,-67,-74,-51,24,-44,24,-201,-202,24,-6,-66,24,24,24,-54,24,24,-200,-203,24,-204,24,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,24,-50,-55,-40,24,24,24,-205,-207,-220,24,-231,-232,-233,-77,-78,-82,-84,-85,24,24,-49,-56,-42,-41,24,-216,-218,-230,-234,-76,-81,24,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'CONST':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,140,142,143,146,153,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,246,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[27,27,-1,-3,-4,27,27,27,27,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,27,-5,-67,27,-74,-51,27,-44,27,-201,-202,27,-6,-66,27,27,27,-72,27,27,-54,27,27,-200,-203,27,-204,27,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,27,-83,27,-86,-73,-75,27,-50,-55,-40,27,27,27,-205,-207,-220,27,-231,-232,-233,-77,-78,27,-82,-84,-85,27,27,-49,-56,-42,-41,27,-216,-218,-230,-234,-76,-81,27,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'RESTRICT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,140,142,143,146,153,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,246,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[28,28,-1,-3,-4,28,28,28,28,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,28,-5,-67,28,-74,-51,28,-44,28,-201,-202,28,-6,-66,28,28,28,-72,28,28,-54,28,28,-200,-203,28,-204,28,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,28,-83,28,-86,-73,-75,28,-50,-55,-40,28,28,28,-205,-207,-220,28,-231,-232,-233,-77,-78,28,-82,-84,-85,28,28,-49,-56,-42,-41,28,-216,-218,-230,-234,-76,-81,28,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'VOLATILE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,42,43,49,50,52,54,55,57,58,59,61,62,63,64,66,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,140,142,143,146,153,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,246,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[29,29,-1,-3,-4,29,29,29,29,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,29,-5,-67,29,-74,-51,29,-44,29,-201,-202,29,-6,-66,29,29,29,-72,29,29,-54,29,29,-200,-203,29,-204,29,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,29,-83,29,-86,-73,-75,29,-50,-55,-40,29,29,29,-205,-207,-220,29,-231,-232,-233,-77,-78,29,-82,-84,-85,29,29,-49,-56,-42,-41,29,-216,-218,-230,-234,-76,-81,29,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'INLINE':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,52,54,55,57,58,59,61,63,79,80,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,156,164,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[30,30,-1,-3,-4,30,30,30,30,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,30,-5,-67,-74,-51,-44,30,-201,-202,30,-6,-66,30,-200,-203,-204,30,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,-50,-40,-205,-207,-220,30,-231,-232,-233,-77,-78,-82,-84,-85,30,30,-49,-42,-41,30,-216,-218,-230,-234,-76,-81,30,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'ENUM':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[32,32,-1,-3,-4,32,32,32,32,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,32,-5,-67,-74,-51,32,-44,32,-201,-202,32,-6,-66,32,32,32,-54,32,32,-200,-203,32,-204,32,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,32,-50,-55,-40,32,32,32,-205,-207,-220,32,-231,-232,-233,-77,-78,-82,-84,-85,32,32,-49,-56,-42,-41,32,-216,-218,-230,-234,-76,-81,32,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'STRUCT':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[33,33,-1,-3,-4,33,33,33,33,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,33,-5,-67,-74,-51,33,-44,33,-201,-202,33,-6,-66,33,33,33,-54,33,33,-200,-203,33,-204,33,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,33,-50,-55,-40,33,33,33,-205,-207,-220,33,-231,-232,-233,-77,-78,-82,-84,-85,33,33,-49,-56,-42,-41,33,-216,-218,-230,-234,-76,-81,33,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'UNION':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,36,37,40,43,49,50,52,54,55,57,58,59,61,63,68,69,70,72,73,79,80,93,113,114,115,116,117,118,119,120,121,122,123,124,142,146,154,155,156,157,164,196,200,202,223,224,229,235,237,238,239,242,245,247,248,249,251,256,258,259,263,266,291,309,311,319,320,321,323,330,339,353,360,361,375,376,377,390,392,395,396,397,398,],[34,34,-1,-3,-4,34,34,34,34,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-2,34,-5,-67,-74,-51,34,-44,34,-201,-202,34,-6,-66,34,34,34,-54,34,34,-200,-203,34,-204,34,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-83,-86,-75,34,-50,-55,-40,34,34,34,-205,-207,-220,34,-231,-232,-233,-77,-78,-82,-84,-85,34,34,-49,-56,-42,-41,34,-216,-218,-230,-234,-76,-81,34,-43,-217,-80,-79,-222,-223,-224,-226,-228,-221,-225,-227,-229,]),'$end':([1,2,3,4,35,37,55,59,79,113,223,],[0,-1,-3,-4,-2,-5,-201,-6,-200,-204,-205,]),';':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,37,38,40,41,43,45,46,47,48,49,52,53,58,59,61,78,81,82,84,85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,132,135,136,137,138,139,142,146,154,156,158,159,160,164,193,194,195,197,198,199,201,223,224,225,227,228,229,235,236,237,238,239,240,242,245,247,248,249,258,262,263,266,268,275,277,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,317,318,319,320,321,323,337,338,339,340,345,346,350,352,353,354,355,356,360,361,372,375,376,377,379,381,386,388,389,390,391,392,393,394,395,396,397,398,],[37,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-9,-5,59,-67,-7,-74,-12,-14,-16,-18,-51,-44,37,118,-6,-66,-9,-10,-192,-89,-133,-103,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-204,118,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,229,118,237,238,239,-161,-8,-83,-86,-75,-50,259,-61,-63,-40,-153,-154,-136,-137,-138,-133,-139,-205,-207,118,-102,118,-220,118,319,-231,-232,-233,320,-77,-78,-82,-84,-85,-49,-64,-42,-41,-193,-90,-106,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-216,118,-218,-162,118,118,-230,-234,-76,-81,-62,-65,-43,-194,-148,-150,-140,-134,-217,118,118,118,-80,-79,-104,-222,-223,-224,118,118,-155,118,396,-226,118,-228,118,-156,-221,-225,-227,-229,]),'*':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,42,44,45,46,47,48,49,52,53,56,58,59,60,62,64,66,71,72,73,83,85,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,104,105,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,137,140,144,151,153,156,161,162,163,164,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,197,198,199,200,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,256,257,258,260,261,263,266,269,271,279,282,283,287,288,291,304,305,306,307,308,309,310,311,317,318,319,320,329,336,339,342,344,345,346,347,349,350,351,352,353,354,355,356,357,358,359,364,375,376,377,379,381,386,387,388,390,391,392,393,394,395,396,397,398,],[42,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-5,42,42,-12,-14,-16,-18,-51,-44,42,98,98,-6,42,144,42,-72,42,-58,-60,98,-133,-135,98,98,98,-129,98,98,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,220,-204,98,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,98,98,98,244,-142,42,-73,-50,98,-57,-59,-40,98,98,98,98,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,98,98,98,98,-153,-154,-136,98,-137,-138,-133,98,-139,98,42,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-205,-207,98,98,-220,98,98,98,98,98,-231,-232,-233,98,-142,98,42,336,-49,42,98,-42,-41,98,-195,-149,-151,-152,98,-160,42,220,220,-130,-131,-132,-216,98,-218,98,98,-230,-234,364,-142,-43,98,98,-148,-150,98,98,-140,98,-134,-217,98,98,98,98,98,98,-142,-222,-223,-224,98,98,-155,98,98,-226,98,-228,98,-156,-221,-225,-227,-229,]),'IDENTIFIER':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,39,42,44,45,46,47,48,49,51,52,53,56,58,59,60,62,63,64,65,66,71,72,73,77,83,88,89,90,92,93,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,126,132,134,137,140,144,151,152,153,156,161,162,163,164,165,166,170,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,250,254,256,257,258,260,261,263,266,267,269,271,287,309,310,311,317,318,319,320,329,336,339,342,344,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[43,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,49,52,-52,-53,-5,43,-68,43,-12,-14,-16,-18,-51,76,-44,43,96,125,-6,43,96,149,-69,-70,-72,43,-58,-60,76,96,96,96,96,96,96,-141,-142,-143,-144,-145,-146,-204,125,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,96,125,236,96,96,-142,43,-71,-73,-50,96,-57,-59,-40,76,96,96,96,274,96,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,96,96,96,96,282,283,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-205,-207,125,125,-220,96,96,96,96,96,-231,-232,-233,96,-142,96,325,43,43,96,-49,43,96,-42,-41,76,96,-195,96,-216,125,-218,96,96,-230,-234,96,-142,-43,96,96,96,96,96,-217,125,125,125,96,96,96,-142,-222,-223,-224,125,125,96,125,-226,125,-228,125,-221,-225,-227,-229,]),'(':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,37,39,40,42,43,44,45,46,47,48,49,52,53,56,58,59,60,61,62,64,65,66,71,72,73,83,87,88,89,90,92,93,95,96,97,98,99,100,101,102,104,105,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,132,133,137,140,142,144,146,151,152,153,154,156,161,162,163,164,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,196,200,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,242,243,244,245,246,247,248,249,254,255,256,257,258,260,261,263,266,269,271,279,282,283,287,288,290,291,309,310,311,316,317,318,319,320,321,323,328,329,331,334,336,339,342,344,345,346,347,349,351,353,354,355,356,357,358,359,360,361,362,364,365,367,368,369,370,375,376,377,379,381,383,384,385,386,387,388,390,391,392,393,394,395,396,397,398,],[44,-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-5,44,63,-68,-74,44,-12,-14,-16,-18,-51,-44,44,93,93,-6,44,63,93,-69,-70,-72,44,-58,-60,93,190,196,196,200,202,93,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,-204,93,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,200,231,232,233,93,235,93,93,-83,-142,-86,256,-71,-73,-75,-50,200,-57,-59,-40,200,93,200,93,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,93,200,93,93,-153,-154,93,93,93,291,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,-205,-207,93,93,-220,93,93,93,93,93,-231,-232,-233,-77,93,-142,-78,93,-82,-84,-85,256,330,256,93,-49,44,200,-42,-41,93,-195,-149,-151,-152,200,-160,291,291,-216,93,-218,357,93,93,-230,-234,-76,-81,330,93,-175,-169,-142,-43,93,200,-148,-150,93,200,93,-217,93,93,93,93,93,93,-80,-79,-171,-142,-177,-168,-176,-170,-173,-222,-223,-224,93,93,-172,-174,-178,-155,93,93,-226,93,-228,93,-156,-221,-225,-227,-229,]),'[':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,42,43,45,46,47,48,49,52,61,64,65,66,72,73,83,87,95,96,104,105,125,142,146,151,152,153,154,156,162,163,164,171,172,193,194,205,242,245,247,248,249,254,255,256,258,263,266,269,272,274,279,282,283,288,290,291,321,323,328,331,334,339,343,345,346,351,360,361,362,365,367,368,369,370,383,384,385,386,387,394,],[-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,62,-68,-74,-12,-14,-16,-18,-51,-44,62,-69,-70,-72,-58,-60,173,189,-147,-157,-158,-159,-157,-83,-86,257,-71,-73,-75,-50,-57,-59,-40,173,-196,-153,-154,257,-77,-78,-82,-84,-85,257,329,257,-49,-42,-41,173,-197,-199,-149,-151,-152,-160,257,257,-76,-81,329,-175,-169,-43,-198,-148,-150,173,-80,-79,-171,-177,-168,-176,-170,-173,-172,-174,-178,-155,173,-156,]),',':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,36,38,40,41,42,43,45,46,47,48,49,52,61,64,65,66,74,75,76,78,81,82,84,85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,125,128,138,139,142,146,147,148,149,150,151,152,153,154,156,158,159,160,164,167,168,169,193,194,195,197,198,199,201,204,227,240,242,245,247,248,249,252,253,254,255,258,262,263,264,265,266,268,270,275,276,277,278,279,280,281,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,313,314,315,321,323,325,327,328,331,334,337,338,339,340,341,345,346,350,352,360,361,362,365,367,368,369,370,371,372,373,374,378,380,382,383,384,385,386,394,],[-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-9,60,-67,-7,-68,-74,-12,-14,-16,-18,-51,-44,-66,-69,-70,-72,165,-45,-47,-9,-10,-192,-89,-133,-103,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-157,230,-161,-8,-83,-86,250,251,-87,-181,-185,-71,-73,-75,-50,260,-61,-63,-40,267,269,-188,-153,-154,-136,-137,-138,-133,-139,230,-102,230,-77,-78,-82,-84,-85,-183,-184,-165,-166,-49,-64,-42,-46,-48,-41,-193,-189,-90,230,-106,230,-149,347,-186,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-162,230,230,230,-76,-81,-88,-182,-167,-175,-169,-62,-65,-43,-194,-190,-148,-150,-140,-134,-80,-79,-171,-177,-168,-176,-170,-173,-191,-104,-187,387,230,230,230,-172,-174,-178,-155,-156,]),')':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,42,43,45,46,47,48,49,52,61,63,64,65,66,67,72,73,84,85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,118,138,142,145,146,147,148,149,150,151,152,153,154,156,162,163,164,190,193,194,195,197,198,199,201,203,204,205,229,242,245,247,248,249,252,253,254,255,256,258,263,266,275,277,279,280,281,282,283,284,285,286,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,313,314,315,321,323,325,326,327,328,330,331,332,333,334,339,345,346,350,352,358,359,360,361,362,365,366,367,368,369,370,372,373,378,380,382,383,384,385,386,394,],[-11,-13,-15,-17,-19,-20,-21,-22,-23,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-24,-67,-68,-74,-12,-14,-16,-18,-51,-44,-66,146,-69,-70,-72,154,-58,-60,-89,-133,-103,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-219,-161,-83,248,-86,249,-179,-87,-181,-185,-71,-73,-75,-50,-57,-59,-40,279,-153,-154,-136,-137,-138,-133,-139,287,288,-163,-220,-77,-78,-82,-84,-85,-183,-184,-165,-166,331,-49,-42,-41,-90,-106,-149,346,-186,-151,-152,348,349,350,-160,-164,-165,331,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-162,354,355,356,-76,-81,-88,-180,-182,-167,365,-175,367,368,-169,-43,-148,-150,-140,-134,379,381,-80,-79,-171,-177,385,-168,-176,-170,-173,-104,-187,389,391,393,-172,-174,-178,-155,-156,]),':':([15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,40,43,49,52,61,71,72,73,84,85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,125,127,138,142,146,154,156,160,162,163,164,193,194,195,197,198,199,201,226,227,242,245,247,248,249,258,260,263,266,275,276,277,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,321,323,339,345,346,350,352,360,361,372,386,394,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-74,-51,-44,-66,161,-58,-60,-89,-133,-103,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,225,228,-161,-83,-86,-75,-50,261,-57,-59,-40,-153,-154,-136,-137,-138,-133,-139,310,-102,-77,-78,-82,-84,-85,-49,161,-42,-41,-90,344,-106,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-162,-76,-81,-43,-148,-150,-140,-134,-80,-79,-104,-155,-156,]),']':([27,28,29,62,66,84,85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,138,140,141,144,153,193,194,195,197,198,199,201,227,241,244,257,273,275,277,278,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,312,322,324,329,335,336,345,346,350,352,363,364,372,386,394,],[-37,-38,-39,142,-72,-89,-133,-103,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-161,242,245,247,-73,-153,-154,-136,-137,-138,-133,-139,-102,321,323,334,343,-90,-106,345,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-162,360,361,362,369,370,-148,-150,-140,-134,383,384,-104,-155,-156,]),'INC_OP':([27,28,29,37,56,58,59,62,66,83,87,88,89,90,92,93,95,96,97,98,99,100,101,102,104,105,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,279,282,283,287,288,309,310,311,317,318,319,320,329,336,342,344,345,346,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,386,387,388,390,391,392,393,394,395,396,397,398,],[-37,-38,-39,-5,88,88,-6,88,-72,88,193,88,88,88,88,88,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,-204,88,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,88,88,88,88,-142,-73,88,88,88,88,88,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,88,88,88,88,-153,-154,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-205,-207,88,88,-220,88,88,88,88,88,-231,-232,-233,88,-142,88,88,88,88,-195,-149,-151,-152,88,-160,-216,88,-218,88,88,-230,-234,88,-142,88,88,-148,-150,88,88,88,-217,88,88,88,88,88,88,-142,-222,-223,-224,88,88,-155,88,88,-226,88,-228,88,-156,-221,-225,-227,-229,]),'DEC_OP':([27,28,29,37,56,58,59,62,66,83,87,88,89,90,92,93,95,96,97,98,99,100,101,102,104,105,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,279,282,283,287,288,309,310,311,317,318,319,320,329,336,342,344,345,346,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,386,387,388,390,391,392,393,394,395,396,397,398,],[-37,-38,-39,-5,89,89,-6,89,-72,89,194,89,89,89,89,89,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,-204,89,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,89,89,89,89,-142,-73,89,89,89,89,89,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,89,89,89,89,-153,-154,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-205,-207,89,89,-220,89,89,89,89,89,-231,-232,-233,89,-142,89,89,89,89,-195,-149,-151,-152,89,-160,-216,89,-218,89,89,-230,-234,89,-142,89,89,-148,-150,89,89,89,-217,89,89,89,89,89,89,-142,-222,-223,-224,89,89,-155,89,89,-226,89,-228,89,-156,-221,-225,-227,-229,]),'SIZEOF':([27,28,29,37,56,58,59,62,66,83,88,89,90,92,93,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,287,309,310,311,317,318,319,320,329,336,342,344,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[-37,-38,-39,-5,92,92,-6,92,-72,92,92,92,92,92,92,-141,-142,-143,-144,-145,-146,-204,92,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,92,92,92,92,-142,-73,92,92,92,92,92,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-205,-207,92,92,-220,92,92,92,92,92,-231,-232,-233,92,-142,92,92,92,92,-195,92,-216,92,-218,92,92,-230,-234,92,-142,92,92,92,92,92,-217,92,92,92,92,92,92,-142,-222,-223,-224,92,92,92,92,-226,92,-228,92,-221,-225,-227,-229,]),'&':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,197,198,199,200,201,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,279,282,283,287,288,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,317,318,319,320,329,336,342,344,345,346,347,349,350,351,352,353,354,355,356,357,358,359,364,375,376,377,379,381,386,387,388,390,391,392,393,394,395,396,397,398,],[-37,-38,-39,-5,97,97,-6,97,-72,97,-133,-135,97,97,97,-129,97,97,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,209,-113,-115,-118,-123,-126,-204,97,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,97,97,97,97,-142,-73,97,97,97,97,97,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,97,97,97,97,-153,-154,-136,97,-137,-138,-133,97,-139,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-205,-207,97,97,-220,97,97,97,97,97,-231,-232,-233,97,-142,97,97,97,97,-195,-149,-151,-152,97,-160,209,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-216,97,-218,97,97,-230,-234,97,-142,97,97,-148,-150,97,97,-140,97,-134,-217,97,97,97,97,97,97,-142,-222,-223,-224,97,97,-155,97,97,-226,97,-228,97,-156,-221,-225,-227,-229,]),'+':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,197,198,199,200,201,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,279,282,283,287,288,302,303,304,305,306,307,308,309,310,311,317,318,319,320,329,336,342,344,345,346,347,349,350,351,352,353,354,355,356,357,358,359,364,375,376,377,379,381,386,387,388,390,391,392,393,394,395,396,397,398,],[-37,-38,-39,-5,99,99,-6,99,-72,99,-133,-135,99,99,99,-129,99,99,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,218,-126,-204,99,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,99,99,99,99,-142,-73,99,99,99,99,99,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,99,99,99,99,-153,-154,-136,99,-137,-138,-133,99,-139,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-205,-207,99,99,-220,99,99,99,99,99,-231,-232,-233,99,-142,99,99,99,99,-195,-149,-151,-152,99,-160,218,218,-127,-128,-130,-131,-132,-216,99,-218,99,99,-230,-234,99,-142,99,99,-148,-150,99,99,-140,99,-134,-217,99,99,99,99,99,99,-142,-222,-223,-224,99,99,-155,99,99,-226,99,-228,99,-156,-221,-225,-227,-229,]),'-':([27,28,29,37,56,58,59,62,66,83,85,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,104,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,194,195,196,197,198,199,200,201,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,279,282,283,287,288,302,303,304,305,306,307,308,309,310,311,317,318,319,320,329,336,342,344,345,346,347,349,350,351,352,353,354,355,356,357,358,359,364,375,376,377,379,381,386,387,388,390,391,392,393,394,395,396,397,398,],[-37,-38,-39,-5,100,100,-6,100,-72,100,-133,-135,100,100,100,-129,100,100,-147,-157,-141,-142,-143,-144,-145,-146,-158,-159,219,-126,-204,100,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,-157,100,100,100,100,-142,-73,100,100,100,100,100,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,100,100,100,100,-153,-154,-136,100,-137,-138,-133,100,-139,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-205,-207,100,100,-220,100,100,100,100,100,-231,-232,-233,100,-142,100,100,100,100,-195,-149,-151,-152,100,-160,219,219,-127,-128,-130,-131,-132,-216,100,-218,100,100,-230,-234,100,-142,100,100,-148,-150,100,100,-140,100,-134,-217,100,100,100,100,100,100,-142,-222,-223,-224,100,100,-155,100,100,-226,100,-228,100,-156,-221,-225,-227,-229,]),'~':([27,28,29,37,56,58,59,62,66,83,88,89,90,92,93,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,287,309,310,311,317,318,319,320,329,336,342,344,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[-37,-38,-39,-5,101,101,-6,101,-72,101,101,101,101,101,101,-141,-142,-143,-144,-145,-146,-204,101,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,101,101,101,101,-142,-73,101,101,101,101,101,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-205,-207,101,101,-220,101,101,101,101,101,-231,-232,-233,101,-142,101,101,101,101,-195,101,-216,101,-218,101,101,-230,-234,101,-142,101,101,101,101,101,-217,101,101,101,101,101,101,-142,-222,-223,-224,101,101,101,101,-226,101,-228,101,-221,-225,-227,-229,]),'!':([27,28,29,37,56,58,59,62,66,83,88,89,90,92,93,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,287,309,310,311,317,318,319,320,329,336,342,344,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[-37,-38,-39,-5,102,102,-6,102,-72,102,102,102,102,102,102,-141,-142,-143,-144,-145,-146,-204,102,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,102,102,102,102,-142,-73,102,102,102,102,102,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-205,-207,102,102,-220,102,102,102,102,102,-231,-232,-233,102,-142,102,102,102,102,-195,102,-216,102,-218,102,102,-230,-234,102,-142,102,102,102,102,102,-217,102,102,102,102,102,102,-142,-222,-223,-224,102,102,102,102,-226,102,-228,102,-221,-225,-227,-229,]),'CONSTANT':([27,28,29,37,56,58,59,62,66,83,88,89,90,92,93,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,287,309,310,311,317,318,319,320,329,336,342,344,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[-37,-38,-39,-5,104,104,-6,104,-72,104,104,104,104,104,104,-141,-142,-143,-144,-145,-146,-204,104,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,104,104,104,104,-142,-73,104,104,104,104,104,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-205,-207,104,104,-220,104,104,104,104,104,-231,-232,-233,104,-142,104,104,104,104,-195,104,-216,104,-218,104,104,-230,-234,104,-142,104,104,104,104,104,-217,104,104,104,104,104,104,-142,-222,-223,-224,104,104,104,104,-226,104,-228,104,-221,-225,-227,-229,]),'STRING_LITERAL':([27,28,29,37,56,58,59,62,66,83,88,89,90,92,93,97,98,99,100,101,102,113,114,115,116,117,118,119,120,121,122,123,124,126,132,137,140,144,153,161,166,170,173,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,233,235,237,238,239,243,244,246,257,261,269,271,287,309,310,311,317,318,319,320,329,336,342,344,347,349,351,353,354,355,356,357,358,359,364,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[-37,-38,-39,-5,105,105,-6,105,-72,105,105,105,105,105,105,-141,-142,-143,-144,-145,-146,-204,105,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,105,105,105,105,-142,-73,105,105,105,105,105,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-205,-207,105,105,-220,105,105,105,105,105,-231,-232,-233,105,-142,105,105,105,105,-195,105,-216,105,-218,105,105,-230,-234,105,-142,105,105,105,105,105,-217,105,105,105,105,105,105,-142,-222,-223,-224,105,105,105,105,-226,105,-228,105,-221,-225,-227,-229,]),'{':([31,32,33,34,36,37,40,43,49,52,54,56,57,58,59,61,80,83,113,114,115,116,117,118,119,120,121,122,123,124,132,142,146,154,170,223,224,225,228,229,237,238,239,242,245,247,248,249,269,271,287,309,310,311,319,320,321,323,342,348,349,350,351,353,354,355,356,360,361,375,376,377,379,381,387,388,390,391,392,393,395,396,397,398,],[50,51,-52,-53,58,-5,-67,-74,68,77,58,83,-202,58,-6,-66,-203,83,-204,58,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,58,-83,-86,-75,83,-205,-207,58,58,-220,-231,-232,-233,-77,-78,-82,-84,-85,83,-195,351,-216,58,-218,-230,-234,-76,-81,83,351,351,351,83,-217,58,58,58,-80,-79,-222,-223,-224,58,58,83,58,-226,58,-228,58,-221,-225,-227,-229,]),'=':([36,40,43,61,76,78,85,87,95,96,104,105,125,142,146,154,171,172,193,194,195,197,198,199,201,242,245,247,248,249,272,274,279,282,283,288,321,323,343,345,346,350,352,360,361,386,394,],[56,-67,-74,-66,166,56,176,-135,-147,-157,-158,-159,-157,-83,-86,-75,271,-196,-153,-154,-136,-137,-138,-133,-139,-77,-78,-82,-84,-85,-197,-199,-149,-151,-152,-160,-76,-81,-198,-148,-150,-140,-134,-80,-79,-155,-156,]),'}':([37,58,59,69,70,74,75,76,82,84,85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,155,157,165,167,168,169,193,194,195,197,198,199,201,223,224,227,229,237,238,239,259,264,265,267,268,269,270,275,277,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,311,319,320,340,341,345,346,350,352,353,371,372,374,375,376,377,386,387,390,392,394,395,396,397,398,],[-5,113,-6,156,-54,164,-45,-47,-192,-89,-133,-103,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-204,223,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,258,-55,263,266,268,-188,-153,-154,-136,-137,-138,-133,-139,-205,-207,-102,-220,-231,-232,-233,-56,-46,-48,339,-193,340,-189,-90,-106,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-216,-218,-230,-234,-194,-190,-148,-150,-140,-134,-217,-191,-104,386,-222,-223,-224,-155,394,-226,-228,-156,-221,-225,-227,-229,]),'CASE':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,126,-6,-204,126,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,126,-205,-207,126,126,-220,-231,-232,-233,-216,126,-218,-230,-234,-217,126,126,126,-222,-223,-224,126,126,126,-226,126,-228,126,-221,-225,-227,-229,]),'DEFAULT':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,127,-6,-204,127,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,127,-205,-207,127,127,-220,-231,-232,-233,-216,127,-218,-230,-234,-217,127,127,127,-222,-223,-224,127,127,127,-226,127,-228,127,-221,-225,-227,-229,]),'IF':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,129,-6,-204,129,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,129,-205,-207,129,129,-220,-231,-232,-233,-216,129,-218,-230,-234,-217,129,129,129,-222,-223,-224,129,129,129,-226,129,-228,129,-221,-225,-227,-229,]),'SWITCH':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,130,-6,-204,130,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,130,-205,-207,130,130,-220,-231,-232,-233,-216,130,-218,-230,-234,-217,130,130,130,-222,-223,-224,130,130,130,-226,130,-228,130,-221,-225,-227,-229,]),'WHILE':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,234,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,131,-6,-204,131,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,131,-205,-207,131,131,-220,316,-231,-232,-233,-216,131,-218,-230,-234,-217,131,131,131,-222,-223,-224,131,131,131,-226,131,-228,131,-221,-225,-227,-229,]),'DO':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,132,-6,-204,132,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,132,-205,-207,132,132,-220,-231,-232,-233,-216,132,-218,-230,-234,-217,132,132,132,-222,-223,-224,132,132,132,-226,132,-228,132,-221,-225,-227,-229,]),'FOR':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,133,-6,-204,133,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,133,-205,-207,133,133,-220,-231,-232,-233,-216,133,-218,-230,-234,-217,133,133,133,-222,-223,-224,133,133,133,-226,133,-228,133,-221,-225,-227,-229,]),'GOTO':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,134,-6,-204,134,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,134,-205,-207,134,134,-220,-231,-232,-233,-216,134,-218,-230,-234,-217,134,134,134,-222,-223,-224,134,134,134,-226,134,-228,134,-221,-225,-227,-229,]),'CONTINUE':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,135,-6,-204,135,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,135,-205,-207,135,135,-220,-231,-232,-233,-216,135,-218,-230,-234,-217,135,135,135,-222,-223,-224,135,135,135,-226,135,-228,135,-221,-225,-227,-229,]),'BREAK':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,136,-6,-204,136,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,136,-205,-207,136,136,-220,-231,-232,-233,-216,136,-218,-230,-234,-217,136,136,136,-222,-223,-224,136,136,136,-226,136,-228,136,-221,-225,-227,-229,]),'RETURN':([37,58,59,113,114,115,116,117,118,119,120,121,122,123,124,132,223,224,225,228,229,237,238,239,309,310,311,319,320,353,354,355,356,375,376,377,379,381,388,390,391,392,393,395,396,397,398,],[-5,137,-6,-204,137,-206,-208,-209,-219,-210,-211,-212,-213,-214,-215,137,-205,-207,137,137,-220,-231,-232,-233,-216,137,-218,-230,-234,-217,137,137,137,-222,-223,-224,137,137,137,-226,137,-228,137,-221,-225,-227,-229,]),'.':([83,87,95,96,104,105,125,171,172,193,194,269,272,274,279,282,283,288,343,345,346,351,386,387,394,],[174,191,-147,-157,-158,-159,-157,174,-196,-153,-154,174,-197,-199,-149,-151,-152,-160,-198,-148,-150,174,-155,174,-156,]),'/':([85,87,91,95,96,104,105,112,125,193,194,195,197,198,199,201,279,282,283,288,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,221,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,221,221,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'%':([85,87,91,95,96,104,105,112,125,193,194,195,197,198,199,201,279,282,283,288,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,222,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,222,222,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'LEFT_OP':([85,87,91,95,96,104,105,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,216,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,216,216,216,216,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'RIGHT_OP':([85,87,91,95,96,104,105,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,217,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,217,217,217,217,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'<':([85,87,91,95,96,104,105,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,212,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,212,212,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'>':([85,87,91,95,96,104,105,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,213,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,213,213,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'LE_OP':([85,87,91,95,96,104,105,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,214,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,214,214,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'GE_OP':([85,87,91,95,96,104,105,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,215,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,215,215,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'EQ_OP':([85,87,91,95,96,104,105,108,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,210,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,210,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'NE_OP':([85,87,91,95,96,104,105,108,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,211,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,211,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'^':([85,87,91,95,96,104,105,106,107,108,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,-158,-159,208,-111,-113,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,208,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'|':([85,87,91,95,96,103,104,105,106,107,108,109,110,111,112,125,193,194,195,197,198,199,201,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,-147,-157,207,-158,-159,-109,-111,-113,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,207,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'AND_OP':([85,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,125,193,194,195,197,198,199,201,277,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,-135,-129,206,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,206,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'?':([85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,125,193,194,195,197,198,199,201,277,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,187,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-106,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'OR_OP':([85,86,87,91,94,95,96,103,104,105,106,107,108,109,110,111,112,125,193,194,195,197,198,199,201,277,279,282,283,288,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,345,346,350,352,386,394,],[-133,188,-135,-129,-105,-147,-157,-107,-158,-159,-109,-111,-113,-115,-118,-123,-126,-157,-153,-154,-136,-137,-138,-133,-139,-106,-149,-151,-152,-160,-108,-110,-112,-114,-116,-117,-119,-120,-121,-122,-124,-125,-127,-128,-130,-131,-132,-148,-150,-140,-134,-155,-156,]),'MUL_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[177,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'DIV_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[178,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'MOD_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[179,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'ADD_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[180,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'SUB_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[181,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'LEFT_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[182,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'RIGHT_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[183,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'AND_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[184,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'XOR_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[185,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'OR_ASSIGN':([85,87,95,96,104,105,125,193,194,195,197,198,199,201,279,282,283,288,345,346,350,352,386,394,],[186,-135,-147,-157,-158,-159,-157,-153,-154,-136,-137,-138,-133,-139,-149,-151,-152,-160,-148,-150,-140,-134,-155,-156,]),'PTR_OP':([87,95,96,104,105,125,193,194,279,282,283,288,345,346,386,394,],[192,-147,-157,-158,-159,-157,-153,-154,-149,-151,-152,-160,-148,-150,-155,-156,]),'ELSE':([113,118,119,120,121,122,123,124,223,229,237,238,239,309,311,319,320,353,375,376,377,390,392,395,396,397,398,],[-204,-219,-210,-211,-212,-213,-214,-215,-205,-220,-231,-232,-233,-216,-218,-230,-234,-217,388,-223,-224,-226,-228,-221,-225,-227,-229,]),'ELLIPSIS':([251,],[326,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,35,]),'function_definition':([0,1,],[3,3,]),'declaration':([0,1,36,54,58,114,235,],[4,4,57,80,116,116,318,]),'declaration_specifiers':([0,1,6,7,8,9,36,54,58,63,114,235,251,256,291,330,],[5,5,45,46,47,48,53,53,53,151,53,53,151,151,151,151,]),'storage_class_specifier':([0,1,6,7,8,9,36,54,58,63,114,235,251,256,291,330,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'type_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,93,114,155,196,200,202,235,251,256,291,330,],[7,7,7,7,7,7,7,72,7,7,7,72,72,72,72,72,7,72,72,72,72,7,7,7,7,7,]),'type_qualifier':([0,1,6,7,8,9,36,42,50,54,58,62,63,64,68,69,72,73,93,114,140,143,155,196,200,202,235,246,251,256,291,330,],[8,8,8,8,8,8,8,66,73,8,8,66,8,153,73,73,73,73,73,8,153,66,73,73,73,73,8,153,8,8,8,8,]),'function_specifier':([0,1,6,7,8,9,36,54,58,63,114,235,251,256,291,330,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'struct_or_union_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,93,114,155,196,200,202,235,251,256,291,330,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'enum_specifier':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,93,114,155,196,200,202,235,251,256,291,330,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'struct_or_union':([0,1,6,7,8,9,36,50,54,58,63,68,69,72,73,93,114,155,196,200,202,235,251,256,291,330,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'declarator':([5,44,53,60,71,151,256,260,],[36,67,78,78,160,252,67,160,]),'init_declarator_list':([5,53,],[38,38,]),'pointer':([5,42,44,53,60,64,71,151,205,256,260,291,],[39,65,39,39,39,152,39,254,290,254,39,290,]),'direct_declarator':([5,39,44,53,60,71,151,254,256,260,],[40,61,40,40,40,40,40,61,40,40,]),'init_declarator':([5,53,60,],[41,41,139,]),'declaration_list':([36,],[54,]),'compound_statement':([36,54,58,114,132,225,228,310,354,355,356,379,381,388,391,393,],[55,79,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'type_qualifier_list':([42,62,143,],[64,140,246,]),'struct_declaration_list':([50,68,],[69,155,]),'struct_declaration':([50,68,69,155,],[70,70,157,157,]),'specifier_qualifier_list':([50,68,69,72,73,93,155,196,200,202,],[71,71,71,162,163,205,71,205,205,205,]),'enumerator_list':([51,77,],[74,167,]),'enumerator':([51,77,165,267,],[75,75,264,264,]),'initializer':([56,83,170,269,342,351,387,],[81,169,270,341,371,169,341,]),'assignment_expression':([56,58,62,83,93,114,132,137,140,170,175,187,189,190,196,200,202,225,228,230,231,232,233,235,243,246,257,269,310,317,318,329,342,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[82,138,141,82,138,138,138,138,241,82,275,138,138,281,138,138,138,138,138,312,138,138,138,138,322,324,335,82,138,138,138,363,82,373,82,138,138,138,138,138,138,138,138,82,138,138,138,]),'conditional_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,189,190,196,200,202,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[84,84,84,84,84,84,227,84,84,84,227,227,84,227,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,227,84,84,84,84,84,84,372,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'unary_expression':([56,58,62,83,88,89,90,92,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,228,230,231,232,233,235,243,246,257,261,269,287,310,317,318,329,342,344,347,349,351,354,355,356,357,358,359,379,381,387,388,391,393,],[85,85,85,85,195,197,199,201,85,85,199,85,85,85,199,199,85,199,85,85,199,85,85,85,85,85,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,85,85,85,85,85,85,85,85,85,85,199,85,199,85,85,85,85,85,199,85,199,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'logical_or_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,189,190,196,200,202,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'postfix_expression':([56,58,62,83,88,89,90,92,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,228,230,231,232,233,235,243,246,257,261,269,287,310,317,318,329,342,344,347,349,351,354,355,356,357,358,359,379,381,387,388,391,393,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'unary_operator':([56,58,62,83,88,89,90,92,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,228,230,231,232,233,235,243,246,257,261,269,287,310,317,318,329,342,344,347,349,351,354,355,356,357,358,359,379,381,387,388,391,393,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'cast_expression':([56,58,62,83,90,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,228,230,231,232,233,235,243,246,257,261,269,287,310,317,318,329,342,344,347,349,351,354,355,356,357,358,359,379,381,387,388,391,393,],[91,91,91,91,198,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,306,307,308,91,91,91,91,91,91,91,91,91,91,91,91,352,91,91,91,91,91,91,91,352,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'logical_and_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,277,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'primary_expression':([56,58,62,83,88,89,90,92,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,228,230,231,232,233,235,243,246,257,261,269,287,310,317,318,329,342,344,347,349,351,354,355,356,357,358,359,379,381,387,388,391,393,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'inclusive_or_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,292,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'exclusive_or_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,293,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'and_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,294,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'equality_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,295,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'relational_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,296,297,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'shift_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,298,299,300,301,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'additive_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,302,303,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'multiplicative_expression':([56,58,62,83,93,114,126,132,137,140,161,166,170,173,175,187,188,189,190,196,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,225,228,230,231,232,233,235,243,246,257,261,269,310,317,318,329,342,344,347,351,354,355,356,357,358,359,379,381,387,388,391,393,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,304,305,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'block_item_list':([58,],[114,]),'block_item':([58,114,],[115,224,]),'statement':([58,114,132,225,228,310,354,355,356,379,381,388,391,393,],[117,117,234,309,311,353,375,376,377,390,392,395,397,398,]),'labeled_statement':([58,114,132,225,228,310,354,355,356,379,381,388,391,393,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'expression_statement':([58,114,132,225,228,235,310,317,318,354,355,356,379,381,388,391,393,],[121,121,121,121,121,317,121,358,359,121,121,121,121,121,121,121,121,]),'selection_statement':([58,114,132,225,228,310,354,355,356,379,381,388,391,393,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'iteration_statement':([58,114,132,225,228,310,354,355,356,379,381,388,391,393,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'jump_statement':([58,114,132,225,228,310,354,355,356,379,381,388,391,393,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'expression':([58,93,114,132,137,187,189,196,200,202,225,228,231,232,233,235,310,317,318,354,355,356,357,358,359,379,381,388,391,393,],[128,204,128,128,240,276,278,204,204,204,128,128,313,314,315,128,128,128,128,128,128,128,378,380,382,128,128,128,128,128,]),'parameter_type_list':([63,256,291,330,],[145,333,333,366,]),'identifier_list':([63,],[147,]),'parameter_list':([63,256,291,330,],[148,148,148,148,]),'parameter_declaration':([63,251,256,291,330,],[150,327,150,150,150,]),'struct_declarator_list':([71,],[158,]),'struct_declarator':([71,260,],[159,337,]),'initializer_list':([83,351,],[168,374,]),'designation':([83,269,351,387,],[170,342,170,342,]),'designator_list':([83,269,351,387,],[171,171,171,171,]),'designator':([83,171,269,351,387,],[172,272,172,172,172,]),'assignment_operator':([85,],[175,]),'type_name':([93,196,200,202,],[203,284,285,286,]),'constant_expression':([126,161,166,173,261,],[226,262,265,273,338,]),'abstract_declarator':([151,205,256,291,],[253,289,332,332,]),'direct_abstract_declarator':([151,205,254,256,290,291,],[255,255,328,255,328,255,]),'argument_expression_list':([190,],[280,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','yacc.py',16),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','yacc.py',17),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','yacc.py',25),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','yacc.py',26),
  ('declaration -> declaration_specifiers ;','declaration',2,'p_declaration','yacc.py',34),
  ('declaration -> declaration_specifiers init_declarator_list ;','declaration',3,'p_declaration','yacc.py',35),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','yacc.py',43),
  ('init_declarator_list -> init_declarator_list , init_declarator','init_declarator_list',3,'p_init_declarator_list','yacc.py',44),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','yacc.py',51),
  ('init_declarator -> declarator = initializer','init_declarator',3,'p_init_declarator','yacc.py',52),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',61),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',62),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',63),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',64),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',65),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',66),
  ('declaration_specifiers -> function_specifier','declaration_specifiers',1,'p_declaration_specifiers','yacc.py',67),
  ('declaration_specifiers -> function_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','yacc.py',68),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',76),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',77),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',78),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',79),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','yacc.py',80),
  ('function_specifier -> INLINE','function_specifier',1,'p_function_specifier','yacc.py',88),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','yacc.py',96),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','yacc.py',97),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','yacc.py',98),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','yacc.py',99),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','yacc.py',100),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','yacc.py',101),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','yacc.py',102),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','yacc.py',103),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','yacc.py',104),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','yacc.py',105),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','yacc.py',106),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','yacc.py',107),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','yacc.py',114),
  ('type_qualifier -> RESTRICT','type_qualifier',1,'p_type_qualifier','yacc.py',115),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','yacc.py',116),
  ('enum_specifier -> ENUM { enumerator_list }','enum_specifier',4,'p_enum_specifier','yacc.py',124),
  ('enum_specifier -> ENUM IDENTIFIER { enumerator_list }','enum_specifier',5,'p_enum_specifier','yacc.py',125),
  ('enum_specifier -> ENUM { enumerator_list , }','enum_specifier',5,'p_enum_specifier','yacc.py',126),
  ('enum_specifier -> ENUM IDENTIFIER { enumerator_list , }','enum_specifier',6,'p_enum_specifier','yacc.py',127),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','yacc.py',128),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','yacc.py',138),
  ('enumerator_list -> enumerator_list , enumerator','enumerator_list',3,'p_enumerator_list','yacc.py',139),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','yacc.py',147),
  ('enumerator -> IDENTIFIER = constant_expression','enumerator',3,'p_enumerator','yacc.py',148),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }','struct_or_union_specifier',5,'p_struct_or_union_specifier','yacc.py',158),
  ('struct_or_union_specifier -> struct_or_union { struct_declaration_list }','struct_or_union_specifier',4,'p_struct_or_union_specifier','yacc.py',159),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','yacc.py',160),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','yacc.py',170),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','yacc.py',171),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','yacc.py',179),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','yacc.py',180),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list ;','struct_declaration',3,'p_struct_declaration','yacc.py',188),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','yacc.py',196),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','yacc.py',197),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','yacc.py',198),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','yacc.py',199),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','yacc.py',207),
  ('struct_declarator_list -> struct_declarator_list , struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','yacc.py',208),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','yacc.py',216),
  ('struct_declarator -> : constant_expression','struct_declarator',2,'p_struct_declarator','yacc.py',217),
  ('struct_declarator -> declarator : constant_expression','struct_declarator',3,'p_struct_declarator','yacc.py',218),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','yacc.py',226),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','yacc.py',227),
  ('pointer -> *','pointer',1,'p_pointer','yacc.py',235),
  ('pointer -> * type_qualifier_list','pointer',2,'p_pointer','yacc.py',236),
  ('pointer -> * pointer','pointer',2,'p_pointer','yacc.py',237),
  ('pointer -> * type_qualifier_list pointer','pointer',3,'p_pointer','yacc.py',238),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','yacc.py',246),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','yacc.py',247),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','yacc.py',255),
  ('direct_declarator -> ( declarator )','direct_declarator',3,'p_direct_declarator','yacc.py',256),
  ('direct_declarator -> direct_declarator [ type_qualifier_list assignment_expression ]','direct_declarator',5,'p_direct_declarator','yacc.py',257),
  ('direct_declarator -> direct_declarator [ type_qualifier_list ]','direct_declarator',4,'p_direct_declarator','yacc.py',258),
  ('direct_declarator -> direct_declarator [ assignment_expression ]','direct_declarator',4,'p_direct_declarator','yacc.py',259),
  ('direct_declarator -> direct_declarator [ STATIC type_qualifier_list assignment_expression ]','direct_declarator',6,'p_direct_declarator','yacc.py',260),
  ('direct_declarator -> direct_declarator [ type_qualifier_list STATIC assignment_expression ]','direct_declarator',6,'p_direct_declarator','yacc.py',261),
  ('direct_declarator -> direct_declarator [ type_qualifier_list * ]','direct_declarator',5,'p_direct_declarator','yacc.py',262),
  ('direct_declarator -> direct_declarator [ * ]','direct_declarator',4,'p_direct_declarator','yacc.py',263),
  ('direct_declarator -> direct_declarator [ ]','direct_declarator',3,'p_direct_declarator','yacc.py',264),
  ('direct_declarator -> direct_declarator ( parameter_type_list )','direct_declarator',4,'p_direct_declarator','yacc.py',265),
  ('direct_declarator -> direct_declarator ( identifier_list )','direct_declarator',4,'p_direct_declarator','yacc.py',266),
  ('direct_declarator -> direct_declarator ( )','direct_declarator',3,'p_direct_declarator','yacc.py',267),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','yacc.py',277),
  ('identifier_list -> identifier_list , IDENTIFIER','identifier_list',3,'p_identifier_list','yacc.py',278),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','yacc.py',290),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','yacc.py',291),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','yacc.py',299),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',300),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',301),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',302),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',303),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',304),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',305),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',306),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',307),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',308),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','yacc.py',309),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','yacc.py',317),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','yacc.py',325),
  ('conditional_expression -> logical_or_expression ? expression : conditional_expression','conditional_expression',5,'p_conditional_expression','yacc.py',326),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','yacc.py',334),
  ('logical_or_expression -> logical_or_expression OR_OP logical_and_expression','logical_or_expression',3,'p_logical_or_expression','yacc.py',335),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','yacc.py',343),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','yacc.py',344),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','yacc.py',352),
  ('inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','yacc.py',353),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','yacc.py',361),
  ('exclusive_or_expression -> exclusive_or_expression ^ and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','yacc.py',362),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','yacc.py',370),
  ('and_expression -> and_expression & equality_expression','and_expression',3,'p_and_expression','yacc.py',371),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','yacc.py',379),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','yacc.py',380),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','yacc.py',381),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','yacc.py',389),
  ('relational_expression -> relational_expression < shift_expression','relational_expression',3,'p_relational_expression','yacc.py',390),
  ('relational_expression -> relational_expression > shift_expression','relational_expression',3,'p_relational_expression','yacc.py',391),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','yacc.py',392),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','yacc.py',393),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','yacc.py',401),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','yacc.py',402),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','yacc.py',403),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','yacc.py',411),
  ('additive_expression -> additive_expression + multiplicative_expression','additive_expression',3,'p_additive_expression','yacc.py',412),
  ('additive_expression -> additive_expression - multiplicative_expression','additive_expression',3,'p_additive_expression','yacc.py',413),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','yacc.py',421),
  ('multiplicative_expression -> multiplicative_expression * cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',422),
  ('multiplicative_expression -> multiplicative_expression / cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',423),
  ('multiplicative_expression -> multiplicative_expression % cast_expression','multiplicative_expression',3,'p_multiplicative_expression','yacc.py',424),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','yacc.py',432),
  ('cast_expression -> ( type_name ) cast_expression','cast_expression',4,'p_cast_expression','yacc.py',433),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','yacc.py',441),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','yacc.py',442),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','yacc.py',443),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','yacc.py',444),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','yacc.py',445),
  ('unary_expression -> SIZEOF ( type_name )','unary_expression',4,'p_unary_expression','yacc.py',446),
  ('unary_operator -> &','unary_operator',1,'p_unary_operator','yacc.py',454),
  ('unary_operator -> *','unary_operator',1,'p_unary_operator','yacc.py',455),
  ('unary_operator -> +','unary_operator',1,'p_unary_operator','yacc.py',456),
  ('unary_operator -> -','unary_operator',1,'p_unary_operator','yacc.py',457),
  ('unary_operator -> ~','unary_operator',1,'p_unary_operator','yacc.py',458),
  ('unary_operator -> !','unary_operator',1,'p_unary_operator','yacc.py',459),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','yacc.py',467),
  ('postfix_expression -> postfix_expression [ expression ]','postfix_expression',4,'p_postfix_expression','yacc.py',468),
  ('postfix_expression -> postfix_expression ( )','postfix_expression',3,'p_postfix_expression','yacc.py',469),
  ('postfix_expression -> postfix_expression ( argument_expression_list )','postfix_expression',4,'p_postfix_expression','yacc.py',470),
  ('postfix_expression -> postfix_expression . IDENTIFIER','postfix_expression',3,'p_postfix_expression','yacc.py',471),
  ('postfix_expression -> postfix_expression PTR_OP IDENTIFIER','postfix_expression',3,'p_postfix_expression','yacc.py',472),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','yacc.py',473),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','yacc.py',474),
  ('postfix_expression -> ( type_name ) { initializer_list }','postfix_expression',6,'p_postfix_expression','yacc.py',475),
  ('postfix_expression -> ( type_name ) { initializer_list , }','postfix_expression',7,'p_postfix_expression','yacc.py',476),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','yacc.py',486),
  ('primary_expression -> CONSTANT','primary_expression',1,'p_primary_expression','yacc.py',487),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','yacc.py',488),
  ('primary_expression -> ( expression )','primary_expression',3,'p_primary_expression','yacc.py',489),
  ('expression -> assignment_expression','expression',1,'p_expression','yacc.py',499),
  ('expression -> expression , assignment_expression','expression',3,'p_expression','yacc.py',500),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','yacc.py',508),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','yacc.py',509),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','yacc.py',517),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','yacc.py',518),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','yacc.py',519),
  ('direct_abstract_declarator -> ( abstract_declarator )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',527),
  ('direct_abstract_declarator -> [ ]','direct_abstract_declarator',2,'p_direct_abstract_declarator','yacc.py',528),
  ('direct_abstract_declarator -> [ assignment_expression ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',529),
  ('direct_abstract_declarator -> direct_abstract_declarator [ ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',530),
  ('direct_abstract_declarator -> direct_abstract_declarator [ assignment_expression ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',531),
  ('direct_abstract_declarator -> [ * ]','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',532),
  ('direct_abstract_declarator -> direct_abstract_declarator [ * ]','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',533),
  ('direct_abstract_declarator -> ( )','direct_abstract_declarator',2,'p_direct_abstract_declarator','yacc.py',534),
  ('direct_abstract_declarator -> ( parameter_type_list )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',535),
  ('direct_abstract_declarator -> direct_abstract_declarator ( )','direct_abstract_declarator',3,'p_direct_abstract_declarator','yacc.py',536),
  ('direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )','direct_abstract_declarator',4,'p_direct_abstract_declarator','yacc.py',537),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','yacc.py',546),
  ('parameter_type_list -> parameter_list , ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','yacc.py',547),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','yacc.py',555),
  ('parameter_list -> parameter_list , parameter_declaration','parameter_list',3,'p_parameter_list','yacc.py',556),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','yacc.py',563),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','yacc.py',564),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','yacc.py',565),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','yacc.py',572),
  ('argument_expression_list -> argument_expression_list , assignment_expression','argument_expression_list',3,'p_argument_expression_list','yacc.py',573),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','yacc.py',580),
  ('initializer_list -> designation initializer','initializer_list',2,'p_initializer_list','yacc.py',581),
  ('initializer_list -> initializer_list , initializer','initializer_list',3,'p_initializer_list','yacc.py',582),
  ('initializer_list -> initializer_list , designation initializer','initializer_list',4,'p_initializer_list','yacc.py',583),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','yacc.py',590),
  ('initializer -> { initializer_list }','initializer',3,'p_initializer','yacc.py',591),
  ('initializer -> { initializer_list , }','initializer',4,'p_initializer','yacc.py',592),
  ('designation -> designator_list =','designation',2,'p_designation','yacc.py',598),
  ('designator_list -> designator','designator_list',1,'p_designator_list','yacc.py',605),
  ('designator_list -> designator_list designator','designator_list',2,'p_designator_list','yacc.py',606),
  ('designator -> [ constant_expression ]','designator',3,'p_designator','yacc.py',614),
  ('designator -> . IDENTIFIER','designator',2,'p_designator','yacc.py',615),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition','yacc.py',624),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','yacc.py',625),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','yacc.py',632),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','yacc.py',633),
  ('compound_statement -> { }','compound_statement',2,'p_compound_statement','yacc.py',640),
  ('compound_statement -> { block_item_list }','compound_statement',3,'p_compound_statement','yacc.py',641),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','yacc.py',648),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','yacc.py',649),
  ('block_item -> declaration','block_item',1,'p_block_item','yacc.py',656),
  ('block_item -> statement','block_item',1,'p_block_item','yacc.py',657),
  ('statement -> labeled_statement','statement',1,'p_statement','yacc.py',665),
  ('statement -> compound_statement','statement',1,'p_statement','yacc.py',666),
  ('statement -> expression_statement','statement',1,'p_statement','yacc.py',667),
  ('statement -> selection_statement','statement',1,'p_statement','yacc.py',668),
  ('statement -> iteration_statement','statement',1,'p_statement','yacc.py',669),
  ('statement -> jump_statement','statement',1,'p_statement','yacc.py',670),
  ('labeled_statement -> IDENTIFIER : statement','labeled_statement',3,'p_labeled_statement','yacc.py',677),
  ('labeled_statement -> CASE constant_expression : statement','labeled_statement',4,'p_labeled_statement','yacc.py',678),
  ('labeled_statement -> DEFAULT : statement','labeled_statement',3,'p_labeled_statement','yacc.py',679),
  ('expression_statement -> ;','expression_statement',1,'p_expression_statement','yacc.py',688),
  ('expression_statement -> expression ;','expression_statement',2,'p_expression_statement','yacc.py',689),
  ('selection_statement -> IF ( expression ) statement ELSE statement','selection_statement',7,'p_selection_statement','yacc.py',696),
  ('selection_statement -> IF ( expression ) statement','selection_statement',5,'p_selection_statement','yacc.py',697),
  ('selection_statement -> SWITCH ( expression ) statement','selection_statement',5,'p_selection_statement','yacc.py',698),
  ('iteration_statement -> WHILE ( expression ) statement','iteration_statement',5,'p_iteration_statement','yacc.py',705),
  ('iteration_statement -> DO statement WHILE ( expression ) ;','iteration_statement',7,'p_iteration_statement','yacc.py',706),
  ('iteration_statement -> FOR ( expression_statement expression_statement ) statement','iteration_statement',6,'p_iteration_statement','yacc.py',707),
  ('iteration_statement -> FOR ( expression_statement expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','yacc.py',708),
  ('iteration_statement -> FOR ( declaration expression_statement ) statement','iteration_statement',6,'p_iteration_statement','yacc.py',709),
  ('iteration_statement -> FOR ( declaration expression_statement expression ) statement','iteration_statement',7,'p_iteration_statement','yacc.py',710),
  ('jump_statement -> GOTO IDENTIFIER ;','jump_statement',3,'p_jump_statement','yacc.py',717),
  ('jump_statement -> CONTINUE ;','jump_statement',2,'p_jump_statement','yacc.py',718),
  ('jump_statement -> BREAK ;','jump_statement',2,'p_jump_statement','yacc.py',719),
  ('jump_statement -> RETURN ;','jump_statement',2,'p_jump_statement','yacc.py',720),
  ('jump_statement -> RETURN expression ;','jump_statement',3,'p_jump_statement','yacc.py',721),
]
